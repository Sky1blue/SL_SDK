<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\cam_h7.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\cam_h7.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Mon Jan  3 04:17:38 2022
<BR><P>
<H3>Maximum Stack Usage =       2528 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
ota_thread &rArr; fota_upgrade &rArr; tiny_aes_setkey_dec &rArr; tiny_aes_setkey_enc
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[139]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[85]">ADC3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[85]">ADC3_IRQHandler</a><BR>
 <LI><a href="#[252]">osRtxThreadListRoot</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[252]">osRtxThreadListRoot</a><BR>
 <LI><a href="#[8]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">BusFault_Handler</a><BR>
 <LI><a href="#[6]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">HardFault_Handler</a><BR>
 <LI><a href="#[7]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">NMI_Handler</a><BR>
 <LI><a href="#[35f]">osRtxErrorNotify</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[35f]">osRtxErrorNotify</a><BR>
 <LI><a href="#[9]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">UsageFault_Handler</a><BR>
 <LI><a href="#[d5]">osRtxIdleThread</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d5]">osRtxIdleThread</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[85]">ADC3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[20]">ADC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[87]">BDMA_Channel0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[88]">BDMA_Channel1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[89]">BDMA_Channel2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8a]">BDMA_Channel3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8b]">BDMA_Channel4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8c]">BDMA_Channel5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8d]">BDMA_Channel6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8e]">BDMA_Channel7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8]">BusFault_Handler</a> from stm32h7xx_it.o(.text.BusFault_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[66]">CEC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8f]">COMP1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[95]">CRS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[57]">DCMI_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[76]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[77]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[78]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[79]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream0_IRQHandler</a> from stm32h7xx_it.o(.text.DMA1_Stream0_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream2_IRQHandler</a> from stm32h7xx_it.o(.text.DMA1_Stream2_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1d]">DMA1_Stream4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1e]">DMA1_Stream5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1f]">DMA1_Stream6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3c]">DMA1_Stream7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[62]">DMA2D_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[47]">DMA2_Stream2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[48]">DMA2_Stream3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[49]">DMA2_Stream4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4d]">DMA2_Stream5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6e]">DMAMUX1_OVR_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[86]">DMAMUX2_OVR_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[b]">DebugMon_Handler</a> from stm32h7xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[96]">ECC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4a]">ETH_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4b]">ETH_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[14]">EXTI0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[36]">EXTI15_10_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[15]">EXTI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[16]">EXTI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[17]">EXTI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[18]">EXTI4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[25]">EXTI9_5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[21]">FDCAN1_IT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[23]">FDCAN1_IT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[22]">FDCAN2_IT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[24]">FDCAN2_IT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4c]">FDCAN_CAL_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[12]">FLASH_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3d]">FMC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[59]">FPU_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[9e]">HAL_GPIO_DeInit</a> from stm32h7xx_hal_gpio.o(.text.HAL_GPIO_DeInit) referenced 2 times from quadspi.o(.text.HAL_QSPI_MspDeInit)
 <LI><a href="#[9f]">HAL_GPIO_Init</a> from stm32h7xx_hal_gpio.o(.text.HAL_GPIO_Init) referenced 2 times from quadspi.o(.text.HAL_QSPI_MspInit)
 <LI><a href="#[c9]">HAL_MPU_ConfigRegion</a> from stm32h7xx_hal_cortex.o(.text.HAL_MPU_ConfigRegion) referenced 2 times from main.o(.text.main)
 <LI><a href="#[75]">HRTIM1_FLT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6f]">HRTIM1_Master_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[70]">HRTIM1_TIMA_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[71]">HRTIM1_TIMB_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[72]">HRTIM1_TIMC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[73]">HRTIM1_TIMD_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[74]">HRTIM1_TIME_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[84]">HSEM1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6]">HardFault_Handler</a> from stm32h7xx_it.o(.text.HardFault_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2e]">I2C1_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2d]">I2C1_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[30]">I2C2_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2f]">I2C2_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[52]">I2C3_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[51]">I2C3_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[68]">I2C4_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[67]">I2C4_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[81]">JPEG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[65]">LPTIM1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[90]">LPTIM2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[91]">LPTIM3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[92]">LPTIM4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[93]">LPTIM5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[94]">LPUART1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[61]">LTDC_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[60]">LTDC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[80]">MDIOS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7f]">MDIOS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[82]">MDMA_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7]">MemManage_Handler</a> from stm32h7xx_it.o(.text.MemManage_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5]">NMI_Handler</a> from stm32h7xx_it.o(.text.NMI_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6b]">OTG_FS_EP1_IN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6a]">OTG_FS_EP1_OUT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6d]">OTG_FS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6c]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[54]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[53]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[55]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[f]">PVD_AVD_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[c]">PendSV_Handler</a> from irq_armv7m.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[aa]">QSPI_DMAAbortCplt</a> from stm32h7xx_hal_qspi.o(.text.QSPI_DMAAbortCplt) referenced 2 times from stm32h7xx_hal_qspi.o(.text.OUTLINED_FUNCTION_1)
 <LI><a href="#[64]">QUADSPI_IRQHandler</a> from stm32h7xx_it.o(.text.QUADSPI_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[13]">RCC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[58]">RNG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[37]">RTC_Alarm_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[11]">RTC_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4]">Reset_Handler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5f]">SAI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[63]">SAI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7a]">SAI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[97]">SAI4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3e]">SDMMC1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[83]">SDMMC2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[69]">SPDIF_RX_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[31]">SPI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[32]">SPI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[40]">SPI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5c]">SPI4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5d]">SPI5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5e]">SPI6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[a]">SVC_Handler</a> from irq_armv7m.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7b]">SWPMI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[d]">SysTick_Handler</a> from irq_armv7m.o(.text) referenced 2 times from rtx_kernel.o(.text.svcRtxKernelStart)
 <LI><a href="#[d]">SysTick_Handler</a> from irq_armv7m.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[99]">SystemInit</a> from system_stm32h7xx.o(.text.SystemInit) referenced from startup_stm32h743xx.o(.text)
 <LI><a href="#[10]">TAMP_STAMP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7c]">TIM15_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7d]">TIM16_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7e]">TIM17_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[26]">TIM1_BRK_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[29]">TIM1_CC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[28]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[27]">TIM1_UP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2a]">TIM2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2b]">TIM3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2c]">TIM4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3f]">TIM5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[43]">TIM6_DAC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[44]">TIM7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[38]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3b]">TIM8_CC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3a]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[39]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[41]">UART4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[42]">UART5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5a]">UART7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5b]">UART8_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[a2]">UART_DMAAbortOnError</a> from stm32h7xx_hal_uart.o(.text.UART_DMAAbortOnError) referenced 2 times from stm32h7xx_hal_uart.o(.text.HAL_UART_IRQHandler)
 <LI><a href="#[a3]">UART_DMAError</a> from stm32h7xx_hal_uart.o(.text.UART_DMAError) referenced 2 times from stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
 <LI><a href="#[a3]">UART_DMAError</a> from stm32h7xx_hal_uart.o(.text.UART_DMAError) referenced 2 times from stm32h7xx_hal_uart.o(.text.UART_Start_Receive_DMA)
 <LI><a href="#[ae]">UART_DMAReceiveCplt</a> from stm32h7xx_hal_uart.o(.text.UART_DMAReceiveCplt) referenced 2 times from stm32h7xx_hal_uart.o(.text.UART_Start_Receive_DMA)
 <LI><a href="#[af]">UART_DMARxHalfCplt</a> from stm32h7xx_hal_uart.o(.text.UART_DMARxHalfCplt) referenced 2 times from stm32h7xx_hal_uart.o(.text.UART_Start_Receive_DMA)
 <LI><a href="#[a0]">UART_DMARxOnlyAbortCallback</a> from stm32h7xx_hal_uart.o(.text.UART_DMARxOnlyAbortCallback) referenced 2 times from stm32h7xx_hal_uart.o(.text.HAL_UART_AbortReceive_IT)
 <LI><a href="#[a4]">UART_DMATransmitCplt</a> from stm32h7xx_hal_uart.o(.text.UART_DMATransmitCplt) referenced 2 times from stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
 <LI><a href="#[a5]">UART_DMATxHalfCplt</a> from stm32h7xx_hal_uart.o(.text.UART_DMATxHalfCplt) referenced 2 times from stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
 <LI><a href="#[a1]">UART_DMATxOnlyAbortCallback</a> from stm32h7xx_hal_uart.o(.text.UART_DMATxOnlyAbortCallback) referenced 2 times from stm32h7xx_hal_uart.o(.text.HAL_UART_AbortTransmit_IT)
 <LI><a href="#[ac]">UART_RxISR_16BIT</a> from stm32h7xx_hal_uart.o(.text.UART_RxISR_16BIT) referenced 2 times from stm32h7xx_hal_uart.o(.text.UART_RxISR_16BIT_FIFOEN)
 <LI><a href="#[ac]">UART_RxISR_16BIT</a> from stm32h7xx_hal_uart.o(.text.UART_RxISR_16BIT) referenced 2 times from stm32h7xx_hal_uart.o(.text.UART_Start_Receive_IT)
 <LI><a href="#[b1]">UART_RxISR_16BIT_FIFOEN</a> from stm32h7xx_hal_uart.o(.text.UART_RxISR_16BIT_FIFOEN) referenced 2 times from stm32h7xx_hal_uart.o(.text.UART_Start_Receive_IT)
 <LI><a href="#[ad]">UART_RxISR_8BIT</a> from stm32h7xx_hal_uart.o(.text.UART_RxISR_8BIT) referenced 2 times from stm32h7xx_hal_uart.o(.text.UART_RxISR_8BIT_FIFOEN)
 <LI><a href="#[ad]">UART_RxISR_8BIT</a> from stm32h7xx_hal_uart.o(.text.UART_RxISR_8BIT) referenced 2 times from stm32h7xx_hal_uart.o(.text.UART_Start_Receive_IT)
 <LI><a href="#[b0]">UART_RxISR_8BIT_FIFOEN</a> from stm32h7xx_hal_uart.o(.text.UART_RxISR_8BIT_FIFOEN) referenced 2 times from stm32h7xx_hal_uart.o(.text.UART_Start_Receive_IT)
 <LI><a href="#[a9]">UART_TxISR_16BIT</a> from stm32h7xx_hal_uart.o(.text.UART_TxISR_16BIT) referenced 2 times from stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit_IT)
 <LI><a href="#[a8]">UART_TxISR_16BIT_FIFOEN</a> from stm32h7xx_hal_uart.o(.text.UART_TxISR_16BIT_FIFOEN) referenced 2 times from stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit_IT)
 <LI><a href="#[a7]">UART_TxISR_8BIT</a> from stm32h7xx_hal_uart.o(.text.UART_TxISR_8BIT) referenced 2 times from stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit_IT)
 <LI><a href="#[a6]">UART_TxISR_8BIT_FIFOEN</a> from stm32h7xx_hal_uart.o(.text.UART_TxISR_8BIT_FIFOEN) referenced 2 times from stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit_IT)
 <LI><a href="#[33]">USART1_IRQHandler</a> from stm32h7xx_it.o(.text.USART1_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[34]">USART2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[35]">USART3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[50]">USART6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[9]">UsageFault_Handler</a> from stm32h7xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[98]">WAKEUP_PIN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[e]">WWDG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[9a]">__main</a> from __main.o(!!!main) referenced from startup_stm32h743xx.o(.text)
 <LI><a href="#[9c]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[9d]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[9b]">_snputc</a> from _snputc.o(.text) referenced from noretval__2snprintf.o(.text)
 <LI><a href="#[b6]">alloc_kv_cb</a> from fdb_kvdb.o(.text.alloc_kv_cb) referenced 2 times from fdb_kvdb.o(.text.alloc_kv)
 <LI><a href="#[b3]">check_and_recovery_gc_cb</a> from fdb_kvdb.o(.text.check_and_recovery_gc_cb) referenced 2 times from fdb_kvdb.o(.text._fdb_kv_load)
 <LI><a href="#[b4]">check_and_recovery_kv_cb</a> from fdb_kvdb.o(.text.check_and_recovery_kv_cb) referenced 2 times from fdb_kvdb.o(.text._fdb_kv_load)
 <LI><a href="#[b2]">check_sec_hdr_cb</a> from fdb_kvdb.o(.text.check_sec_hdr_cb) referenced 2 times from fdb_kvdb.o(.text._fdb_kv_load)
 <LI><a href="#[ba]">com_recv</a> from hal_com_stm32h7.o(.text.com_recv) referenced 2 times from hal_com_stm32h7.o(.text.com_regist)
 <LI><a href="#[bb]">com_recv_async</a> from hal_com_stm32h7.o(.text.com_recv_async) referenced 2 times from hal_com_stm32h7.o(.text.com_regist)
 <LI><a href="#[f2]">com_regist</a> from hal_com_stm32h7.o(.text.com_regist) referenced from hal_com_stm32h7.o(hal_constructors)
 <LI><a href="#[bc]">com_send</a> from hal_com_stm32h7.o(.text.com_send) referenced 2 times from hal_com_stm32h7.o(.text.com_regist)
 <LI><a href="#[bd]">com_send_async</a> from hal_com_stm32h7.o(.text.com_send_async) referenced 2 times from hal_com_stm32h7.o(.text.com_regist)
 <LI><a href="#[f3]">com_unregist</a> from hal_com_stm32h7.o(.text.com_unregist) referenced from hal_com_stm32h7.o(hal_destructors)
 <LI><a href="#[c8]">do_gc</a> from fdb_kvdb.o(.text.do_gc) referenced 2 times from fdb_kvdb.o(.text.gc_collect)
 <LI><a href="#[3]">erase</a> from fal_adapter.o(.text.erase) referenced 2 times from fal_adapter.o(.data.nor_flash0)
 <LI><a href="#[be]">fdb_calc_crc32</a> from fdb_utils.o(.text.fdb_calc_crc32) referenced 2 times from fdb_kvdb.o(.text.create_kv_blob)
 <LI><a href="#[c6]">find_kv_cb</a> from fdb_kvdb.o(.text.find_kv_cb) referenced 2 times from fdb_kvdb.o(.text.find_kv_no_cache)
 <LI><a href="#[c7]">gc_check_cb</a> from fdb_kvdb.o(.text.gc_check_cb) referenced 2 times from fdb_kvdb.o(.text.gc_collect)
 <LI><a href="#[ab]">ht_get_helper</a> from ds_hashmap.o(.text.ht_get_helper) referenced from ds_hashmap.o(.text.OUTLINED_FUNCTION_9)
 <LI><a href="#[ab]">ht_get_helper</a> from ds_hashmap.o(.text.ht_get_helper) referenced from ds_hashmap.o(.text.ht_get)
 <LI><a href="#[0]">init</a> from fal_adapter.o(.text.init) referenced 2 times from fal_adapter.o(.data.nor_flash0)
 <LI><a href="#[c5]">log_out</a> from rte_log.o(.text.log_out) referenced 2 times from fal_partition.o(.text.fal_show_part_table)
 <LI><a href="#[c5]">log_out</a> from rte_log.o(.text.log_out) referenced 2 times from fota.o(.text.fota_part_fw_verify)
 <LI><a href="#[c5]">log_out</a> from rte_log.o(.text.log_out) referenced 2 times from fal_adapter.o(.text.init)
 <LI><a href="#[c5]">log_out</a> from rte_log.o(.text.log_out) referenced 2 times from fota.o(.text.shell_cmd_fota)
 <LI><a href="#[de]">osMutexNew</a> from rtx_mutex.o(.text.osMutexNew) referenced 2 times from rte_adapter_cmsis_rtos2.o(.text.rte_init)
 <LI><a href="#[d5]">osRtxIdleThread</a> from os_tick.o(.text.osRtxIdleThread) referenced 2 times from rtx_thread.o(.text.osRtxThreadStartup)
 <LI><a href="#[e2]">osRtxMemoryInit</a> from rtx_memory.o(.text.osRtxMemoryInit) referenced 2 times from rtx_kernel.o(.text.svcRtxKernelInitialize)
 <LI><a href="#[e3]">osRtxSemaphorePostProcess</a> from rtx_semaphore.o(.text.osRtxSemaphorePostProcess) referenced 2 times from rtx_semaphore.o(.text.svcRtxSemaphoreNew)
 <LI><a href="#[e5]">osRtxThreadPostProcess</a> from rtx_thread.o(.text.osRtxThreadPostProcess) referenced 2 times from rtx_thread.o(.text.svcRtxThreadNew)
 <LI><a href="#[e4]">osThreadExit</a> from rtx_thread.o(.text.osThreadExit) referenced 2 times from rtx_thread.o(.text.svcRtxThreadNew)
 <LI><a href="#[e8]">ota_thread</a> from ota_thread.o(.text.ota_thread) referenced 2 times from system_thread.o(.text.system_thread)
 <LI><a href="#[1]">read</a> from fal_adapter.o(.text.read) referenced 2 times from fal_adapter.o(.data.nor_flash0)
 <LI><a href="#[e6]">rte_data_out</a> from system_thread.o(.text.rte_data_out) referenced 2 times from system_thread.o(.text.system_thread)
 <LI><a href="#[df]">rte_get_tick_ms</a> from rte_adapter_cmsis_rtos2.o(.text.rte_get_tick_ms) referenced 2 times from rte_adapter_cmsis_rtos2.o(.text.rte_init)
 <LI><a href="#[b7]">rte_mutex_lock</a> from rte_adapter_cmsis_rtos2.o(.text.rte_mutex_lock) referenced 2 times from hal_com_stm32h7.o(.text.com_regist)
 <LI><a href="#[b7]">rte_mutex_lock</a> from rte_adapter_cmsis_rtos2.o(.text.rte_mutex_lock) referenced 2 times from hal.o(.text.hal_init)
 <LI><a href="#[b7]">rte_mutex_lock</a> from rte_adapter_cmsis_rtos2.o(.text.rte_mutex_lock) referenced 2 times from fal_adapter.o(.text.init)
 <LI><a href="#[b7]">rte_mutex_lock</a> from rte_adapter_cmsis_rtos2.o(.text.rte_mutex_lock) referenced 2 times from rte_adapter_cmsis_rtos2.o(.text.rte_init)
 <LI><a href="#[b8]">rte_mutex_trylock</a> from rte_adapter_cmsis_rtos2.o(.text.rte_mutex_trylock) referenced 2 times from hal_com_stm32h7.o(.text.com_regist)
 <LI><a href="#[b8]">rte_mutex_trylock</a> from rte_adapter_cmsis_rtos2.o(.text.rte_mutex_trylock) referenced 2 times from hal.o(.text.hal_init)
 <LI><a href="#[b9]">rte_mutex_unlock</a> from rte_adapter_cmsis_rtos2.o(.text.rte_mutex_unlock) referenced 2 times from hal_com_stm32h7.o(.text.com_regist)
 <LI><a href="#[b9]">rte_mutex_unlock</a> from rte_adapter_cmsis_rtos2.o(.text.rte_mutex_unlock) referenced 2 times from hal.o(.text.hal_init)
 <LI><a href="#[b9]">rte_mutex_unlock</a> from rte_adapter_cmsis_rtos2.o(.text.rte_mutex_unlock) referenced 2 times from fal_adapter.o(.text.init)
 <LI><a href="#[b9]">rte_mutex_unlock</a> from rte_adapter_cmsis_rtos2.o(.text.rte_mutex_unlock) referenced 2 times from rte_adapter_cmsis_rtos2.o(.text.rte_init)
 <LI><a href="#[e7]">running_timer</a> from system_thread.o(.text.running_timer) referenced 2 times from system_thread.o(.text.system_thread)
 <LI><a href="#[b5]">sector_statistics_cb</a> from fdb_kvdb.o(.text.sector_statistics_cb) referenced 2 times from fdb_kvdb.o(.text.alloc_kv)
 <LI><a href="#[ed]">shell_backward_cursor</a> from rte_shell.o(.text.shell_backward_cursor) referenced from rte_shell.o(.rodata.key_seq_map)
 <LI><a href="#[f8]">shell_cmd_fota</a> from fota.o(.text.shell_cmd_fota) referenced from fota.o(shell)
 <LI><a href="#[f7]">shell_cmd_help</a> from rte_shell.o(.text.shell_cmd_help) referenced from rte_shell.o(shell)
 <LI><a href="#[f6]">shell_cmd_mem</a> from rte_memory.o(.text.shell_cmd_mem) referenced from rte_memory.o(shell)
 <LI><a href="#[f4]">shell_cmd_qspitest</a> from driver_w25qxx_atapter.o(.text.shell_cmd_qspitest) referenced from driver_w25qxx_atapter.o(shell)
 <LI><a href="#[f1]">shell_delete</a> from rte_shell.o(.text.shell_delete) referenced from rte_shell.o(.rodata.key_seq_map)
 <LI><a href="#[ee]">shell_forward_cursor</a> from rte_shell.o(.text.shell_forward_cursor) referenced from rte_shell.o(.rodata.key_seq_map)
 <LI><a href="#[ec]">shell_get_next_history</a> from rte_shell.o(.text.shell_get_next_history) referenced from rte_shell.o(.rodata.key_seq_map)
 <LI><a href="#[eb]">shell_get_pre_history</a> from rte_shell.o(.text.shell_get_pre_history) referenced from rte_shell.o(.rodata.key_seq_map)
 <LI><a href="#[f0]">shell_line_end</a> from rte_shell.o(.text.shell_line_end) referenced from rte_shell.o(.rodata.key_seq_map)
 <LI><a href="#[ef]">shell_line_home</a> from rte_shell.o(.text.shell_line_home) referenced from rte_shell.o(.rodata.key_seq_map)
 <LI><a href="#[cb]">shell_printf</a> from rte_shell.o(.text.shell_printf) referenced 2 times from rte_memory.o(.text.memory_demon)
 <LI><a href="#[e9]">shell_task</a> from rte_shell.o(.text.shell_task) referenced 2 times from system_thread.o(.text.system_thread)
 <LI><a href="#[f5]">shell_upgrade_cmd</a> from ota_thread.o(.text.shell_upgrade_cmd) referenced from ota_thread.o(shell)
 <LI><a href="#[ea]">single_timer_free_cb</a> from rte_timer.o(.text.single_timer_free_cb) referenced 2 times from rte_timer.o(.text.timer_create_group)
 <LI><a href="#[cc]">svcRtxDelay</a> from rtx_delay.o(.text.svcRtxDelay) referenced 2 times from rtx_delay.o(.text.osDelay)
 <LI><a href="#[cd]">svcRtxKernelGetState</a> from rtx_kernel.o(.text.svcRtxKernelGetState) referenced 2 times from rtx_kernel.o(.text.osKernelGetState)
 <LI><a href="#[ce]">svcRtxKernelGetTickCount</a> from rtx_kernel.o(.text.svcRtxKernelGetTickCount) referenced 2 times from rtx_kernel.o(.text.osKernelGetTickCount)
 <LI><a href="#[cf]">svcRtxKernelInitialize</a> from rtx_kernel.o(.text.svcRtxKernelInitialize) referenced 2 times from rtx_kernel.o(.text.osKernelInitialize)
 <LI><a href="#[d0]">svcRtxKernelStart</a> from rtx_kernel.o(.text.svcRtxKernelStart) referenced 2 times from rtx_kernel.o(.text.osKernelStart)
 <LI><a href="#[d1]">svcRtxMutexAcquire</a> from rtx_mutex.o(.text.svcRtxMutexAcquire) referenced 2 times from rtx_mutex.o(.text.osMutexAcquire)
 <LI><a href="#[d2]">svcRtxMutexDelete</a> from rtx_mutex.o(.text.svcRtxMutexDelete) referenced 2 times from rtx_mutex.o(.text.osMutexDelete)
 <LI><a href="#[d3]">svcRtxMutexNew</a> from rtx_mutex.o(.text.svcRtxMutexNew) referenced 2 times from rtx_mutex.o(.text.osMutexNew)
 <LI><a href="#[d4]">svcRtxMutexRelease</a> from rtx_mutex.o(.text.svcRtxMutexRelease) referenced 2 times from rtx_mutex.o(.text.osMutexRelease)
 <LI><a href="#[d6]">svcRtxSemaphoreAcquire</a> from rtx_semaphore.o(.text.svcRtxSemaphoreAcquire) referenced 2 times from rtx_semaphore.o(.text.osSemaphoreAcquire)
 <LI><a href="#[d7]">svcRtxSemaphoreNew</a> from rtx_semaphore.o(.text.svcRtxSemaphoreNew) referenced 2 times from rtx_semaphore.o(.text.osSemaphoreNew)
 <LI><a href="#[d8]">svcRtxSemaphoreRelease</a> from rtx_semaphore.o(.text.svcRtxSemaphoreRelease) referenced 2 times from rtx_semaphore.o(.text.osSemaphoreRelease)
 <LI><a href="#[d9]">svcRtxThreadExit</a> from rtx_thread.o(.text.svcRtxThreadExit) referenced 2 times from rtx_thread.o(.text.osThreadExit)
 <LI><a href="#[da]">svcRtxThreadGetId</a> from rtx_thread.o(.text.svcRtxThreadGetId) referenced 2 times from rtx_thread.o(.text.osThreadGetId)
 <LI><a href="#[db]">svcRtxThreadNew</a> from rtx_thread.o(.text.svcRtxThreadNew) referenced 2 times from rtx_thread.o(.text.osThreadNew)
 <LI><a href="#[dc]">svcRtxThreadSetPriority</a> from rtx_thread.o(.text.svcRtxThreadSetPriority) referenced 2 times from rtx_thread.o(.text.osThreadSetPriority)
 <LI><a href="#[dd]">svcRtxThreadYield</a> from rtx_thread.o(.text.svcRtxThreadYield) referenced 2 times from rtx_thread.o(.text.osThreadYield)
 <LI><a href="#[ca]">system_thread</a> from system_thread.o(.text.system_thread) referenced 2 times from main.o(.text.main)
 <LI><a href="#[bf]">w25qxx_interface_debug_print</a> from driver_w25qxx_atapter.o(.text.w25qxx_interface_debug_print) referenced 2 times from driver_w25qxx_atapter.o(.text.driver_w25qxx_init)
 <LI><a href="#[bf]">w25qxx_interface_debug_print</a> from driver_w25qxx_atapter.o(.text.w25qxx_interface_debug_print) referenced 2 times from driver_w25qxx_atapter.o(.text.w25qxx_read_test)
 <LI><a href="#[c1]">w25qxx_interface_delay_ms</a> from driver_w25qxx_atapter.o(.text.w25qxx_interface_delay_ms) referenced 2 times from driver_w25qxx_atapter.o(.text.driver_w25qxx_init)
 <LI><a href="#[c0]">w25qxx_interface_delay_us</a> from driver_w25qxx_atapter.o(.text.w25qxx_interface_delay_us) referenced 2 times from driver_w25qxx_atapter.o(.text.driver_w25qxx_init)
 <LI><a href="#[c3]">w25qxx_interface_spi_qspi_deinit</a> from driver_w25qxx_atapter.o(.text.w25qxx_interface_spi_qspi_deinit) referenced 2 times from driver_w25qxx_atapter.o(.text.driver_w25qxx_init)
 <LI><a href="#[c4]">w25qxx_interface_spi_qspi_init</a> from driver_w25qxx_atapter.o(.text.w25qxx_interface_spi_qspi_init) referenced 2 times from driver_w25qxx_atapter.o(.text.driver_w25qxx_init)
 <LI><a href="#[c2]">w25qxx_interface_spi_qspi_write_read</a> from driver_w25qxx_atapter.o(.text.w25qxx_interface_spi_qspi_write_read) referenced 2 times from driver_w25qxx_atapter.o(.text.driver_w25qxx_init)
 <LI><a href="#[2]">write</a> from fal_adapter.o(.text.write) referenced 2 times from fal_adapter.o(.data.nor_flash0)
 <LI><a href="#[e0]">ymodem_on_begin</a> from ota_thread.o(.text.ymodem_on_begin) referenced 2 times from ota_thread.o(.text.shell_upgrade_cmd)
 <LI><a href="#[e1]">ymodem_on_data</a> from ota_thread.o(.text.ymodem_on_data) referenced 2 times from ota_thread.o(.text.shell_upgrade_cmd)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[9a]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(.text)
</UL>
<P><STRONG><a name="[fd]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[ff]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[423]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[424]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[425]"></a>__decompress</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[426]"></a>__decompress0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[427]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[100]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[11e]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[102]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[428]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[110]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[104]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[429]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[42a]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[106]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[42b]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[108]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_common &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[42c]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[42d]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[10a]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[42e]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[42f]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[430]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[431]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[432]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[433]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[434]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[435]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[436]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[437]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[438]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[439]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[43a]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[43b]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[43c]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[115]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[43d]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[43e]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[43f]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[440]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[441]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[442]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[443]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[fe]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[444]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[10b]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[10d]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_postsh_1 &rArr; _platform_post_stackheap_init &rArr; osKernelInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[10f]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[111]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; MX_QUADSPI_Init &rArr; HAL_QSPI_Init &rArr; HAL_QSPI_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; OUTLINED_FUNCTION_8 &rArr; RCCEx_PLL2_Config &rArr; HAL_GetTick &rArr; rte_get_tick_ms &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[445]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[13a]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[114]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[446]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[116]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[32f]"></a>rand</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_create
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_test
</UL>

<P><STRONG><a name="[4]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>BDMA_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>BDMA_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>BDMA_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>BDMA_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>BDMA_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>BDMA_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>BDMA_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>BDMA_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>COMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>DMAMUX2_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>ECC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>FDCAN2_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>FDCAN2_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>FDCAN_CAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>HRTIM1_FLT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>HRTIM1_Master_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>HRTIM1_TIMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>HRTIM1_TIMB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>HRTIM1_TIMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>HRTIM1_TIMD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>HRTIM1_TIME_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>HSEM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>JPEG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>LPTIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>LPTIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>LPTIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>MDIOS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>MDIOS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>MDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>OTG_FS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>OTG_FS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>PVD_AVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>SAI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>SAI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>SDMMC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>WAKEUP_PIN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[139]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32h743xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, irq_armv7m.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PendSV_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, irq_armv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PendSV_Handler &rArr; osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, irq_armv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SysTick_Handler &rArr; osRtxTick_Handler &rArr; osRtxThreadDelayTick &rArr; osRtxMutexOwnerRestore &rArr; osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> startup_stm32h743xx.o(RESET)
<LI> rtx_kernel.o(.text.svcRtxKernelStart)
</UL>
<P><STRONG><a name="[277]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_vprintf
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[447]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>__2snprintf</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, noretval__2snprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_regist
</UL>

<P><STRONG><a name="[11d]"></a>__printf</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[135]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[101]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[120]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_cmd_mem
</UL>

<P><STRONG><a name="[123]"></a>atol</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = atol &rArr; strtol &rArr; _strtoul &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ymodem_on_begin
</UL>

<P><STRONG><a name="[122]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = strtol &rArr; _strtoul &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_cmd_fota
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[126]"></a>srand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[107]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[344]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>

<P><STRONG><a name="[32c]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_thread
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_set_internal
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_call_internal
</UL>

<P><STRONG><a name="[2d4]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_regist
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_device
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_puts
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_process_history
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_end_input
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ymodem_on_begin
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_set_blob
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_set_default
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_kv_cb
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_kv
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_kv
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_kv_blob
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_cmd_fota
</UL>

<P><STRONG><a name="[2ed]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_kv_cb
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_kv
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_device_find
</UL>

<P><STRONG><a name="[12a]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_send_async
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recv_async
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_process_history
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_end_input
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_remove_by_index
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_push
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_realloc_impl
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_upgrade
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_info
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_init
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_expand
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_set_internal
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_get_helper
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fastlz2_decompress
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fastlz1_decompress
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_aes_crypt_cbc
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_cmd_fota
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_79
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_63
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[127]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[448]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[2eb]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_end_input
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_dispatch
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_delete
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_remove_by_index
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fastlz_memmove
</UL>

<P><STRONG><a name="[129]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
</UL>

<P><STRONG><a name="[449]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_part_fw_verify
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_expand
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
</UL>

<P><STRONG><a name="[44a]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[44b]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[44c]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2ea]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_remove_by_index
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_control
</UL>

<P><STRONG><a name="[44d]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[12c]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[12b]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[44e]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_set_status
</UL>

<P><STRONG><a name="[12f]"></a>__aeabi_memset4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memset4 &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_kv_blob
</UL>

<P><STRONG><a name="[44f]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_memset4.o(.text), UNUSED)

<P><STRONG><a name="[132]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_calloc_impl
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_upgrade
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_read_part
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[450]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[12e]"></a>_memset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[179]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_regist
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_part_fw_verify
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_task
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_w25qxx_init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_thread
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_kv
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_cmd_fota
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
</UL>

<P><STRONG><a name="[451]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[452]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>

<P><STRONG><a name="[131]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_vsnprintf
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_kv
</UL>

<P><STRONG><a name="[2f4]"></a>strcmp</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, strcmpv7m_pel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_find_cmd
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_upgrade_cmd
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_check_upgrade
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_find
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_control
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_cmd_fota
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[453]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[454]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[455]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[121]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[456]"></a>__errno$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text), UNUSED)

<P><STRONG><a name="[457]"></a>__rt_errno_addr$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[11b]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>

<P><STRONG><a name="[11c]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>

<P><STRONG><a name="[9b]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> noretval__2snprintf.o(.text)
</UL>
<P><STRONG><a name="[134]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[136]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[103]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[125]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _strtoul &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[458]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[109]"></a>__rt_locale</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_locale_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[137]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[10c]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[113]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[117]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[459]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[45a]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[45b]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[3a8]"></a>CRC16</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ymodem.o(.text.CRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rym_recv_on_device
</UL>

<P><STRONG><a name="[19]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.DMA1_Stream0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DMA1_Stream0_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.DMA1_Stream2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DMA1_Stream2_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[17b]"></a>Error_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_QUADSPI_Init
</UL>

<P><STRONG><a name="[353]"></a>EvrRtxDelay</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxDelay))
<BR><BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[378]"></a>EvrRtxDelayCompleted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxDelayCompleted))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[354]"></a>EvrRtxDelayError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxDelayError))
<BR><BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
</UL>

<P><STRONG><a name="[3b7]"></a>EvrRtxDelayStarted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxDelayStarted))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
</UL>

<P><STRONG><a name="[37a]"></a>EvrRtxEventFlagsWaitTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxEventFlagsWaitTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[200]"></a>EvrRtxKernelError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxKernelError))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>

<P><STRONG><a name="[360]"></a>EvrRtxKernelErrorNotify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxKernelErrorNotify))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>

<P><STRONG><a name="[3b8]"></a>EvrRtxKernelGetState</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxKernelGetState))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetState
</UL>

<P><STRONG><a name="[3b9]"></a>EvrRtxKernelGetTickCount</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxKernelGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetTickCount
</UL>

<P><STRONG><a name="[358]"></a>EvrRtxKernelInitialize</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxKernelInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[3ba]"></a>EvrRtxKernelInitialized</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxKernelInitialized))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[35a]"></a>EvrRtxKernelStart</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxKernelStart))
<BR><BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[3be]"></a>EvrRtxKernelStarted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxKernelStarted))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[362]"></a>EvrRtxMemoryAlloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMemoryAlloc))
<BR><BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>

<P><STRONG><a name="[367]"></a>EvrRtxMemoryBlockAlloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMemoryBlockAlloc))
<BR><BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
</UL>

<P><STRONG><a name="[369]"></a>EvrRtxMemoryBlockFree</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMemoryBlockFree))
<BR><BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
</UL>

<P><STRONG><a name="[36a]"></a>EvrRtxMemoryBlockInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMemoryBlockInit))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
</UL>

<P><STRONG><a name="[364]"></a>EvrRtxMemoryFree</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMemoryFree))
<BR><BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>

<P><STRONG><a name="[365]"></a>EvrRtxMemoryInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMemoryInit))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
</UL>

<P><STRONG><a name="[37d]"></a>EvrRtxMemoryPoolAllocTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMemoryPoolAllocTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[37e]"></a>EvrRtxMessageQueueGetTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMessageQueueGetTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[37f]"></a>EvrRtxMessageQueuePutTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMessageQueuePutTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[35b]"></a>EvrRtxMutexAcquire</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMutexAcquire))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>

<P><STRONG><a name="[3c0]"></a>EvrRtxMutexAcquirePending</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMutexAcquirePending))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[37b]"></a>EvrRtxMutexAcquireTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMutexAcquireTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[36f]"></a>EvrRtxMutexAcquired</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMutexAcquired))
<BR><BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[3c4]"></a>EvrRtxMutexCreated</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMutexCreated))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
</UL>

<P><STRONG><a name="[35c]"></a>EvrRtxMutexDelete</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMutexDelete), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[3c3]"></a>EvrRtxMutexDestroyed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMutexDestroyed))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
</UL>

<P><STRONG><a name="[1ed]"></a>EvrRtxMutexError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMutexError))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[35d]"></a>EvrRtxMutexNew</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMutexNew))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>

<P><STRONG><a name="[3c1]"></a>EvrRtxMutexNotAcquired</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMutexNotAcquired))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[35e]"></a>EvrRtxMutexRelease</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMutexRelease))
<BR><BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>

<P><STRONG><a name="[36c]"></a>EvrRtxMutexReleased</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMutexReleased))
<BR><BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
</UL>

<P><STRONG><a name="[392]"></a>EvrRtxSemaphoreAcquire</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxSemaphoreAcquire))
<BR><BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>

<P><STRONG><a name="[3c5]"></a>EvrRtxSemaphoreAcquirePending</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxSemaphoreAcquirePending))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
</UL>

<P><STRONG><a name="[37c]"></a>EvrRtxSemaphoreAcquireTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxSemaphoreAcquireTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[203]"></a>EvrRtxSemaphoreAcquired</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxSemaphoreAcquired))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>

<P><STRONG><a name="[3c6]"></a>EvrRtxSemaphoreCreated</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxSemaphoreCreated))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
</UL>

<P><STRONG><a name="[1ef]"></a>EvrRtxSemaphoreError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxSemaphoreError))
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[394]"></a>EvrRtxSemaphoreNew</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxSemaphoreNew))
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>

<P><STRONG><a name="[393]"></a>EvrRtxSemaphoreNotAcquired</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxSemaphoreNotAcquired))
<BR><BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
</UL>

<P><STRONG><a name="[395]"></a>EvrRtxSemaphoreRelease</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxSemaphoreRelease))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[224]"></a>EvrRtxSemaphoreReleased</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxSemaphoreReleased))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>

<P><STRONG><a name="[38e]"></a>EvrRtxThreadBlocked</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadBlocked))
<BR><BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[3ca]"></a>EvrRtxThreadCreated</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadCreated))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[386]"></a>EvrRtxThreadDestroyed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadDestroyed))
<BR><BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDestroy
</UL>

<P><STRONG><a name="[1f1]"></a>EvrRtxThreadError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadError))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadSetPriority
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[397]"></a>EvrRtxThreadExit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadExit))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
</UL>

<P><STRONG><a name="[38a]"></a>EvrRtxThreadFlagsWaitCompleted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadFlagsWaitCompleted))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[379]"></a>EvrRtxThreadFlagsWaitTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadFlagsWaitTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[3c9]"></a>EvrRtxThreadGetId</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadGetId))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadGetId
</UL>

<P><STRONG><a name="[388]"></a>EvrRtxThreadJoined</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadJoined))
<BR><BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadJoinWakeup
</UL>

<P><STRONG><a name="[398]"></a>EvrRtxThreadNew</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadNew))
<BR><BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>

<P><STRONG><a name="[376]"></a>EvrRtxThreadPreempted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadPreempted))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadYield
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadBlock
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[3cd]"></a>EvrRtxThreadPriorityUpdated</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadPriorityUpdated))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadSetPriority
</UL>

<P><STRONG><a name="[399]"></a>EvrRtxThreadSetPriority</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadSetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSetPriority
</UL>

<P><STRONG><a name="[38c]"></a>EvrRtxThreadSwitched</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadSwitched))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>

<P><STRONG><a name="[380]"></a>EvrRtxThreadUnblocked</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadUnblocked))
<BR><BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[39b]"></a>EvrRtxThreadYield</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadYield))
<BR><BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
</UL>

<P><STRONG><a name="[144]"></a>HAL_DMA_Abort</STRONG> (Thumb, 982 bytes, Stack size 40 bytes, stm32h7xx_hal_dma.o(.text.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_DMA_Abort &rArr; HAL_GetTick &rArr; rte_get_tick_ms &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[14b]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 518 bytes, Stack size 40 bytes, stm32h7xx_hal_dma.o(.text.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortTransmit_IT
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceive_IT
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[13b]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 1614 bytes, Stack size 48 bytes, stm32h7xx_hal_dma.o(.text.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream2_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream0_IRQHandler
</UL>

<P><STRONG><a name="[14e]"></a>HAL_DMA_Init</STRONG> (Thumb, 1046 bytes, Stack size 40 bytes, stm32h7xx_hal_dma.o(.text.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_DMA_Init &rArr; HAL_GetTick &rArr; rte_get_tick_ms &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXRequestGenBaseAndMask
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXChannelBaseAndMask
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[152]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 676 bytes, Stack size 40 bytes, stm32h7xx_hal_dma.o(.text.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HAL_DMA_Start_IT &rArr; OUTLINED_FUNCTION_4 &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_18
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_DMA
</UL>

<P><STRONG><a name="[9e]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, stm32h7xx_hal_gpio.o(.text.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> quadspi.o(.text.HAL_QSPI_MspDeInit)
</UL>
<P><STRONG><a name="[9f]"></a>HAL_GPIO_Init</STRONG> (Thumb, 410 bytes, Stack size 44 bytes, stm32h7xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> quadspi.o(.text.HAL_QSPI_MspInit)
</UL>
<P><STRONG><a name="[323]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal_gpio.o(.text.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_toggle
</UL>

<P><STRONG><a name="[1db]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[1aa]"></a>HAL_GetREVID</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.HAL_GetREVID))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[145]"></a>HAL_GetTick</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rte_adapter_cmsis_rtos2.o(.text.HAL_GetTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GetTick &rArr; rte_get_tick_ms &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_get_tick_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_22
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>

<P><STRONG><a name="[156]"></a>HAL_Init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32h7xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[159]"></a>HAL_InitTick</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32h7xx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1f7]"></a>HAL_MDMA_Abort_IT</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32h7xx_hal_mdma.o(.text.HAL_MDMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>

<P><STRONG><a name="[c9]"></a>HAL_MPU_ConfigRegion</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_MPU_ConfigRegion))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[34a]"></a>HAL_MPU_Disable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_MPU_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[34b]"></a>HAL_MPU_Enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_MPU_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15a]"></a>HAL_MspInit</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, stm32h7xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[178]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspDeInit
</UL>

<P><STRONG><a name="[17c]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[15c]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[157]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[15e]"></a>HAL_PWREx_ConfigSupply</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32h7xx_hal_pwr_ex.o(.text.HAL_PWREx_ConfigSupply))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_PWREx_ConfigSupply &rArr; HAL_GetTick &rArr; rte_get_tick_ms &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[174]"></a>HAL_QSPI_AbortCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_qspi.o(.text.HAL_QSPI_AbortCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
</UL>

<P><STRONG><a name="[173]"></a>HAL_QSPI_CmdCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_qspi.o(.text.HAL_QSPI_CmdCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
</UL>

<P><STRONG><a name="[161]"></a>HAL_QSPI_Command</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, stm32h7xx_hal_qspi.o(.text.HAL_QSPI_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; rte_get_tick_ms &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Config
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_16
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_interface_spi_qspi_write_read
</UL>

<P><STRONG><a name="[167]"></a>HAL_QSPI_DeInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32h7xx_hal_qspi.o(.text.HAL_QSPI_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_QSPI_DeInit &rArr; HAL_QSPI_MspDeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_interface_spi_qspi_deinit
</UL>

<P><STRONG><a name="[170]"></a>HAL_QSPI_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_qspi.o(.text.HAL_QSPI_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_DMAAbortCplt
</UL>

<P><STRONG><a name="[171]"></a>HAL_QSPI_FifoThresholdCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_qspi.o(.text.HAL_QSPI_FifoThresholdCallback))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
</UL>

<P><STRONG><a name="[169]"></a>HAL_QSPI_IRQHandler</STRONG> (Thumb, 400 bytes, Stack size 8 bytes, stm32h7xx_hal_qspi.o(.text.HAL_QSPI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_QSPI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_TxCpltCallback
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_TimeOutCallback
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_StatusMatchCallback
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_RxCpltCallback
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_FifoThresholdCallback
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_ErrorCallback
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_CmdCpltCallback
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AbortCpltCallback
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_16
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUADSPI_IRQHandler
</UL>

<P><STRONG><a name="[176]"></a>HAL_QSPI_Init</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, stm32h7xx_hal_qspi.o(.text.HAL_QSPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = HAL_QSPI_Init &rArr; HAL_QSPI_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; OUTLINED_FUNCTION_8 &rArr; RCCEx_PLL2_Config &rArr; HAL_GetTick &rArr; rte_get_tick_ms &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_QUADSPI_Init
</UL>

<P><STRONG><a name="[168]"></a>HAL_QSPI_MspDeInit</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, quadspi.o(.text.HAL_QSPI_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_QSPI_MspDeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_DeInit
</UL>

<P><STRONG><a name="[177]"></a>HAL_QSPI_MspInit</STRONG> (Thumb, 292 bytes, Stack size 248 bytes, quadspi.o(.text.HAL_QSPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = HAL_QSPI_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; OUTLINED_FUNCTION_8 &rArr; RCCEx_PLL2_Config &rArr; HAL_GetTick &rArr; rte_get_tick_ms &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
</UL>

<P><STRONG><a name="[17d]"></a>HAL_QSPI_Receive</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, stm32h7xx_hal_qspi.o(.text.HAL_QSPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_QSPI_Receive &rArr; OUTLINED_FUNCTION_9 &rArr; QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; rte_get_tick_ms &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_interface_spi_qspi_write_read
</UL>

<P><STRONG><a name="[175]"></a>HAL_QSPI_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_qspi.o(.text.HAL_QSPI_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
</UL>

<P><STRONG><a name="[16d]"></a>HAL_QSPI_StatusMatchCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_qspi.o(.text.HAL_QSPI_StatusMatchCallback))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
</UL>

<P><STRONG><a name="[172]"></a>HAL_QSPI_TimeOutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_qspi.o(.text.HAL_QSPI_TimeOutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
</UL>

<P><STRONG><a name="[181]"></a>HAL_QSPI_Transmit</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, stm32h7xx_hal_qspi.o(.text.HAL_QSPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_QSPI_Transmit &rArr; OUTLINED_FUNCTION_9 &rArr; QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; rte_get_tick_ms &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_interface_spi_qspi_write_read
</UL>

<P><STRONG><a name="[16c]"></a>HAL_QSPI_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_qspi.o(.text.HAL_QSPI_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
</UL>

<P><STRONG><a name="[183]"></a>HAL_RCCEx_GetD3PCLK1Freq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetD3PCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCCEx_GetD3PCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[186]"></a>HAL_RCCEx_GetPLL2ClockFreq</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPLL2ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCCEx_GetPLL2ClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_28
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_27
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_26
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_25
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[192]"></a>HAL_RCCEx_GetPLL3ClockFreq</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPLL3ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCCEx_GetPLL3ClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_28
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_27
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_26
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_25
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[17a]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 2250 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; OUTLINED_FUNCTION_8 &rArr; RCCEx_PLL2_Config &rArr; HAL_GetTick &rArr; rte_get_tick_ms &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_24
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_23
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_21
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_20
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_18
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_17
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
</UL>

<P><STRONG><a name="[19f]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 550 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[184]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[1a3]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1a6]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[158]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 262 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>

<P><STRONG><a name="[1a7]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1122 bytes, Stack size 24 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_GetTick &rArr; rte_get_tick_ms &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetREVID
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[15b]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[1de]"></a>HAL_UARTEx_DisableFifoMode</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_UARTEx_DisableFifoMode))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[1ad]"></a>HAL_UARTEx_ReceiveToIdle_DMA</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_UARTEx_ReceiveToIdle_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; OUTLINED_FUNCTION_4 &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recv_async
</UL>

<P><STRONG><a name="[1b0]"></a>HAL_UARTEx_ReceiveToIdle_IT</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_UARTEx_ReceiveToIdle_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UARTEx_ReceiveToIdle_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recv_async
</UL>

<P><STRONG><a name="[1b2]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, hal_com_stm32h7.o(.text.HAL_UARTEx_RxEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UARTEx_RxEventCallback &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>

<P><STRONG><a name="[1c5]"></a>HAL_UARTEx_RxFifoFullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_UARTEx_RxFifoFullCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1b4]"></a>HAL_UARTEx_SetRxFifoThreshold</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_UARTEx_SetRxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UARTEx_SetRxFifoThreshold &rArr; OUTLINED_FUNCTION_4 &rArr; UARTEx_SetNbDataToProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[1b9]"></a>HAL_UARTEx_SetTxFifoThreshold</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_UARTEx_SetTxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UARTEx_SetTxFifoThreshold &rArr; OUTLINED_FUNCTION_4 &rArr; UARTEx_SetNbDataToProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[1c9]"></a>HAL_UARTEx_TxFifoEmptyCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_UARTEx_TxFifoEmptyCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1c6]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_UARTEx_WakeupCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1bd]"></a>HAL_UART_AbortReceiveCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_AbortReceiveCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceive_IT
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxOnlyAbortCallback
</UL>

<P><STRONG><a name="[1ba]"></a>HAL_UART_AbortReceive_IT</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_AbortReceive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_UART_AbortReceive_IT &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceiveCpltCallback
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_28
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recv_async
</UL>

<P><STRONG><a name="[1c1]"></a>HAL_UART_AbortTransmitCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_AbortTransmitCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortTransmit_IT
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxOnlyAbortCallback
</UL>

<P><STRONG><a name="[1be]"></a>HAL_UART_AbortTransmit_IT</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_AbortTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_UART_AbortTransmit_IT &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortTransmitCpltCallback
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_send_async
</UL>

<P><STRONG><a name="[1c7]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[1c2]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 604 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_UART_TxCpltCallback &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_TxFifoEmptyCallback
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxFifoFullCallback
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_16
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1cb]"></a>HAL_UART_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = HAL_UART_Init &rArr; OUTLINED_FUNCTION_4 &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; OUTLINED_FUNCTION_8 &rArr; RCCEx_PLL2_Config &rArr; HAL_GetTick &rArr; rte_get_tick_ms &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_35
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_33
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[1d2]"></a>HAL_UART_MspInit</STRONG> (Thumb, 272 bytes, Stack size 240 bytes, usart.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; OUTLINED_FUNCTION_8 &rArr; RCCEx_PLL2_Config &rArr; HAL_GetTick &rArr; rte_get_tick_ms &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>

<P><STRONG><a name="[1d3]"></a>HAL_UART_Receive</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick &rArr; rte_get_tick_ms &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recv
</UL>

<P><STRONG><a name="[237]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_34
</UL>

<P><STRONG><a name="[26a]"></a>HAL_UART_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_RxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
</UL>

<P><STRONG><a name="[1d5]"></a>HAL_UART_Transmit</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_Transmit &rArr; OUTLINED_FUNCTION_27 &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick &rArr; rte_get_tick_ms &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_27
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_send
</UL>

<P><STRONG><a name="[1d7]"></a>HAL_UART_Transmit_DMA</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; OUTLINED_FUNCTION_4 &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_36
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_send_async
</UL>

<P><STRONG><a name="[2d6]"></a>HAL_UART_Transmit_IT</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_send_async
</UL>

<P><STRONG><a name="[1c8]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, hal_com_stm32h7.o(.text.HAL_UART_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_TxCpltCallback &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATransmitCplt
</UL>

<P><STRONG><a name="[26b]"></a>HAL_UART_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_TxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxHalfCplt
</UL>

<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1d9]"></a>MX_DMA_Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, dma.o(.text.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1da]"></a>MX_GPIO_Init</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, gpio.o(.text.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1dc]"></a>MX_QUADSPI_Init</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, quadspi.o(.text.MX_QUADSPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = MX_QUADSPI_Init &rArr; HAL_QSPI_Init &rArr; HAL_QSPI_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; OUTLINED_FUNCTION_8 &rArr; RCCEx_PLL2_Config &rArr; HAL_GetTick &rArr; rte_get_tick_ms &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1dd]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, usart.o(.text.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; OUTLINED_FUNCTION_4 &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; OUTLINED_FUNCTION_8 &rArr; RCCEx_PLL2_Config &rArr; HAL_GetTick &rArr; rte_get_tick_ms &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[391]"></a>OS_Tick_AcknowledgeIRQ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_tick.o(.text.OS_Tick_AcknowledgeIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[3bd]"></a>OS_Tick_Enable</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, os_tick.o(.text.OS_Tick_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[3bc]"></a>OS_Tick_GetIRQn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_tick.o(.text.OS_Tick_GetIRQn))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[3bb]"></a>OS_Tick_Setup</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, os_tick.o(.text.OS_Tick_Setup))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[64]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.QUADSPI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QUADSPI_IRQHandler &rArr; HAL_QSPI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[268]"></a>SystemClock_Config</STRONG> (Thumb, 190 bytes, Stack size 128 bytes, main.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[99]"></a>SystemInit</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, system_stm32h7xx.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(.text)
</UL>
<P><STRONG><a name="[238]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(.text.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_35
</UL>

<P><STRONG><a name="[1d1]"></a>UART_CheckIdleState</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, stm32h7xx_hal_uart.o(.text.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART_CheckIdleState &rArr; OUTLINED_FUNCTION_26 &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick &rArr; rte_get_tick_ms &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_26
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1e3]"></a>UART_SetConfig</STRONG> (Thumb, 1194 bytes, Stack size 32 bytes, stm32h7xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_17
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[1ae]"></a>UART_Start_Receive_DMA</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(.text.UART_Start_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; OUTLINED_FUNCTION_4 &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_36
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle_DMA
</UL>

<P><STRONG><a name="[1b1]"></a>UART_Start_Receive_IT</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(.text.UART_Start_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle_IT
</UL>

<P><STRONG><a name="[1d4]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, stm32h7xx_hal_uart.o(.text.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick &rArr; rte_get_tick_ms &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_27
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_26
</UL>

<P><STRONG><a name="[33]"></a>USART1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_UART_TxCpltCallback &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[133]"></a>__user_perthread_libspace</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, rtx_lib.o(.text.__user_perthread_libspace))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[27f]"></a>_fdb_continue_ff_addr</STRONG> (Thumb, 120 bytes, Stack size 80 bytes, fdb_utils.o(.text._fdb_continue_ff_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = _fdb_continue_ff_addr &rArr; _fdb_flash_read &rArr; fal_partition_read &rArr; OUTLINED_FUNCTION_10 &rArr; fal_flash_device_find &rArr; OUTLINED_FUNCTION_1 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_info
</UL>

<P><STRONG><a name="[281]"></a>_fdb_flash_erase</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fdb_utils.o(.text._fdb_flash_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = _fdb_flash_erase &rArr; fal_partition_erase &rArr; fal_flash_device_find &rArr; OUTLINED_FUNCTION_1 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
</UL>

<P><STRONG><a name="[280]"></a>_fdb_flash_read</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, fdb_utils.o(.text._fdb_flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = _fdb_flash_read &rArr; fal_partition_read &rArr; OUTLINED_FUNCTION_10 &rArr; fal_flash_device_find &rArr; OUTLINED_FUNCTION_1 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_get_blob
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_read_status
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_continue_ff_addr
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_info
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_kv
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_kv
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_kv_addr
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_kv
</UL>

<P><STRONG><a name="[283]"></a>_fdb_flash_write</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fdb_utils.o(.text._fdb_flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = _fdb_flash_write &rArr; fal_partition_write &rArr; OUTLINED_FUNCTION_10 &rArr; fal_flash_device_find &rArr; OUTLINED_FUNCTION_1 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_write_status
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_kv
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_kv_blob
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_write
</UL>

<P><STRONG><a name="[28f]"></a>_fdb_get_status</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, fdb_utils.o(.text._fdb_get_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _fdb_get_status
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_read_status
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_info
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_kv
</UL>

<P><STRONG><a name="[285]"></a>_fdb_init_ex</STRONG> (Thumb, 388 bytes, Stack size 56 bytes, fdb.o(.text._fdb_init_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = _fdb_init_ex &rArr; fal_init &rArr; fal_partition_init &rArr; fal_show_part_table &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_find
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_init
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_device_find
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kvdb_init
</UL>

<P><STRONG><a name="[289]"></a>_fdb_init_finish</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, fdb.o(.text._fdb_init_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = _fdb_init_finish &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kvdb_init
</UL>

<P><STRONG><a name="[28a]"></a>_fdb_kv_load</STRONG> (Thumb, 206 bytes, Stack size 144 bytes, fdb_kvdb.o(.text._fdb_kv_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248 + Unknown Stack Size
<LI>Call Chain = _fdb_kv_load &rArr; fdb_kv_set_default &rArr; create_kv_blob &rArr; new_kv &rArr; gc_collect &rArr; OUTLINED_FUNCTION_8 &rArr; sector_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; OUTLINED_FUNCTION_10 &rArr; fal_flash_device_find &rArr; OUTLINED_FUNCTION_1 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_set_default
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_iterator
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_iterator
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kvdb_init
</UL>

<P><STRONG><a name="[28e]"></a>_fdb_read_status</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, fdb_utils.o(.text._fdb_read_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = _fdb_read_status &rArr; _fdb_flash_read &rArr; fal_partition_read &rArr; OUTLINED_FUNCTION_10 &rArr; fal_flash_device_find &rArr; OUTLINED_FUNCTION_1 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_get_status
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_kv
</UL>

<P><STRONG><a name="[290]"></a>_fdb_set_status</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fdb_utils.o(.text._fdb_set_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _fdb_set_status &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_write_status
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
</UL>

<P><STRONG><a name="[291]"></a>_fdb_write_status</STRONG> (Thumb, 190 bytes, Stack size 56 bytes, fdb_utils.o(.text._fdb_write_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; OUTLINED_FUNCTION_10 &rArr; fal_flash_device_find &rArr; OUTLINED_FUNCTION_1 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_set_status
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sec_status
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_kv
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_kv
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gc
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_kv
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_kv_blob
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_recovery_kv_cb
</UL>

<P><STRONG><a name="[fa]"></a>_mutex_acquire</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rtx_lib.o(.text._mutex_acquire), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _mutex_acquire &rArr; osMutexAcquire
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>

<P><STRONG><a name="[fc]"></a>_mutex_free</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_lib.o(.text._mutex_free), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _mutex_free &rArr; osMutexDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[f9]"></a>_mutex_initialize</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rtx_lib.o(.text._mutex_initialize), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _mutex_initialize &rArr; osRtxKernelErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>

<P><STRONG><a name="[fb]"></a>_mutex_release</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtx_lib.o(.text._mutex_release), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>

<P><STRONG><a name="[10e]"></a>_platform_post_stackheap_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtx_lib.o(.text._platform_post_stackheap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _platform_post_stackheap_init &rArr; osKernelInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_postsh_1
</UL>

<P><STRONG><a name="[29a]"></a>_w25qxx_page_program</STRONG> (Thumb, 614 bytes, Stack size 80 bytes, driver_w25qxx.o(.text._w25qxx_page_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _w25qxx_page_program &rArr; _w25qxx_qspi_write_read
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_qspi_write_read
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_99
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_94
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_87
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_86
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_83
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_81
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_79
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_67
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_63
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_39
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_30
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_25
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_24
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_23
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_19
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_18
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_153
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_147
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_143
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_142
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_140
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_130
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_125
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_122
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_111
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_109
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_101
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_write_no_check
</UL>

<P><STRONG><a name="[2b2]"></a>adjust_request_size</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, rte_memory.o(.text.adjust_request_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = adjust_request_size &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_realloc_impl
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc_impl
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc_align_impl
</UL>

<P><STRONG><a name="[f2]"></a>com_regist</STRONG> (Thumb, 362 bytes, Stack size 136 bytes, hal_com_stm32h7.o(.text.com_regist))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = com_regist &rArr; ht_set_if_not_exists &rArr; ht_set_internal &rArr; ds_vector_push &rArr; ds_vector_expand &rArr; memory_realloc_impl &rArr; memory_free &rArr; block_merge_next &rArr; block_absorb &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_set_if_not_exists
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_device_table
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc_align_impl
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_com_stm32h7.o(hal_constructors)
</UL>
<P><STRONG><a name="[f3]"></a>com_unregist</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal_com_stm32h7.o(.text.com_unregist))
<BR>[Address Reference Count : 1]<UL><LI> hal_com_stm32h7.o(hal_destructors)
</UL>
<P><STRONG><a name="[2e1]"></a>driver_w25qxx_init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, driver_w25qxx_atapter.o(.text.driver_w25qxx_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = driver_w25qxx_init
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[337]"></a>ds_vector_at</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ds_vector.o(.text.ds_vector_at))
<BR><BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_group_poll
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_timer_free_cb
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_tick_handle
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_set_internal
</UL>

<P><STRONG><a name="[2e2]"></a>ds_vector_create</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, ds_vector.o(.text.ds_vector_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = ds_vector_create &rArr; memory_calloc_impl &rArr; memory_alloc_impl &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_free
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_calloc_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_create
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_create_group
</UL>

<P><STRONG><a name="[2e4]"></a>ds_vector_destroy</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, ds_vector.o(.text.ds_vector_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = ds_vector_destroy &rArr; memory_free &rArr; block_merge_next &rArr; block_absorb &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_free
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_create
</UL>

<P><STRONG><a name="[2e5]"></a>ds_vector_expand</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, ds_vector.o(.text.ds_vector_expand))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = ds_vector_expand &rArr; memory_realloc_impl &rArr; memory_free &rArr; block_merge_next &rArr; block_absorb &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_realloc_impl
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_push
</UL>

<P><STRONG><a name="[336]"></a>ds_vector_length</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ds_vector.o(.text.ds_vector_length))
<BR><BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_group_poll
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_tick_handle
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_create_new
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_set_internal
</UL>

<P><STRONG><a name="[335]"></a>ds_vector_lock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ds_vector.o(.text.ds_vector_lock))
<BR><BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_group_poll
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_tick_handle
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_create_new
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_set_internal
</UL>

<P><STRONG><a name="[2e8]"></a>ds_vector_push</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, ds_vector.o(.text.ds_vector_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = ds_vector_push &rArr; ds_vector_expand &rArr; memory_realloc_impl &rArr; memory_free &rArr; block_merge_next &rArr; block_absorb &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_expand
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_create_new
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_set_internal
</UL>

<P><STRONG><a name="[2e9]"></a>ds_vector_remove_by_index</STRONG> (Thumb, 338 bytes, Stack size 24 bytes, ds_vector.o(.text.ds_vector_remove_by_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ds_vector_remove_by_index &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_delete
</UL>

<P><STRONG><a name="[338]"></a>ds_vector_unlock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ds_vector.o(.text.ds_vector_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_group_poll
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_tick_handle
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_create_new
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_set_internal
</UL>

<P><STRONG><a name="[205]"></a>fal_flash_device_find</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, fal_flash.o(.text.fal_flash_device_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = fal_flash_device_find &rArr; OUTLINED_FUNCTION_1 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_init
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_init_ex
</UL>

<P><STRONG><a name="[2ee]"></a>fal_flash_init</STRONG> (Thumb, 252 bytes, Stack size 64 bytes, fal_flash.o(.text.fal_flash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = fal_flash_init &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_init
</UL>

<P><STRONG><a name="[287]"></a>fal_init</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, fal.o(.text.fal_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = fal_init &rArr; fal_partition_init &rArr; fal_show_part_table &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_init
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_init
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_init_ex
</UL>

<P><STRONG><a name="[282]"></a>fal_partition_erase</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, fal_partition.o(.text.fal_partition_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = fal_partition_erase &rArr; fal_flash_device_find &rArr; OUTLINED_FUNCTION_1 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_device_find
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_copy_version
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ymodem_on_begin
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_erase
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_cmd_fota
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_erase_app_part
</UL>

<P><STRONG><a name="[288]"></a>fal_partition_find</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, fal_partition.o(.text.fal_partition_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = fal_partition_find &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_upgrade
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_part_fw_verify
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_copy_version
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ymodem_on_begin
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_init_ex
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_cmd_fota
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_write_app_part
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_erase_app_part
</UL>

<P><STRONG><a name="[2ef]"></a>fal_partition_init</STRONG> (Thumb, 200 bytes, Stack size 56 bytes, fal_partition.o(.text.fal_partition_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = fal_partition_init &rArr; fal_show_part_table &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_show_part_table
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_device_find
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_init
</UL>

<P><STRONG><a name="[211]"></a>fal_partition_read</STRONG> (Thumb, 248 bytes, Stack size 56 bytes, fal_partition.o(.text.fal_partition_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = fal_partition_read &rArr; OUTLINED_FUNCTION_10 &rArr; fal_flash_device_find &rArr; OUTLINED_FUNCTION_1 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_part_fw_verify
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_copy_version
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_read
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_cmd_fota
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
</UL>

<P><STRONG><a name="[284]"></a>fal_partition_write</STRONG> (Thumb, 248 bytes, Stack size 56 bytes, fal_partition.o(.text.fal_partition_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = fal_partition_write &rArr; OUTLINED_FUNCTION_10 &rArr; fal_flash_device_find &rArr; OUTLINED_FUNCTION_1 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_copy_version
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ymodem_on_data
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_write
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_cmd_fota
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_write_app_part
</UL>

<P><STRONG><a name="[2f5]"></a>fal_show_part_table</STRONG> (Thumb, 236 bytes, Stack size 56 bytes, fal_partition.o(.text.fal_show_part_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = fal_show_part_table &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_init
</UL>

<P><STRONG><a name="[2fc]"></a>fastlz1_decompress</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, fastlz.o(.text.fastlz1_decompress))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fastlz1_decompress &rArr; fastlz_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fastlz_memmove
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fastlz_decompress
</UL>

<P><STRONG><a name="[2fe]"></a>fastlz2_decompress</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, fastlz.o(.text.fastlz2_decompress))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fastlz2_decompress &rArr; fastlz_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fastlz_memmove
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fastlz_decompress
</UL>

<P><STRONG><a name="[2ff]"></a>fastlz_decompress</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fastlz.o(.text.fastlz_decompress))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fastlz_decompress &rArr; fastlz2_decompress &rArr; fastlz_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fastlz2_decompress
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fastlz1_decompress
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_upgrade
</UL>

<P><STRONG><a name="[3cf]"></a>fdb_blob_make</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fdb_utils.o(.text.fdb_blob_make))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_thread
</UL>

<P><STRONG><a name="[be]"></a>fdb_calc_crc32</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fdb_utils.o(.text.fdb_calc_crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fdb_calc_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_kv_cache
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_kv
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_kv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fdb_kvdb.o(.text.create_kv_blob)
</UL>
<P><STRONG><a name="[300]"></a>fdb_kv_get_blob</STRONG> (Thumb, 126 bytes, Stack size 128 bytes, fdb_kvdb.o(.text.fdb_kv_get_blob))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112 + Unknown Stack Size
<LI>Call Chain = fdb_kv_get_blob &rArr; find_kv &rArr; find_kv_no_cache &rArr; kv_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; OUTLINED_FUNCTION_10 &rArr; fal_flash_device_find &rArr; OUTLINED_FUNCTION_1 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_kv
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_thread
</UL>

<P><STRONG><a name="[302]"></a>fdb_kv_set_blob</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, fdb_kvdb.o(.text.fdb_kv_set_blob))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152 + Unknown Stack Size
<LI>Call Chain = fdb_kv_set_blob &rArr; del_kv &rArr; find_kv &rArr; find_kv_no_cache &rArr; kv_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; OUTLINED_FUNCTION_10 &rArr; fal_flash_device_find &rArr; OUTLINED_FUNCTION_1 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_kv
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_kv
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_kv
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_kv_blob
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_thread
</UL>

<P><STRONG><a name="[28b]"></a>fdb_kv_set_default</STRONG> (Thumb, 124 bytes, Stack size 64 bytes, fdb_kvdb.o(.text.fdb_kv_set_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104 + Unknown Stack Size
<LI>Call Chain = fdb_kv_set_default &rArr; create_kv_blob &rArr; new_kv &rArr; gc_collect &rArr; OUTLINED_FUNCTION_8 &rArr; sector_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; OUTLINED_FUNCTION_10 &rArr; fal_flash_device_find &rArr; OUTLINED_FUNCTION_1 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_kv_blob
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_kv_load
</UL>

<P><STRONG><a name="[303]"></a>fdb_kvdb_init</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, fdb_kvdb.o(.text.fdb_kvdb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288 + Unknown Stack Size
<LI>Call Chain = fdb_kvdb_init &rArr; _fdb_kv_load &rArr; fdb_kv_set_default &rArr; create_kv_blob &rArr; new_kv &rArr; gc_collect &rArr; OUTLINED_FUNCTION_8 &rArr; sector_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; OUTLINED_FUNCTION_10 &rArr; fal_flash_device_find &rArr; OUTLINED_FUNCTION_1 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_kv_load
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_init_finish
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_init_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_thread
</UL>

<P><STRONG><a name="[308]"></a>fota_check_upgrade</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fota.o(.text.fota_check_upgrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fota_check_upgrade &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_25
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_thread
</UL>

<P><STRONG><a name="[30a]"></a>fota_copy_version</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, fota.o(.text.fota_copy_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = fota_copy_version &rArr; memory_alloc_impl &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc_impl
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_find
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_22
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_21
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_thread
</UL>

<P><STRONG><a name="[30d]"></a>fota_crc</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fota_crc.o(.text.fota_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fota_crc &rArr; crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_part_fw_verify
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_copy_version
</UL>

<P><STRONG><a name="[3ce]"></a>fota_crc_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fota_crc.o(.text.fota_crc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fota_crc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_thread
</UL>

<P><STRONG><a name="[310]"></a>fota_erase_app_part</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, fota.o(.text.fota_erase_app_part))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = fota_erase_app_part &rArr; fal_partition_erase &rArr; fal_flash_device_find &rArr; OUTLINED_FUNCTION_1 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_find
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_26
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_24
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_17
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_16
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_upgrade
</UL>

<P><STRONG><a name="[313]"></a>fota_part_fw_verify</STRONG> (Thumb, 740 bytes, Stack size 152 bytes, fota.o(.text.fota_part_fw_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = fota_part_fw_verify &rArr; memory_free &rArr; block_merge_next &rArr; block_absorb &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_free
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc_impl
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_find
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_21
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_17
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_step_crc
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_crc
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_upgrade_cmd
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_cmd_fota
</UL>

<P><STRONG><a name="[315]"></a>fota_step_crc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fota_crc.o(.text.fota_step_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fota_step_crc &rArr; crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_part_fw_verify
</UL>

<P><STRONG><a name="[318]"></a>fota_upgrade</STRONG> (Thumb, 1614 bytes, Stack size 104 bytes, fota.o(.text.fota_upgrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 2520 + Unknown Stack Size
<LI>Call Chain = fota_upgrade &rArr; tiny_aes_setkey_dec &rArr; tiny_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_free
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc_impl
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_find
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_printf
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_aes_setkey_dec
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_write_app_part
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_erase_app_part
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fastlz_decompress
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_read_part
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_25
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_22
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_21
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_20
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_17
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_thread
</UL>

<P><STRONG><a name="[31b]"></a>fota_write_app_part</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, fota.o(.text.fota_write_app_part))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = fota_write_app_part &rArr; fal_partition_write &rArr; OUTLINED_FUNCTION_10 &rArr; fal_flash_device_find &rArr; OUTLINED_FUNCTION_1 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_find
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_27
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_24
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_16
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_upgrade
</UL>

<P><STRONG><a name="[321]"></a>gpio_toggle</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_gpio_stm32h7.o(.text.gpio_toggle))
<BR><BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;running_timer
</UL>

<P><STRONG><a name="[299]"></a>hal_device_read_async</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, hal.o(.text.hal_device_read_async))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = hal_device_read_async &rArr; OUTLINED_FUNCTION_0 &rArr; hal_get_device &rArr; ht_get &rArr; ht_call_internal &rArr; memory_free &rArr; block_merge_next &rArr; block_absorb &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_get_tick_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_getc
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_read_data
</UL>

<P><STRONG><a name="[297]"></a>hal_device_read_sync</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, hal.o(.text.hal_device_read_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = hal_device_read_sync &rArr; OUTLINED_FUNCTION_0 &rArr; hal_get_device &rArr; ht_get &rArr; ht_call_internal &rArr; memory_free &rArr; block_merge_next &rArr; block_absorb &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_get_tick_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_thread
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_read_code
</UL>

<P><STRONG><a name="[326]"></a>hal_device_write_async</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, hal.o(.text.hal_device_write_async))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = hal_device_write_async &rArr; OUTLINED_FUNCTION_0 &rArr; hal_get_device &rArr; ht_get &rArr; ht_call_internal &rArr; memory_free &rArr; block_merge_next &rArr; block_absorb &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_get_tick_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_data_out
</UL>

<P><STRONG><a name="[296]"></a>hal_device_write_sync</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, hal.o(.text.hal_device_write_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = hal_device_write_sync &rArr; OUTLINED_FUNCTION_0 &rArr; hal_get_device &rArr; ht_get &rArr; ht_call_internal &rArr; memory_free &rArr; block_merge_next &rArr; block_absorb &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_get_tick_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_putchar
</UL>

<P><STRONG><a name="[1e2]"></a>hal_get_device</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hal.o(.text.hal_get_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = hal_get_device &rArr; ht_get &rArr; ht_call_internal &rArr; memory_free &rArr; block_merge_next &rArr; block_absorb &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_get
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[2d3]"></a>hal_get_device_table</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal.o(.text.hal_get_device_table))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_regist
</UL>

<P><STRONG><a name="[328]"></a>hal_init</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, hal.o(.text.hal_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = hal_init &rArr; ht_create &rArr; ds_vector_create &rArr; memory_calloc_impl &rArr; memory_alloc_impl &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_create
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_thread
</UL>

<P><STRONG><a name="[329]"></a>ht_create</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, ds_hashmap.o(.text.ht_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = ht_create &rArr; ds_vector_create &rArr; memory_calloc_impl &rArr; memory_alloc_impl &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_destroy
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_create
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_free
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_calloc_impl
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
</UL>

<P><STRONG><a name="[327]"></a>ht_get</STRONG> (Thumb, 42 bytes, Stack size 48 bytes, ds_hashmap.o(.text.ht_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = ht_get &rArr; ht_call_internal &rArr; memory_free &rArr; block_merge_next &rArr; block_absorb &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_call_internal
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_device
</UL>

<P><STRONG><a name="[2d5]"></a>ht_set_if_not_exists</STRONG> (Thumb, 34 bytes, Stack size 40 bytes, ds_hashmap.o(.text.ht_set_if_not_exists))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = ht_set_if_not_exists &rArr; ht_set_internal &rArr; ds_vector_push &rArr; ds_vector_expand &rArr; memory_realloc_impl &rArr; memory_free &rArr; block_merge_next &rArr; block_absorb &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_set_internal
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_regist
</UL>

<P><STRONG><a name="[343]"></a>log_control</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, rte_log.o(.text.log_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = log_control &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_thread
</UL>

<P><STRONG><a name="[3a3]"></a>log_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rte_log.o(.text.log_init))
<BR><BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_init
</UL>

<P><STRONG><a name="[c5]"></a>log_out</STRONG> (Thumb, 468 bytes, Stack size 232 bytes, rte_log.o(.text.log_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_snprintf
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_sec2time
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_vprintf
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_send_async
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recv_async
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_delete
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_timer_free_cb
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_realloc_impl
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc_align_impl
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_request_size
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_absorb
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_ptr
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rym_recv_on_device
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_find
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ymodem_on_data
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ymodem_on_begin
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_create_new
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kvdb_init
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_set_blob
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_get_blob
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_interface_spi_qspi_deinit
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_create_group
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_init
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_pool
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_thread
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_set_internal
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_call_internal
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_show_part_table
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_init
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_init
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_read_status
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_info
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_kv
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_kv
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_kv
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gc
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_kv_blob
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sec_hdr_cb
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_recovery_kv_cb
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_init
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_init_finish
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_init_ex
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_write_app_part
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_erase_app_part
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_17
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_16
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 4]<UL><LI> fal_adapter.o(.text.init)
<LI> fota.o(.text.shell_cmd_fota)
<LI> fal_partition.o(.text.fal_show_part_table)
<LI> fota.o(.text.fota_part_fw_verify)
</UL>
<P><STRONG><a name="[3b4]"></a>log_output</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rte_log.o(.text.log_output))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_puts
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_putc
</UL>

<P><STRONG><a name="[345]"></a>log_sec2time</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, rte_log.o(.text.log_sec2time))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = log_sec2time
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>

<P><STRONG><a name="[346]"></a>log_snprintf</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, rte_log.o(.text.log_snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>

<P><STRONG><a name="[347]"></a>log_vprintf</STRONG> (Thumb, 930 bytes, Stack size 80 bytes, rte_log.o(.text.log_vprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_printf
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_interface_debug_print
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>

<P><STRONG><a name="[112]"></a>main</STRONG> (Thumb, 320 bytes, Stack size 16 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = main &rArr; MX_QUADSPI_Init &rArr; HAL_QSPI_Init &rArr; HAL_QSPI_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; OUTLINED_FUNCTION_8 &rArr; RCCEx_PLL2_Config &rArr; HAL_GetTick &rArr; rte_get_tick_ms &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSetPriority
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_QUADSPI_Init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Enable
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Disable
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[2cf]"></a>memory_alloc_align_impl</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, rte_memory.o(.text.memory_alloc_align_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = memory_alloc_align_impl &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_request_size
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_split
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_locate_free
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_link_next
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_ptr
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_regist
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_send_async
</UL>

<P><STRONG><a name="[30c]"></a>memory_alloc_impl</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, rte_memory.o(.text.memory_alloc_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = memory_alloc_impl &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_request_size
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_locate_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_realloc_impl
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_calloc_impl
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_upgrade
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_part_fw_verify
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_copy_version
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_set_internal
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_get_helper
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_cmd_fota
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_read_part
</UL>

<P><STRONG><a name="[2e3]"></a>memory_calloc_impl</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, rte_memory.o(.text.memory_calloc_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = memory_calloc_impl &rArr; memory_alloc_impl &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc_impl
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_create
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_create
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rym_recv_on_device
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_create_new
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_set_internal
</UL>

<P><STRONG><a name="[34f]"></a>memory_demon</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, rte_memory.o(.text.memory_demon))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = memory_demon &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_cmd_mem
</UL>

<P><STRONG><a name="[228]"></a>memory_free</STRONG> (Thumb, 296 bytes, Stack size 56 bytes, rte_memory.o(.text.memory_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = memory_free &rArr; block_merge_next &rArr; block_absorb &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_remove
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_free
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_absorb
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_send_async
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_create
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_destroy
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_create
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_timer_free_cb
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_realloc_impl
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_upgrade
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_part_fw_verify
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_create_new
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_set_internal
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_call_internal
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_read_part
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_22
</UL>

<P><STRONG><a name="[350]"></a>memory_pool</STRONG> (Thumb, 294 bytes, Stack size 56 bytes, rte_memory.o(.text.memory_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = memory_pool &rArr; block_insert &rArr; OUTLINED_FUNCTION_2 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_link_next
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_init
</UL>

<P><STRONG><a name="[2e7]"></a>memory_realloc_impl</STRONG> (Thumb, 498 bytes, Stack size 80 bytes, rte_memory.o(.text.memory_realloc_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = memory_realloc_impl &rArr; memory_free &rArr; block_merge_next &rArr; block_absorb &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_free
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc_impl
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_request_size
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_split
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_used
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_expand
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_set_internal
</UL>

<P><STRONG><a name="[352]"></a>osDelay</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, rtx_delay.o(.text.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayError
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_delay_ms
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_thread
</UL>

<P><STRONG><a name="[355]"></a>osKernelGetState</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osKernelGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_get_tick_ms
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>

<P><STRONG><a name="[356]"></a>osKernelGetTickCount</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osKernelGetTickCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelGetTickCount &rArr; svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_get_tick_ms
</UL>

<P><STRONG><a name="[295]"></a>osKernelInitialize</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rtx_kernel.o(.text.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelPreInit
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[34e]"></a>osKernelStart</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rtx_kernel.o(.text.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelStart
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStart
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[292]"></a>osMutexAcquire</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rtx_mutex.o(.text.osMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osMutexAcquire
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_mutex_trylock
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_mutex_lock
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>

<P><STRONG><a name="[293]"></a>osMutexDelete</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rtx_mutex.o(.text.osMutexDelete), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osMutexDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
</UL>

<P><STRONG><a name="[de]"></a>osMutexNew</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, rtx_mutex.o(.text.osMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osMutexNew
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexNew
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_regist
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rte_adapter_cmsis_rtos2.o(.text.rte_init)
</UL>
<P><STRONG><a name="[294]"></a>osMutexRelease</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rtx_mutex.o(.text.osMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osMutexRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_mutex_unlock
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
</UL>

<P><STRONG><a name="[35f]"></a>osRtxErrorNotify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_tick.o(.text.osRtxErrorNotify))
<BR><BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>

<P><STRONG><a name="[d5]"></a>osRtxIdleThread</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_tick.o(.text.osRtxIdleThread))
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxIdleThread
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxIdleThread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osRtxThreadStartup)
</UL>
<P><STRONG><a name="[263]"></a>osRtxKernelErrorNotify</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, rtx_kernel.o(.text.osRtxKernelErrorNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxKernelErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>

<P><STRONG><a name="[357]"></a>osRtxKernelPreInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osRtxKernelPreInit))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[361]"></a>osRtxMemoryAlloc</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, rtx_memory.o(.text.osRtxMemoryAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
</UL>

<P><STRONG><a name="[363]"></a>osRtxMemoryFree</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, rtx_memory.o(.text.osRtxMemoryFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryFree
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
</UL>

<P><STRONG><a name="[e2]"></a>osRtxMemoryInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, rtx_memory.o(.text.osRtxMemoryInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxMemoryInit
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryInit
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.svcRtxKernelInitialize)
</UL>
<P><STRONG><a name="[366]"></a>osRtxMemoryPoolAlloc</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, rtx_mempool.o(.text.osRtxMemoryPoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryPoolAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
</UL>

<P><STRONG><a name="[368]"></a>osRtxMemoryPoolFree</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, rtx_mempool.o(.text.osRtxMemoryPoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockFree
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
</UL>

<P><STRONG><a name="[1eb]"></a>osRtxMemoryPoolInit</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, rtx_mempool.o(.text.osRtxMemoryPoolInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryPoolInit
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[36b]"></a>osRtxMutexOwnerRelease</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, rtx_mutex.o(.text.osRtxMutexOwnerRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexReleased
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquired
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[370]"></a>osRtxMutexOwnerRestore</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, rtx_mutex.o(.text.osRtxMutexOwnerRestore))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxMutexOwnerRestore &rArr; osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[118]"></a>osRtxPendSV_Handler</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, rtx_system.o(.text.osRtxPendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[373]"></a>osRtxPostProcess</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, rtx_system.o(.text.osRtxPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxPostProcess &rArr; osRtxKernelErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[377]"></a>osRtxThreadDelayTick</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadDelayTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osRtxThreadDelayTick &rArr; osRtxMutexOwnerRestore &rArr; osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitTimeout
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRestore
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadUnblocked
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitTimeout
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquireTimeout
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquireTimeout
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutTimeout
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetTimeout
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolAllocTimeout
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayCompleted
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[372]"></a>osRtxThreadDispatch</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadDispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadBlock
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadSetPriority
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
</UL>

<P><STRONG><a name="[36d]"></a>osRtxThreadListGet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListGet))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[389]"></a>osRtxThreadListPut</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadListPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[381]"></a>osRtxThreadListRemove</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadYield
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[371]"></a>osRtxThreadListSort</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadListSort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadSetPriority
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRestore
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[382]"></a>osRtxThreadReadyPut</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadReadyPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadYield
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[38b]"></a>osRtxThreadStartup</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadStartup))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[235]"></a>osRtxThreadSwitch</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadSwitch))
<BR><BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSwitched
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadYield
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[38d]"></a>osRtxThreadWaitEnter</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, rtx_thread.o(.text.osRtxThreadWaitEnter))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayInsert
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadBlocked
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[36e]"></a>osRtxThreadWaitExit</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadWaitExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadUnblocked
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadJoinWakeup
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
</UL>

<P><STRONG><a name="[119]"></a>osRtxTick_Handler</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, rtx_system.o(.text.osRtxTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osRtxTick_Handler &rArr; osRtxThreadDelayTick &rArr; osRtxMutexOwnerRestore &rArr; osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_AcknowledgeIRQ
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadPreempted
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[2cc]"></a>osSemaphoreAcquire</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, rtx_semaphore.o(.text.osSemaphoreAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osSemaphoreAcquire
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreNotAcquired
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_send_async
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recv_async
</UL>

<P><STRONG><a name="[2d2]"></a>osSemaphoreNew</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rtx_semaphore.o(.text.osSemaphoreNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osSemaphoreNew
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreNew
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_regist
</UL>

<P><STRONG><a name="[1b3]"></a>osSemaphoreRelease</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rtx_semaphore.o(.text.osSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenIncrement
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>

<P><STRONG><a name="[e4]"></a>osThreadExit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadExit))
<BR><BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadExit
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_start_application
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[27e]"></a>osThreadGetId</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osThreadGetId &rArr; svcRtxThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadGetId
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>

<P><STRONG><a name="[34c]"></a>osThreadNew</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rtx_thread.o(.text.osThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osThreadNew
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadNew
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_thread
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[34d]"></a>osThreadSetPriority</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rtx_thread.o(.text.osThreadSetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osThreadSetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[39a]"></a>osThreadYield</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rtx_thread.o(.text.osThreadYield))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osThreadYield
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadYield
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_yield
</UL>

<P><STRONG><a name="[e8]"></a>ota_thread</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, ota_thread.o(.text.ota_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 2528 + Unknown Stack Size
<LI>Call Chain = ota_thread &rArr; fota_upgrade &rArr; tiny_aes_setkey_dec &rArr; tiny_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_upgrade
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_copy_version
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_check_upgrade
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_start_application
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_thread.o(.text.system_thread)
</UL>
<P><STRONG><a name="[e6]"></a>rte_data_out</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, system_thread.o(.text.rte_data_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = rte_data_out &rArr; hal_device_write_async &rArr; OUTLINED_FUNCTION_0 &rArr; hal_get_device &rArr; ht_get &rArr; ht_call_internal &rArr; memory_free &rArr; block_merge_next &rArr; block_absorb &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_device_write_async
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_thread.o(.text.system_thread)
</UL>
<P><STRONG><a name="[3a1]"></a>rte_delay_ms</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rte_adapter_cmsis_rtos2.o(.text.rte_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rte_delay_ms &rArr; osDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_interface_delay_ms
</UL>

<P><STRONG><a name="[407]"></a>rte_delay_us</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, rte_adapter_cmsis_rtos2.o(.text.rte_delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rte_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_interface_delay_us
</UL>

<P><STRONG><a name="[3d1]"></a>rte_get_main_timergroup</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rte_adapter_cmsis_rtos2.o(.text.rte_get_main_timergroup))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_thread
</UL>

<P><STRONG><a name="[df]"></a>rte_get_tick_ms</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, rte_adapter_cmsis_rtos2.o(.text.rte_get_tick_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rte_get_tick_ms &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_device_write_sync
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_time_consume
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_device_write_async
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_device_read_sync
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_device_read_async
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_read_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rte_adapter_cmsis_rtos2.o(.text.rte_init)
</UL>
<P><STRONG><a name="[3a2]"></a>rte_init</STRONG> (Thumb, 266 bytes, Stack size 80 bytes, rte_adapter_cmsis_rtos2.o(.text.rte_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = rte_init &rArr; timer_create_group &rArr; ds_vector_create &rArr; memory_calloc_impl &rArr; memory_alloc_impl &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_create_group
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_init
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_pool
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_thread
</UL>

<P><STRONG><a name="[b7]"></a>rte_mutex_lock</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rte_adapter_cmsis_rtos2.o(.text.rte_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rte_mutex_lock &rArr; osMutexAcquire
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
</UL>
<BR>[Address Reference Count : 4]<UL><LI> rte_adapter_cmsis_rtos2.o(.text.rte_init)
<LI> hal.o(.text.hal_init)
<LI> fal_adapter.o(.text.init)
<LI> hal_com_stm32h7.o(.text.com_regist)
</UL>
<P><STRONG><a name="[b8]"></a>rte_mutex_trylock</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rte_adapter_cmsis_rtos2.o(.text.rte_mutex_trylock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rte_mutex_trylock &rArr; osMutexAcquire
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Address Reference Count : 2]<UL><LI> hal.o(.text.hal_init)
<LI> hal_com_stm32h7.o(.text.com_regist)
</UL>
<P><STRONG><a name="[b9]"></a>rte_mutex_unlock</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rte_adapter_cmsis_rtos2.o(.text.rte_mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rte_mutex_unlock &rArr; osMutexRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
</UL>
<BR>[Address Reference Count : 4]<UL><LI> rte_adapter_cmsis_rtos2.o(.text.rte_init)
<LI> hal.o(.text.hal_init)
<LI> fal_adapter.o(.text.init)
<LI> hal_com_stm32h7.o(.text.com_regist)
</UL>
<P><STRONG><a name="[230]"></a>rte_time_consume</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rte_timer.o(.text.rte_time_consume))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rte_time_consume &rArr; rte_get_tick_ms &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_get_tick_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_read_data
</UL>

<P><STRONG><a name="[21f]"></a>rte_yield</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rte_adapter_cmsis_rtos2.o(.text.rte_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rte_yield &rArr; osThreadYield
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>

<P><STRONG><a name="[3a7]"></a>rym_recv_on_device</STRONG> (Thumb, 704 bytes, Stack size 56 bytes, ymodem.o(.text.rym_recv_on_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = rym_recv_on_device &rArr; _rym_read_data &rArr; hal_device_read_async &rArr; OUTLINED_FUNCTION_0 &rArr; hal_get_device &rArr; ht_get &rArr; ht_call_internal &rArr; memory_free &rArr; block_merge_next &rArr; block_absorb &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_calloc_impl
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_read_data
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_read_code
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_putchar
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_upgrade_cmd
</UL>

<P><STRONG><a name="[f8]"></a>shell_cmd_fota</STRONG> (Thumb, 1002 bytes, Stack size 128 bytes, fota.o(.text.shell_cmd_fota))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = shell_cmd_fota &rArr; fota_part_fw_verify &rArr; memory_free &rArr; block_merge_next &rArr; block_absorb &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc_impl
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_part_fw_verify
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_find
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_printf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_23
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_22
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_21
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_20
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_19
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_18
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_17
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fota.o(shell)
</UL>
<P><STRONG><a name="[f6]"></a>shell_cmd_mem</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rte_memory.o(.text.shell_cmd_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = shell_cmd_mem &rArr; memory_demon &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_demon
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rte_memory.o(shell)
</UL>
<P><STRONG><a name="[f4]"></a>shell_cmd_qspitest</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, driver_w25qxx_atapter.o(.text.shell_cmd_qspitest))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = shell_cmd_qspitest &rArr; w25qxx_read_test &rArr; w25qxx_write &rArr; _w25qxx_write_no_check &rArr; _w25qxx_page_program &rArr; _w25qxx_qspi_write_read
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_w25qxx_atapter.o(shell)
</UL>
<P><STRONG><a name="[3b3]"></a>shell_getc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, system_thread.o(.text.shell_getc))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = shell_getc &rArr; hal_device_read_async &rArr; OUTLINED_FUNCTION_0 &rArr; hal_get_device &rArr; ht_get &rArr; ht_call_internal &rArr; memory_free &rArr; block_merge_next &rArr; block_absorb &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_device_read_async
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_task
</UL>

<P><STRONG><a name="[3a6]"></a>shell_init</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, rte_shell.o(.text.shell_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = shell_init &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_init
</UL>

<P><STRONG><a name="[cb]"></a>shell_printf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, rte_shell.o(.text.shell_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = shell_printf &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_cmd_help
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_demon
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_upgrade_cmd
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_upgrade
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_task
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_thread
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_cmd_fota
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_23
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_20
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_18
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rte_memory.o(.text.memory_demon)
</UL>
<P><STRONG><a name="[1f6]"></a>shell_putc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rte_shell.o(.text.shell_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = shell_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_output
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_forward_cursor
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_dispatch_seq
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_dispatch
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_delete
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_backward_cursor
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>

<P><STRONG><a name="[243]"></a>shell_puts</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rte_shell.o(.text.shell_puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = shell_puts &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_output
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_process_history
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_end_input
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_dispatch
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_delete
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_cmd_help
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_task
</UL>

<P><STRONG><a name="[e9]"></a>shell_task</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, rte_shell.o(.text.shell_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = shell_task &rArr; shell_getc &rArr; hal_device_read_async &rArr; OUTLINED_FUNCTION_0 &rArr; hal_get_device &rArr; ht_get &rArr; ht_call_internal &rArr; memory_free &rArr; block_merge_next &rArr; block_absorb &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_puts
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_parse_line
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_find_cmd
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_dispatch
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_printf
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_getc
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_thread.o(.text.system_thread)
</UL>
<P><STRONG><a name="[f5]"></a>shell_upgrade_cmd</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, ota_thread.o(.text.shell_upgrade_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = shell_upgrade_cmd &rArr; rym_recv_on_device &rArr; _rym_read_data &rArr; hal_device_read_async &rArr; OUTLINED_FUNCTION_0 &rArr; hal_get_device &rArr; ht_get &rArr; ht_call_internal &rArr; memory_free &rArr; block_merge_next &rArr; block_absorb &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rym_recv_on_device
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_part_fw_verify
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_printf
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ota_thread.o(shell)
</UL>
<P><STRONG><a name="[ca]"></a>system_thread</STRONG> (Thumb, 914 bytes, Stack size 176 bytes, system_thread.o(.text.system_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464 + Unknown Stack Size
<LI>Call Chain = system_thread &rArr; fdb_kvdb_init &rArr; _fdb_kv_load &rArr; fdb_kv_set_default &rArr; create_kv_blob &rArr; new_kv &rArr; gc_collect &rArr; OUTLINED_FUNCTION_8 &rArr; sector_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; OUTLINED_FUNCTION_10 &rArr; fal_flash_device_find &rArr; OUTLINED_FUNCTION_1 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_tick_handle
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_create_new
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_printf
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_control
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_device_read_sync
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_crc_init
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kvdb_init
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_set_blob
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_get_blob
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_blob_make
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_init
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_get_main_timergroup
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[3a5]"></a>timer_create_group</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, rte_timer.o(.text.timer_create_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = timer_create_group &rArr; ds_vector_create &rArr; memory_calloc_impl &rArr; memory_alloc_impl &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_create
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_init
</UL>

<P><STRONG><a name="[3d2]"></a>timer_create_new</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, rte_timer.o(.text.timer_create_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = timer_create_new &rArr; ds_vector_push &rArr; ds_vector_expand &rArr; memory_realloc_impl &rArr; memory_free &rArr; block_merge_next &rArr; block_absorb &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_unlock
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_push
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_lock
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_length
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_free
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_calloc_impl
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_thread
</UL>

<P><STRONG><a name="[3d7]"></a>timer_delete</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, rte_timer.o(.text.timer_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = timer_delete &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_remove_by_index
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_group_poll
</UL>

<P><STRONG><a name="[3d8]"></a>timer_group_poll</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, rte_timer.o(.text.timer_group_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = timer_group_poll &rArr; timer_delete &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_delete
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_unlock
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_lock
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_length
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_at
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_tick_handle
</UL>

<P><STRONG><a name="[3a4]"></a>timer_init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, rte_timer.o(.text.timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = timer_init &rArr; memory_calloc_impl &rArr; memory_alloc_impl &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_calloc_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_init
</UL>

<P><STRONG><a name="[3d3]"></a>timer_tick_handle</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, rte_timer.o(.text.timer_tick_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = timer_tick_handle &rArr; timer_group_poll &rArr; timer_delete &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_group_poll
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_unlock
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_lock
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_length
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_at
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_thread
</UL>

<P><STRONG><a name="[317]"></a>tiny_aes_crypt_cbc</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, tiny_aes.o(.text.tiny_aes_crypt_cbc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tiny_aes_crypt_cbc &rArr; tiny_aes_crypt_ecb
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_aes_crypt_ecb
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_read_part
</UL>

<P><STRONG><a name="[3db]"></a>tiny_aes_crypt_ecb</STRONG> (Thumb, 1760 bytes, Stack size 72 bytes, tiny_aes.o(.text.tiny_aes_crypt_ecb))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tiny_aes_crypt_ecb
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_aes_crypt_cbc
</UL>

<P><STRONG><a name="[31a]"></a>tiny_aes_setkey_dec</STRONG> (Thumb, 228 bytes, Stack size 312 bytes, tiny_aes.o(.text.tiny_aes_setkey_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 2416<LI>Call Chain = tiny_aes_setkey_dec &rArr; tiny_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_aes_setkey_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_upgrade
</UL>

<P><STRONG><a name="[3dc]"></a>tiny_aes_setkey_enc</STRONG> (Thumb, 930 bytes, Stack size 2104 bytes, tiny_aes.o(.text.tiny_aes_setkey_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 2104<LI>Call Chain = tiny_aes_setkey_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_aes_setkey_dec
</UL>

<P><STRONG><a name="[3dd]"></a>w25qxx_block_erase_32k</STRONG> (Thumb, 638 bytes, Stack size 88 bytes, driver_w25qxx.o(.text.w25qxx_block_erase_32k))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = w25qxx_block_erase_32k &rArr; OUTLINED_FUNCTION_9 &rArr; _w25qxx_qspi_write_read
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_96
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_92
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_91
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_85
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_75
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_73
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_70
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_54
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_51
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_48
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_47
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_43
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_37
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_36
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_33
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_32
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_30
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_25
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_24
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_23
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_19
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_18
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_136
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_118
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_117
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_108
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_107
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_105
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_102
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_test
</UL>

<P><STRONG><a name="[3f3]"></a>w25qxx_block_erase_64k</STRONG> (Thumb, 638 bytes, Stack size 88 bytes, driver_w25qxx.o(.text.w25qxx_block_erase_64k))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = w25qxx_block_erase_64k &rArr; OUTLINED_FUNCTION_9 &rArr; _w25qxx_qspi_write_read
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_96
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_92
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_91
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_85
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_75
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_73
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_70
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_54
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_51
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_48
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_47
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_43
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_37
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_36
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_33
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_32
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_30
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_25
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_24
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_23
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_19
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_18
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_136
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_118
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_117
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_108
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_107
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_105
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_102
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_test
</UL>

<P><STRONG><a name="[215]"></a>w25qxx_deinit</STRONG> (Thumb, 188 bytes, Stack size 64 bytes, driver_w25qxx.o(.text.w25qxx_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = w25qxx_deinit &rArr; OUTLINED_FUNCTION_45 &rArr; _w25qxx_qspi_write_read
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_51
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_45
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_32
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_31
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_24
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_16
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_149
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_119
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_17
</UL>

<P><STRONG><a name="[1f3]"></a>w25qxx_fast_read</STRONG> (Thumb, 356 bytes, Stack size 80 bytes, driver_w25qxx.o(.text.w25qxx_fast_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = w25qxx_fast_read &rArr; _w25qxx_qspi_write_read
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_qspi_write_read
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_97
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_80
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_59
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_55
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_50
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_49
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_44
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_32
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_25
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_24
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_23
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_18
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_155
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_139
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_135
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_134
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_121
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_116
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_112
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>

<P><STRONG><a name="[339]"></a>w25qxx_info</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, driver_w25qxx.o(.text.w25qxx_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = w25qxx_info
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[340]"></a>w25qxx_init</STRONG> (Thumb, 1038 bytes, Stack size 80 bytes, driver_w25qxx.o(.text.w25qxx_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = w25qxx_init &rArr; _w25qxx_qspi_write_read
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_qspi_write_read
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_87
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_78
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_48
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_46
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_45
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_24
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_23
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_152
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_119
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[bf]"></a>w25qxx_interface_debug_print</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, driver_w25qxx_atapter.o(.text.w25qxx_interface_debug_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = w25qxx_interface_debug_print &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_test
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
</UL>
<BR>[Address Reference Count : 2]<UL><LI> driver_w25qxx_atapter.o(.text.w25qxx_read_test)
<LI> driver_w25qxx_atapter.o(.text.driver_w25qxx_init)
</UL>
<P><STRONG><a name="[c1]"></a>w25qxx_interface_delay_ms</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, driver_w25qxx_atapter.o(.text.w25qxx_interface_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = w25qxx_interface_delay_ms &rArr; rte_delay_ms &rArr; osDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_w25qxx_atapter.o(.text.driver_w25qxx_init)
</UL>
<P><STRONG><a name="[c0]"></a>w25qxx_interface_delay_us</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, driver_w25qxx_atapter.o(.text.w25qxx_interface_delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = w25qxx_interface_delay_us &rArr; rte_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_delay_us
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_w25qxx_atapter.o(.text.driver_w25qxx_init)
</UL>
<P><STRONG><a name="[c3]"></a>w25qxx_interface_spi_qspi_deinit</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, driver_w25qxx_atapter.o(.text.w25qxx_interface_spi_qspi_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = w25qxx_interface_spi_qspi_deinit &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_w25qxx_atapter.o(.text.driver_w25qxx_init)
</UL>
<P><STRONG><a name="[c4]"></a>w25qxx_interface_spi_qspi_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, driver_w25qxx_atapter.o(.text.w25qxx_interface_spi_qspi_init))
<BR>[Address Reference Count : 1]<UL><LI> driver_w25qxx_atapter.o(.text.driver_w25qxx_init)
</UL>
<P><STRONG><a name="[c2]"></a>w25qxx_interface_spi_qspi_write_read</STRONG> (Thumb, 320 bytes, Stack size 80 bytes, driver_w25qxx_atapter.o(.text.w25qxx_interface_spi_qspi_write_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = w25qxx_interface_spi_qspi_write_read &rArr; HAL_QSPI_Transmit &rArr; OUTLINED_FUNCTION_9 &rArr; QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; rte_get_tick_ms &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_w25qxx_atapter.o(.text.driver_w25qxx_init)
</UL>
<P><STRONG><a name="[21a]"></a>w25qxx_page_program</STRONG> (Thumb, 652 bytes, Stack size 80 bytes, driver_w25qxx.o(.text.w25qxx_page_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = w25qxx_page_program &rArr; _w25qxx_qspi_write_read
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_qspi_write_read
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_99
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_94
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_87
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_86
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_83
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_81
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_79
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_63
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_57
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_54
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_39
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_32
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_30
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_25
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_24
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_23
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_19
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_18
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_153
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_147
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_143
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_142
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_140
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_130
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_129
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_125
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_122
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_111
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_109
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_101
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>

<P><STRONG><a name="[241]"></a>w25qxx_read</STRONG> (Thumb, 356 bytes, Stack size 80 bytes, driver_w25qxx.o(.text.w25qxx_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = w25qxx_read &rArr; _w25qxx_qspi_write_read
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_qspi_write_read
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_97
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_80
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_59
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_55
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_50
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_49
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_44
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_32
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_25
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_24
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_23
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_18
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_155
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_139
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_135
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_134
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_121
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_116
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_112
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_test
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>

<P><STRONG><a name="[3ad]"></a>w25qxx_read_test</STRONG> (Thumb, 1088 bytes, Stack size 48 bytes, driver_w25qxx_atapter.o(.text.w25qxx_read_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = w25qxx_read_test &rArr; w25qxx_write &rArr; _w25qxx_write_no_check &rArr; _w25qxx_page_program &rArr; _w25qxx_qspi_write_read
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_sector_erase_4k
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_interface_debug_print
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_64k
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_32k
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_19
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_18
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_17
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_16
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_cmd_qspitest
</UL>

<P><STRONG><a name="[2ec]"></a>w25qxx_sector_erase_4k</STRONG> (Thumb, 638 bytes, Stack size 88 bytes, driver_w25qxx.o(.text.w25qxx_sector_erase_4k))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = w25qxx_sector_erase_4k &rArr; OUTLINED_FUNCTION_9 &rArr; _w25qxx_qspi_write_read
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_96
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_92
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_91
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_85
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_75
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_73
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_70
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_54
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_51
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_48
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_47
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_43
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_37
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_36
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_33
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_32
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_30
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_25
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_24
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_23
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_19
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_18
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_136
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_118
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_117
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_108
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_107
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_105
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_102
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_test
</UL>

<P><STRONG><a name="[33f]"></a>w25qxx_set_dual_quad_spi</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.w25qxx_set_dual_quad_spi))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[33d]"></a>w25qxx_set_interface</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.w25qxx_set_interface))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[24e]"></a>w25qxx_set_read_parameters</STRONG> (Thumb, 162 bytes, Stack size 56 bytes, driver_w25qxx.o(.text.w25qxx_set_read_parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = w25qxx_set_read_parameters &rArr; OUTLINED_FUNCTION_23 &rArr; _w25qxx_qspi_write_read
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_51
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_32
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_23
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_16
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_127
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
</UL>

<P><STRONG><a name="[33b]"></a>w25qxx_set_type</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.w25qxx_set_type))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[247]"></a>w25qxx_write</STRONG> (Thumb, 1568 bytes, Stack size 120 bytes, driver_w25qxx.o(.text.w25qxx_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = w25qxx_write &rArr; _w25qxx_write_no_check &rArr; _w25qxx_page_program &rArr; _w25qxx_qspi_write_read
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_write_no_check
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_spi_write_read
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_qspi_write_read
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_98
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_93
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_88
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_81
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_62
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_60
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_57
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_42
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_35
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_28
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_146
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_145
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_124
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_113
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_110
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_100
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_test
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
</UL>

<P><STRONG><a name="[9c]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[105]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[45c]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[45d]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[40d]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, driver_w25qxx_atapter.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_test
</UL>

<P><STRONG><a name="[1f2]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, driver_w25qxx_atapter.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; w25qxx_fast_read &rArr; _w25qxx_qspi_write_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_fast_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_test
</UL>

<P><STRONG><a name="[410]"></a>OUTLINED_FUNCTION_10</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, driver_w25qxx_atapter.o(.text.OUTLINED_FUNCTION_10))
<BR><BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_test
</UL>

<P><STRONG><a name="[40b]"></a>OUTLINED_FUNCTION_11</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, driver_w25qxx_atapter.o(.text.OUTLINED_FUNCTION_11))
<BR><BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_test
</UL>

<P><STRONG><a name="[40e]"></a>OUTLINED_FUNCTION_12</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, driver_w25qxx_atapter.o(.text.OUTLINED_FUNCTION_12))
<BR><BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_test
</UL>

<P><STRONG><a name="[40f]"></a>OUTLINED_FUNCTION_13</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, driver_w25qxx_atapter.o(.text.OUTLINED_FUNCTION_13))
<BR><BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_test
</UL>

<P><STRONG><a name="[411]"></a>OUTLINED_FUNCTION_14</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, driver_w25qxx_atapter.o(.text.OUTLINED_FUNCTION_14))
<BR><BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_test
</UL>

<P><STRONG><a name="[212]"></a>OUTLINED_FUNCTION_15</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, driver_w25qxx_atapter.o(.text.OUTLINED_FUNCTION_15))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = OUTLINED_FUNCTION_15 &rArr; w25qxx_interface_debug_print &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_interface_debug_print
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_test
</UL>

<P><STRONG><a name="[412]"></a>OUTLINED_FUNCTION_16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, driver_w25qxx_atapter.o(.text.OUTLINED_FUNCTION_16))
<BR><BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_test
</UL>

<P><STRONG><a name="[214]"></a>OUTLINED_FUNCTION_17</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, driver_w25qxx_atapter.o(.text.OUTLINED_FUNCTION_17))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = OUTLINED_FUNCTION_17 &rArr; w25qxx_deinit &rArr; OUTLINED_FUNCTION_45 &rArr; _w25qxx_qspi_write_read
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_test
</UL>

<P><STRONG><a name="[40a]"></a>OUTLINED_FUNCTION_18</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, driver_w25qxx_atapter.o(.text.OUTLINED_FUNCTION_18))
<BR><BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_test
</UL>

<P><STRONG><a name="[413]"></a>OUTLINED_FUNCTION_19</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, driver_w25qxx_atapter.o(.text.OUTLINED_FUNCTION_19))
<BR><BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_test
</UL>

<P><STRONG><a name="[219]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, driver_w25qxx_atapter.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; w25qxx_page_program &rArr; _w25qxx_qspi_write_read
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_page_program
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_test
</UL>

<P><STRONG><a name="[415]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, driver_w25qxx_atapter.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_test
</UL>

<P><STRONG><a name="[414]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, driver_w25qxx_atapter.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_test
</UL>

<P><STRONG><a name="[240]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, driver_w25qxx_atapter.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = OUTLINED_FUNCTION_5 &rArr; w25qxx_read &rArr; _w25qxx_qspi_write_read
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_test
</UL>

<P><STRONG><a name="[246]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, driver_w25qxx_atapter.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = OUTLINED_FUNCTION_6 &rArr; w25qxx_write &rArr; _w25qxx_write_no_check &rArr; _w25qxx_page_program &rArr; _w25qxx_qspi_write_read
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_test
</UL>

<P><STRONG><a name="[24d]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, driver_w25qxx_atapter.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = OUTLINED_FUNCTION_7 &rArr; w25qxx_set_read_parameters &rArr; OUTLINED_FUNCTION_23 &rArr; _w25qxx_qspi_write_read
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_set_read_parameters
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_test
</UL>

<P><STRONG><a name="[255]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, driver_w25qxx_atapter.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = OUTLINED_FUNCTION_8 &rArr; w25qxx_interface_debug_print &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_interface_debug_print
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_test
</UL>

<P><STRONG><a name="[40c]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, driver_w25qxx_atapter.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_test
</UL>

<P><STRONG><a name="[39f]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fal_adapter.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
</UL>

<P><STRONG><a name="[33c]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fal_adapter.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[3a0]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fal_adapter.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
</UL>

<P><STRONG><a name="[33e]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fal_adapter.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[33a]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fal_adapter.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[3]"></a>erase</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, fal_adapter.o(.text.erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = erase &rArr; w25qxx_sector_erase_4k &rArr; OUTLINED_FUNCTION_9 &rArr; _w25qxx_qspi_write_read
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_sector_erase_4k
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_mutex_unlock
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_mutex_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fal_adapter.o(.data.nor_flash0)
</UL>
<P><STRONG><a name="[0]"></a>init</STRONG> (Thumb, 442 bytes, Stack size 160 bytes, fal_adapter.o(.text.init))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = init &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_set_type
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_set_interface
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_set_dual_quad_spi
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_init
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_info
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_deinit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_w25qxx_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fal_adapter.o(.data.nor_flash0)
</UL>
<P><STRONG><a name="[1]"></a>read</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, fal_adapter.o(.text.read))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = read &rArr; w25qxx_fast_read &rArr; _w25qxx_qspi_write_read
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_fast_read
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_mutex_unlock
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_mutex_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fal_adapter.o(.data.nor_flash0)
</UL>
<P><STRONG><a name="[2]"></a>write</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, fal_adapter.o(.text.write))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = write &rArr; w25qxx_write &rArr; _w25qxx_write_no_check &rArr; _w25qxx_page_program &rArr; _w25qxx_qspi_write_read
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_mutex_unlock
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_mutex_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fal_adapter.o(.data.nor_flash0)
</UL>
<P><STRONG><a name="[3d0]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, system_thread.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_thread
</UL>

<P><STRONG><a name="[1f4]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system_thread.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_thread
</UL>

<P><STRONG><a name="[e7]"></a>running_timer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system_thread.o(.text.running_timer))
<BR><BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_thread.o(.text.system_thread)
</UL>
<P><STRONG><a name="[1df]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ota_thread.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_thread
</UL>

<P><STRONG><a name="[39e]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ota_thread.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_upgrade_cmd
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_thread
</UL>

<P><STRONG><a name="[39d]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ota_thread.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_thread
</UL>

<P><STRONG><a name="[422]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ota_thread.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ymodem_on_begin
</UL>

<P><STRONG><a name="[39c]"></a>ota_start_application</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ota_thread.o(.text.ota_start_application))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_thread
</UL>

<P><STRONG><a name="[e0]"></a>ymodem_on_begin</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, ota_thread.o(.text.ymodem_on_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = ymodem_on_begin &rArr; fal_partition_erase &rArr; fal_flash_device_find &rArr; OUTLINED_FUNCTION_1 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_find
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ota_thread.o(.text.shell_upgrade_cmd)
</UL>
<P><STRONG><a name="[e1]"></a>ymodem_on_data</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, ota_thread.o(.text.ymodem_on_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = ymodem_on_data &rArr; fal_partition_write &rArr; OUTLINED_FUNCTION_10 &rArr; fal_flash_device_find &rArr; OUTLINED_FUNCTION_1 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ota_thread.o(.text.shell_upgrade_cmd)
</UL>
<P><STRONG><a name="[349]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rte_log.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_vprintf
</UL>

<P><STRONG><a name="[348]"></a>log_vsnprintf</STRONG> (Thumb, 744 bytes, Stack size 40 bytes, rte_log.o(.text.log_vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_snprintf
</UL>

<P><STRONG><a name="[2b5]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rte_memory.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_realloc_impl
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc_align_impl
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_request_size
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_absorb
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_ptr
</UL>

<P><STRONG><a name="[2b4]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rte_memory.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_request_size
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_absorb
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_ptr
</UL>

<P><STRONG><a name="[21b]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rte_memory.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_free
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_free_block
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_locate_free
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
</UL>

<P><STRONG><a name="[22e]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rte_memory.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_split
</UL>

<P><STRONG><a name="[2b3]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rte_memory.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_request_size
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_absorb
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_ptr
</UL>

<P><STRONG><a name="[2c3]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rte_memory.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
</UL>

<P><STRONG><a name="[2c7]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rte_memory.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_split
</UL>

<P><STRONG><a name="[256]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rte_memory.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_8 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
</UL>

<P><STRONG><a name="[2bc]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rte_memory.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_locate_free
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
</UL>

<P><STRONG><a name="[2b6]"></a>align_ptr</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, rte_memory.o(.text.align_ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = align_ptr &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc_align_impl
</UL>

<P><STRONG><a name="[2b9]"></a>block_absorb</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, rte_memory.o(.text.block_absorb))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = block_absorb &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_link_next
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_free
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
</UL>

<P><STRONG><a name="[2bb]"></a>block_insert</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, rte_memory.o(.text.block_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = block_insert &rArr; OUTLINED_FUNCTION_2 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_realloc_impl
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_free
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc_align_impl
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_pool
</UL>

<P><STRONG><a name="[2ba]"></a>block_link_next</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rte_memory.o(.text.block_link_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc_align_impl
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_free
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_absorb
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_pool
</UL>

<P><STRONG><a name="[2be]"></a>block_locate_free</STRONG> (Thumb, 328 bytes, Stack size 56 bytes, rte_memory.o(.text.block_locate_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = block_locate_free &rArr; remove_free_block &rArr; OUTLINED_FUNCTION_2 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_free_block
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc_impl
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc_align_impl
</UL>

<P><STRONG><a name="[2c0]"></a>block_mark_as_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rte_memory.o(.text.block_mark_as_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = block_mark_as_free &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_link_next
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_free
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_split
</UL>

<P><STRONG><a name="[2c1]"></a>block_mark_as_used</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rte_memory.o(.text.block_mark_as_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = block_mark_as_used &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_realloc_impl
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
</UL>

<P><STRONG><a name="[2c2]"></a>block_merge_next</STRONG> (Thumb, 164 bytes, Stack size 56 bytes, rte_memory.o(.text.block_merge_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = block_merge_next &rArr; block_absorb &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_remove
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_absorb
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_realloc_impl
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_free
</UL>

<P><STRONG><a name="[2bd]"></a>block_next</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, rte_memory.o(.text.block_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_realloc_impl
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_demon
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_used
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_link_next
</UL>

<P><STRONG><a name="[2c5]"></a>block_prepare_used</STRONG> (Thumb, 198 bytes, Stack size 56 bytes, rte_memory.o(.text.block_prepare_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_split
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_used
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_link_next
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc_impl
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc_align_impl
</UL>

<P><STRONG><a name="[2c4]"></a>block_remove</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rte_memory.o(.text.block_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = block_remove &rArr; remove_free_block &rArr; OUTLINED_FUNCTION_2 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_free_block
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_free
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
</UL>

<P><STRONG><a name="[2c6]"></a>block_split</STRONG> (Thumb, 274 bytes, Stack size 56 bytes, rte_memory.o(.text.block_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = block_split &rArr; block_mark_as_free &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_free
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_realloc_impl
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc_align_impl
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
</UL>

<P><STRONG><a name="[2bf]"></a>remove_free_block</STRONG> (Thumb, 244 bytes, Stack size 56 bytes, rte_memory.o(.text.remove_free_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = remove_free_block &rArr; OUTLINED_FUNCTION_2 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_remove
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_locate_free
</UL>

<P><STRONG><a name="[3b6]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rte_timer.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_delete
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_timer_free_cb
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_create_new
</UL>

<P><STRONG><a name="[3d6]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rte_timer.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_delete
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_create_new
</UL>

<P><STRONG><a name="[3d5]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rte_timer.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_delete
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_create_new
</UL>

<P><STRONG><a name="[3da]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rte_timer.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_tick_handle
</UL>

<P><STRONG><a name="[3d4]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rte_timer.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_create_new
</UL>

<P><STRONG><a name="[3d9]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rte_timer.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_group_poll
</UL>

<P><STRONG><a name="[ea]"></a>single_timer_free_cb</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, rte_timer.o(.text.single_timer_free_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = single_timer_free_cb &rArr; memory_free &rArr; block_merge_next &rArr; block_absorb &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_at
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_free
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rte_timer.o(.text.timer_create_group)
</UL>
<P><STRONG><a name="[1e0]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rte_shell.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; shell_printf &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_task
</UL>

<P><STRONG><a name="[1f5]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rte_shell.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; shell_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_line_home
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_forward_cursor
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_dispatch
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_delete
</UL>

<P><STRONG><a name="[21c]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rte_shell.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; shell_printf &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_task
</UL>

<P><STRONG><a name="[3b1]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rte_shell.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_line_home
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_line_end
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_forward_cursor
</UL>

<P><STRONG><a name="[23a]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rte_shell.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = OUTLINED_FUNCTION_4 &rArr; shell_printf &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_task
</UL>

<P><STRONG><a name="[242]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rte_shell.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_5 &rArr; shell_puts &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_puts
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_process_history
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_line_end
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_dispatch
</UL>

<P><STRONG><a name="[ed]"></a>shell_backward_cursor</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rte_shell.o(.text.shell_backward_cursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = shell_backward_cursor &rArr; shell_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_dispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rte_shell.o(.rodata.key_seq_map)
</UL>
<P><STRONG><a name="[f7]"></a>shell_cmd_help</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, rte_shell.o(.text.shell_cmd_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = shell_cmd_help &rArr; shell_printf &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_puts
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_find_cmd
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rte_shell.o(shell)
</UL>
<P><STRONG><a name="[f1]"></a>shell_delete</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rte_shell.o(.text.shell_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = shell_delete &rArr; shell_puts &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_puts
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_putc
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_dispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rte_shell.o(.rodata.key_seq_map)
</UL>
<P><STRONG><a name="[3ae]"></a>shell_dispatch</STRONG> (Thumb, 574 bytes, Stack size 24 bytes, rte_shell.o(.text.shell_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = shell_dispatch &rArr; shell_end_input &rArr; shell_puts &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_puts
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_putc
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_line_home
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_line_end
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_get_pre_history
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_get_next_history
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_forward_cursor
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_end_input
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_dispatch_seq
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_delete
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_backward_cursor
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_task
</UL>

<P><STRONG><a name="[3af]"></a>shell_dispatch_seq</STRONG> (Thumb, 140 bytes, Stack size 20 bytes, rte_shell.o(.text.shell_dispatch_seq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = shell_dispatch_seq &rArr; shell_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_dispatch
</UL>

<P><STRONG><a name="[3b0]"></a>shell_end_input</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, rte_shell.o(.text.shell_end_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = shell_end_input &rArr; shell_puts &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_puts
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_dispatch
</UL>

<P><STRONG><a name="[3ac]"></a>shell_find_cmd</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rte_shell.o(.text.shell_find_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = shell_find_cmd &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_cmd_help
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_task
</UL>

<P><STRONG><a name="[ee]"></a>shell_forward_cursor</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rte_shell.o(.text.shell_forward_cursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = shell_forward_cursor &rArr; shell_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_putc
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_dispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rte_shell.o(.rodata.key_seq_map)
</UL>
<P><STRONG><a name="[ec]"></a>shell_get_next_history</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rte_shell.o(.text.shell_get_next_history))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = shell_get_next_history &rArr; shell_process_history &rArr; shell_puts &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_process_history
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_dispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rte_shell.o(.rodata.key_seq_map)
</UL>
<P><STRONG><a name="[eb]"></a>shell_get_pre_history</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rte_shell.o(.text.shell_get_pre_history))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = shell_get_pre_history &rArr; shell_process_history &rArr; shell_puts &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_process_history
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_dispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rte_shell.o(.rodata.key_seq_map)
</UL>
<P><STRONG><a name="[f0]"></a>shell_line_end</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rte_shell.o(.text.shell_line_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = shell_line_end &rArr; OUTLINED_FUNCTION_5 &rArr; shell_puts &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_dispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rte_shell.o(.rodata.key_seq_map)
</UL>
<P><STRONG><a name="[ef]"></a>shell_line_home</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rte_shell.o(.text.shell_line_home))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = shell_line_home &rArr; OUTLINED_FUNCTION_1 &rArr; shell_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_dispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rte_shell.o(.rodata.key_seq_map)
</UL>
<P><STRONG><a name="[3b5]"></a>shell_parse_line</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, rte_shell.o(.text.shell_parse_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = shell_parse_line
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_task
</UL>

<P><STRONG><a name="[3b2]"></a>shell_process_history</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, rte_shell.o(.text.shell_process_history))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = shell_process_history &rArr; shell_puts &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_puts
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_get_pre_history
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_get_next_history
</UL>

<P><STRONG><a name="[1e1]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; hal_get_device &rArr; ht_get &rArr; ht_call_internal &rArr; memory_free &rArr; block_merge_next &rArr; block_absorb &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_device
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_device_write_sync
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_device_write_async
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_device_read_sync
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_device_read_async
</UL>

<P><STRONG><a name="[324]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_device_write_sync
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_device_write_async
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_device_read_sync
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_device_read_async
</UL>

<P><STRONG><a name="[325]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_device_write_sync
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_device_write_async
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_device_read_sync
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_device_read_async
</UL>

<P><STRONG><a name="[22f]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; rte_time_consume &rArr; rte_get_tick_ms &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_time_consume
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_device_write_sync
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_device_write_async
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_device_read_sync
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_device_read_async
</UL>

<P><STRONG><a name="[2d0]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, hal_com_stm32h7.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_regist
</UL>

<P><STRONG><a name="[2d1]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal_com_stm32h7.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_regist
</UL>

<P><STRONG><a name="[21d]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_com_stm32h7.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_regist
</UL>

<P><STRONG><a name="[2ce]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal_com_stm32h7.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_send_async
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recv_async
</UL>

<P><STRONG><a name="[2cd]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_com_stm32h7.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_send_async
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recv_async
</UL>

<P><STRONG><a name="[ba]"></a>com_recv</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hal_com_stm32h7.o(.text.com_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = com_recv &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick &rArr; rte_get_tick_ms &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_com_stm32h7.o(.text.com_regist)
</UL>
<P><STRONG><a name="[bb]"></a>com_recv_async</STRONG> (Thumb, 260 bytes, Stack size 48 bytes, hal_com_stm32h7.o(.text.com_recv_async))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = com_recv_async &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceive_IT
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle_IT
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle_DMA
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_com_stm32h7.o(.text.com_regist)
</UL>
<P><STRONG><a name="[bc]"></a>com_send</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, hal_com_stm32h7.o(.text.com_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = com_send &rArr; HAL_UART_Transmit &rArr; OUTLINED_FUNCTION_27 &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick &rArr; rte_get_tick_ms &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_com_stm32h7.o(.text.com_regist)
</UL>
<P><STRONG><a name="[bd]"></a>com_send_async</STRONG> (Thumb, 268 bytes, Stack size 48 bytes, hal_com_stm32h7.o(.text.com_send_async))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = com_send_async &rArr; memory_alloc_align_impl &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_IT
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortTransmit_IT
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_free
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc_align_impl
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_com_stm32h7.o(.text.com_regist)
</UL>
<P><STRONG><a name="[322]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hal_gpio_stm32h7.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_toggle
</UL>

<P><STRONG><a name="[334]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ds_hashmap.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_set_internal
</UL>

<P><STRONG><a name="[32e]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ds_hashmap.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_set_internal
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_call_internal
</UL>

<P><STRONG><a name="[32d]"></a>OUTLINED_FUNCTION_10</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ds_hashmap.o(.text.OUTLINED_FUNCTION_10))
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_set_internal
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_call_internal
</UL>

<P><STRONG><a name="[21e]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ds_hashmap.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; rte_yield &rArr; osThreadYield
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_yield
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_set_internal
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_call_internal
</UL>

<P><STRONG><a name="[23b]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ds_hashmap.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_4 &rArr; memory_free &rArr; block_merge_next &rArr; block_absorb &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_free
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_set_internal
</UL>

<P><STRONG><a name="[332]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ds_hashmap.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_set_if_not_exists
</UL>

<P><STRONG><a name="[248]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ds_hashmap.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_get
</UL>

<P><STRONG><a name="[333]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ds_hashmap.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_set_internal
</UL>

<P><STRONG><a name="[257]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ds_hashmap.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_8 &rArr; memory_free &rArr; block_merge_next &rArr; block_absorb &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_free
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_create
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_set_internal
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_call_internal
</UL>

<P><STRONG><a name="[330]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ds_hashmap.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_get
</UL>

<P><STRONG><a name="[32a]"></a>ht_call_internal</STRONG> (Thumb, 462 bytes, Stack size 64 bytes, ds_hashmap.o(.text.ht_call_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = ht_call_internal &rArr; memory_free &rArr; block_merge_next &rArr; block_absorb &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_free
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_hash_function
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_get
</UL>

<P><STRONG><a name="[ab]"></a>ht_get_helper</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ds_hashmap.o(.text.ht_get_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = ht_get_helper &rArr; memory_alloc_impl &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc_impl
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ds_hashmap.o(.text.ht_get)
<LI> ds_hashmap.o(.text.OUTLINED_FUNCTION_9)
</UL>
<P><STRONG><a name="[32b]"></a>ht_hash_function</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ds_hashmap.o(.text.ht_hash_function))
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_set_internal
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_call_internal
</UL>

<P><STRONG><a name="[331]"></a>ht_set_internal</STRONG> (Thumb, 962 bytes, Stack size 72 bytes, ds_hashmap.o(.text.ht_set_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = ht_set_internal &rArr; ds_vector_push &rArr; ds_vector_expand &rArr; memory_realloc_impl &rArr; memory_free &rArr; block_merge_next &rArr; block_absorb &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_unlock
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_push
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_lock
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_length
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_at
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_realloc_impl
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_free
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_calloc_impl
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc_impl
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_hash_function
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_set_if_not_exists
</UL>

<P><STRONG><a name="[2e6]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ds_vector.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_remove_by_index
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_expand
</UL>

<P><STRONG><a name="[15d]"></a>__NVIC_SetPriority</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32h7xx_hal_cortex.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[13c]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, stm32h7xx_hal_dma.o(.text.DMA_CalcBaseAndBitshift))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_CalcBaseAndBitshift
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[13e]"></a>DMA_CalcDMAMUXChannelBaseAndMask</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, stm32h7xx_hal_dma.o(.text.DMA_CalcDMAMUXChannelBaseAndMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_CalcDMAMUXChannelBaseAndMask
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[140]"></a>DMA_CalcDMAMUXRequestGenBaseAndMask</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, stm32h7xx_hal_dma.o(.text.DMA_CalcDMAMUXRequestGenBaseAndMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_CalcDMAMUXRequestGenBaseAndMask
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[142]"></a>DMA_SetConfig</STRONG> (Thumb, 626 bytes, Stack size 52 bytes, stm32h7xx_hal_dma.o(.text.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>

<P><STRONG><a name="[149]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[14a]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[151]"></a>OUTLINED_FUNCTION_10</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(.text.OUTLINED_FUNCTION_10))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[14f]"></a>OUTLINED_FUNCTION_11</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(.text.OUTLINED_FUNCTION_11))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[147]"></a>OUTLINED_FUNCTION_12</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(.text.OUTLINED_FUNCTION_12))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[148]"></a>OUTLINED_FUNCTION_13</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(.text.OUTLINED_FUNCTION_13))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[154]"></a>OUTLINED_FUNCTION_14</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(.text.OUTLINED_FUNCTION_14))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[150]"></a>OUTLINED_FUNCTION_15</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(.text.OUTLINED_FUNCTION_15))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[153]"></a>OUTLINED_FUNCTION_18</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(.text.OUTLINED_FUNCTION_18))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[146]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[13f]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXChannelBaseAndMask
</UL>

<P><STRONG><a name="[155]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = OUTLINED_FUNCTION_4 &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[13d]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>

<P><STRONG><a name="[14c]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>

<P><STRONG><a name="[141]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXRequestGenBaseAndMask
</UL>

<P><STRONG><a name="[143]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>

<P><STRONG><a name="[14d]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>

<P><STRONG><a name="[160]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr_ex.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
</UL>

<P><STRONG><a name="[15f]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr_ex.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; HAL_GetTick &rArr; rte_get_tick_ms &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
</UL>

<P><STRONG><a name="[182]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal_qspi.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
</UL>

<P><STRONG><a name="[16f]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32h7xx_hal_qspi.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MDMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
</UL>

<P><STRONG><a name="[16b]"></a>OUTLINED_FUNCTION_11</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_qspi.o(.text.OUTLINED_FUNCTION_11))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
</UL>

<P><STRONG><a name="[163]"></a>OUTLINED_FUNCTION_13</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_qspi.o(.text.OUTLINED_FUNCTION_13))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
</UL>

<P><STRONG><a name="[17e]"></a>OUTLINED_FUNCTION_15</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_qspi.o(.text.OUTLINED_FUNCTION_15))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_15 &rArr; QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; rte_get_tick_ms &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
</UL>

<P><STRONG><a name="[166]"></a>OUTLINED_FUNCTION_16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_qspi.o(.text.OUTLINED_FUNCTION_16))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
</UL>

<P><STRONG><a name="[16e]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32h7xx_hal_qspi.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
</UL>

<P><STRONG><a name="[162]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_qspi.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_4 &rArr; HAL_GetTick &rArr; rte_get_tick_ms &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
</UL>

<P><STRONG><a name="[16a]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32h7xx_hal_qspi.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
</UL>

<P><STRONG><a name="[180]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_qspi.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
</UL>

<P><STRONG><a name="[17f]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal_qspi.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_9 &rArr; QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; rte_get_tick_ms &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
</UL>

<P><STRONG><a name="[165]"></a>QSPI_Config</STRONG> (Thumb, 400 bytes, Stack size 32 bytes, stm32h7xx_hal_qspi.o(.text.QSPI_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = QSPI_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
</UL>

<P><STRONG><a name="[aa]"></a>QSPI_DMAAbortCplt</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32h7xx_hal_qspi.o(.text.QSPI_DMAAbortCplt))
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_qspi.o(.text.OUTLINED_FUNCTION_1)
</UL>
<P><STRONG><a name="[164]"></a>QSPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, stm32h7xx_hal_qspi.o(.text.QSPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; rte_get_tick_ms &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
</UL>

<P><STRONG><a name="[1a8]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; HAL_GetTick &rArr; rte_get_tick_ms &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[1a4]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[1a9]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[1ac]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[1a2]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>

<P><STRONG><a name="[1a5]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[1ab]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[1a1]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[1a0]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[18e]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
</UL>

<P><STRONG><a name="[199]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[19d]"></a>OUTLINED_FUNCTION_11</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_11))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OUTLINED_FUNCTION_11 &rArr; RCCEx_PLL3_Config &rArr; HAL_GetTick &rArr; rte_get_tick_ms &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[197]"></a>OUTLINED_FUNCTION_12</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_12))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OUTLINED_FUNCTION_12 &rArr; RCCEx_PLL3_Config &rArr; HAL_GetTick &rArr; rte_get_tick_ms &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[185]"></a>OUTLINED_FUNCTION_13</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_13))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
</UL>

<P><STRONG><a name="[19c]"></a>OUTLINED_FUNCTION_14</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_14))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OUTLINED_FUNCTION_14 &rArr; RCCEx_PLL2_Config &rArr; HAL_GetTick &rArr; rte_get_tick_ms &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[187]"></a>OUTLINED_FUNCTION_15</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_15))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
</UL>

<P><STRONG><a name="[266]"></a>OUTLINED_FUNCTION_16</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_16))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
</UL>

<P><STRONG><a name="[193]"></a>OUTLINED_FUNCTION_17</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_17))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OUTLINED_FUNCTION_17 &rArr; RCCEx_PLL2_Config &rArr; HAL_GetTick &rArr; rte_get_tick_ms &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[19a]"></a>OUTLINED_FUNCTION_18</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_18))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[190]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
</UL>

<P><STRONG><a name="[19b]"></a>OUTLINED_FUNCTION_20</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_20))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[195]"></a>OUTLINED_FUNCTION_21</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_21))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[226]"></a>OUTLINED_FUNCTION_22</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_22))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_22 &rArr; HAL_GetTick &rArr; rte_get_tick_ms &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
</UL>

<P><STRONG><a name="[19e]"></a>OUTLINED_FUNCTION_23</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_23))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[198]"></a>OUTLINED_FUNCTION_24</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_24))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[18c]"></a>OUTLINED_FUNCTION_25</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_25))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
</UL>

<P><STRONG><a name="[18a]"></a>OUTLINED_FUNCTION_26</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_26))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
</UL>

<P><STRONG><a name="[18b]"></a>OUTLINED_FUNCTION_27</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_27))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
</UL>

<P><STRONG><a name="[189]"></a>OUTLINED_FUNCTION_28</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_28))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
</UL>

<P><STRONG><a name="[18d]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
</UL>

<P><STRONG><a name="[18f]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
</UL>

<P><STRONG><a name="[267]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
</UL>

<P><STRONG><a name="[191]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
</UL>

<P><STRONG><a name="[194]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OUTLINED_FUNCTION_7 &rArr; RCCEx_PLL3_Config &rArr; HAL_GetTick &rArr; rte_get_tick_ms &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[196]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OUTLINED_FUNCTION_8 &rArr; RCCEx_PLL2_Config &rArr; HAL_GetTick &rArr; rte_get_tick_ms &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[188]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
</UL>

<P><STRONG><a name="[20e]"></a>RCCEx_PLL2_Config</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, stm32h7xx_hal_rcc_ex.o(.text.RCCEx_PLL2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RCCEx_PLL2_Config &rArr; HAL_GetTick &rArr; rte_get_tick_ms &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_22
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_16
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_17
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
</UL>

<P><STRONG><a name="[208]"></a>RCCEx_PLL3_Config</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, stm32h7xx_hal_rcc_ex.o(.text.RCCEx_PLL3_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RCCEx_PLL3_Config &rArr; HAL_GetTick &rArr; rte_get_tick_ms &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_22
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_16
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
</UL>

<P><STRONG><a name="[1cd]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1f8]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; HAL_UARTEx_RxEventCallback &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
</UL>

<P><STRONG><a name="[26e]"></a>OUTLINED_FUNCTION_10</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_10))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
</UL>

<P><STRONG><a name="[1bc]"></a>OUTLINED_FUNCTION_11</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_11))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceive_IT
</UL>

<P><STRONG><a name="[26f]"></a>OUTLINED_FUNCTION_12</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_12))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
</UL>

<P><STRONG><a name="[27c]"></a>OUTLINED_FUNCTION_13</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_13))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[1c0]"></a>OUTLINED_FUNCTION_15</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_15))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortTransmit_IT
</UL>

<P><STRONG><a name="[1c4]"></a>OUTLINED_FUNCTION_16</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_16))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[278]"></a>OUTLINED_FUNCTION_17</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_17))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[275]"></a>OUTLINED_FUNCTION_19</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_19))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
</UL>

<P><STRONG><a name="[274]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
</UL>

<P><STRONG><a name="[27b]"></a>OUTLINED_FUNCTION_20</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_20))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxISR_8BIT_FIFOEN
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxISR_16BIT_FIFOEN
</UL>

<P><STRONG><a name="[272]"></a>OUTLINED_FUNCTION_21</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_21))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
</UL>

<P><STRONG><a name="[271]"></a>OUTLINED_FUNCTION_22</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_22))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
</UL>

<P><STRONG><a name="[270]"></a>OUTLINED_FUNCTION_24</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_24))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
</UL>

<P><STRONG><a name="[27a]"></a>OUTLINED_FUNCTION_25</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_25))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxISR_8BIT_FIFOEN
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxISR_16BIT_FIFOEN
</UL>

<P><STRONG><a name="[22d]"></a>OUTLINED_FUNCTION_26</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_26))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_26 &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick &rArr; rte_get_tick_ms &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[1d6]"></a>OUTLINED_FUNCTION_27</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_27))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_27 &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick &rArr; rte_get_tick_ms &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[1bb]"></a>OUTLINED_FUNCTION_28</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_28))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceive_IT
</UL>

<P><STRONG><a name="[26d]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
</UL>

<P><STRONG><a name="[26c]"></a>OUTLINED_FUNCTION_30</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_30))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
</UL>

<P><STRONG><a name="[276]"></a>OUTLINED_FUNCTION_31</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_31))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
</UL>

<P><STRONG><a name="[1cf]"></a>OUTLINED_FUNCTION_33</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_33))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[236]"></a>OUTLINED_FUNCTION_34</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_34))
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
</UL>

<P><STRONG><a name="[1ce]"></a>OUTLINED_FUNCTION_35</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_35))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_35 &rArr; UART_AdvFeatureConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1d8]"></a>OUTLINED_FUNCTION_36</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_36))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_DMA
</UL>

<P><STRONG><a name="[273]"></a>OUTLINED_FUNCTION_37</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_37))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
</UL>

<P><STRONG><a name="[1cc]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_4 &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; OUTLINED_FUNCTION_8 &rArr; RCCEx_PLL2_Config &rArr; HAL_GetTick &rArr; rte_get_tick_ms &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1bf]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortTransmit_IT
</UL>

<P><STRONG><a name="[1ca]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
</UL>

<P><STRONG><a name="[1d0]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[279]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxISR_8BIT
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxISR_16BIT
</UL>

<P><STRONG><a name="[a2]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.UART_DMAAbortOnError))
<BR><BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[a3]"></a>UART_DMAError</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(.text.UART_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
<LI> stm32h7xx_hal_uart.o(.text.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[ae]"></a>UART_DMAReceiveCplt</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.UART_DMAReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_DMAReceiveCplt &rArr; HAL_UARTEx_RxEventCallback &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[af]"></a>UART_DMARxHalfCplt</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.UART_DMARxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_DMARxHalfCplt &rArr; HAL_UARTEx_RxEventCallback &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[a0]"></a>UART_DMARxOnlyAbortCallback</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.UART_DMARxOnlyAbortCallback))
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceiveCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text.HAL_UART_AbortReceive_IT)
</UL>
<P><STRONG><a name="[a4]"></a>UART_DMATransmitCplt</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.UART_DMATransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_DMATransmitCplt &rArr; HAL_UART_TxCpltCallback &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[a5]"></a>UART_DMATxHalfCplt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.UART_DMATxHalfCplt))
<BR><BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[a1]"></a>UART_DMATxOnlyAbortCallback</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.UART_DMATxOnlyAbortCallback))
<BR><BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortTransmitCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text.HAL_UART_AbortTransmit_IT)
</UL>
<P><STRONG><a name="[1c3]"></a>UART_EndRxTransfer</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[269]"></a>UART_EndTxTransfer</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.UART_EndTxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[ac]"></a>UART_RxISR_16BIT</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(.text.UART_RxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART_RxISR_16BIT &rArr; OUTLINED_FUNCTION_1 &rArr; HAL_UARTEx_RxEventCallback &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_34
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_30
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32h7xx_hal_uart.o(.text.UART_Start_Receive_IT)
<LI> stm32h7xx_hal_uart.o(.text.UART_RxISR_16BIT_FIFOEN)
</UL>
<P><STRONG><a name="[b1]"></a>UART_RxISR_16BIT_FIFOEN</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, stm32h7xx_hal_uart.o(.text.UART_RxISR_16BIT_FIFOEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UART_RxISR_16BIT_FIFOEN &rArr; OUTLINED_FUNCTION_1 &rArr; HAL_UARTEx_RxEventCallback &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_37
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_34
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_24
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_22
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_21
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_19
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[ad]"></a>UART_RxISR_8BIT</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(.text.UART_RxISR_8BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART_RxISR_8BIT &rArr; OUTLINED_FUNCTION_1 &rArr; HAL_UARTEx_RxEventCallback &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_37
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_34
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_31
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_30
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32h7xx_hal_uart.o(.text.UART_Start_Receive_IT)
<LI> stm32h7xx_hal_uart.o(.text.UART_RxISR_8BIT_FIFOEN)
</UL>
<P><STRONG><a name="[b0]"></a>UART_RxISR_8BIT_FIFOEN</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, stm32h7xx_hal_uart.o(.text.UART_RxISR_8BIT_FIFOEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UART_RxISR_8BIT_FIFOEN &rArr; OUTLINED_FUNCTION_1 &rArr; HAL_UARTEx_RxEventCallback &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_37
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_34
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_31
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_24
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_22
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_21
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_19
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[a9]"></a>UART_TxISR_16BIT</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.UART_TxISR_16BIT))
<BR><BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit_IT)
</UL>
<P><STRONG><a name="[a8]"></a>UART_TxISR_16BIT_FIFOEN</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(.text.UART_TxISR_16BIT_FIFOEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_TxISR_16BIT_FIFOEN
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_25
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_20
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit_IT)
</UL>
<P><STRONG><a name="[a7]"></a>UART_TxISR_8BIT</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.UART_TxISR_8BIT))
<BR><BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit_IT)
</UL>
<P><STRONG><a name="[a6]"></a>UART_TxISR_8BIT_FIFOEN</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(.text.UART_TxISR_8BIT_FIFOEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_TxISR_8BIT_FIFOEN
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_25
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_20
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit_IT)
</UL>
<P><STRONG><a name="[1b6]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32h7xx_hal_uart_ex.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
</UL>

<P><STRONG><a name="[1af]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32h7xx_hal_uart_ex.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle_IT
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle_DMA
</UL>

<P><STRONG><a name="[1b8]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32h7xx_hal_uart_ex.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
</UL>

<P><STRONG><a name="[1b5]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_uart_ex.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
</UL>

<P><STRONG><a name="[1b7]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_uart_ex.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_4 &rArr; UARTEx_SetNbDataToProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
</UL>

<P><STRONG><a name="[23c]"></a>UARTEx_SetNbDataToProcess</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32h7xx_hal_uart_ex.o(.text.UARTEx_SetNbDataToProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>

<P><STRONG><a name="[1e4]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fdb.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_init_ex
</UL>

<P><STRONG><a name="[286]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fdb.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_init_ex
</UL>

<P><STRONG><a name="[2d8]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fdb_kvdb.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_set_blob
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_get_blob
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_info
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_kv_blob
</UL>

<P><STRONG><a name="[1f9]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdb_kvdb.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_kv_load
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_kv
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gc
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_kv
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_kv_blob
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_recovery_kv_cb
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_kv
</UL>

<P><STRONG><a name="[351]"></a>OUTLINED_FUNCTION_10</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fdb_kvdb.o(.text.OUTLINED_FUNCTION_10))
<BR><BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_kv
</UL>

<P><STRONG><a name="[304]"></a>OUTLINED_FUNCTION_11</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fdb_kvdb.o(.text.OUTLINED_FUNCTION_11))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kvdb_init
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_kv
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
</UL>

<P><STRONG><a name="[2d9]"></a>OUTLINED_FUNCTION_12</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fdb_kvdb.o(.text.OUTLINED_FUNCTION_12))
<BR><BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_kv_blob
</UL>

<P><STRONG><a name="[2dd]"></a>OUTLINED_FUNCTION_13</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fdb_kvdb.o(.text.OUTLINED_FUNCTION_13))
<BR><BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_kv
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_kv
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_kv_blob
</UL>

<P><STRONG><a name="[2ca]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fdb_kvdb.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kvdb_init
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_kv
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sec_hdr_cb
</UL>

<P><STRONG><a name="[306]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fdb_kvdb.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kvdb_init
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_kv
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
</UL>

<P><STRONG><a name="[301]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fdb_kvdb.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_set_blob
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_get_blob
</UL>

<P><STRONG><a name="[305]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fdb_kvdb.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kvdb_init
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_kv
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
</UL>

<P><STRONG><a name="[24f]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fdb_kvdb.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_7 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_info
</UL>

<P><STRONG><a name="[258]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fdb_kvdb.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_8 &rArr; sector_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; OUTLINED_FUNCTION_10 &rArr; fal_flash_device_find &rArr; OUTLINED_FUNCTION_1 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_iterator
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_kv_load
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_kv
</UL>

<P><STRONG><a name="[25f]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fdb_kvdb.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_9 &rArr; del_kv &rArr; find_kv &rArr; find_kv_no_cache &rArr; kv_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; OUTLINED_FUNCTION_10 &rArr; fal_flash_device_find &rArr; OUTLINED_FUNCTION_1 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_kv
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_set_blob
</UL>

<P><STRONG><a name="[2b7]"></a>align_write</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, fdb_kvdb.o(.text.align_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = align_write &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; OUTLINED_FUNCTION_10 &rArr; fal_flash_device_find &rArr; OUTLINED_FUNCTION_1 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_kv_blob
</UL>

<P><STRONG><a name="[2b8]"></a>alloc_kv</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, fdb_kvdb.o(.text.alloc_kv))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = alloc_kv &rArr; sector_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; OUTLINED_FUNCTION_10 &rArr; fal_flash_device_find &rArr; OUTLINED_FUNCTION_1 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_iterator
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_kv
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_kv
</UL>

<P><STRONG><a name="[b6]"></a>alloc_kv_cb</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, fdb_kvdb.o(.text.alloc_kv_cb))
<BR>[Address Reference Count : 1]<UL><LI> fdb_kvdb.o(.text.alloc_kv)
</UL>
<P><STRONG><a name="[b3]"></a>check_and_recovery_gc_cb</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fdb_kvdb.o(.text.check_and_recovery_gc_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = check_and_recovery_gc_cb &rArr; gc_collect &rArr; OUTLINED_FUNCTION_8 &rArr; sector_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; OUTLINED_FUNCTION_10 &rArr; fal_flash_device_find &rArr; OUTLINED_FUNCTION_1 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fdb_kvdb.o(.text._fdb_kv_load)
</UL>
<P><STRONG><a name="[b4]"></a>check_and_recovery_kv_cb</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, fdb_kvdb.o(.text.check_and_recovery_kv_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384 + Unknown Stack Size
<LI>Call Chain = check_and_recovery_kv_cb &rArr; move_kv &rArr; del_kv &rArr; find_kv &rArr; find_kv_no_cache &rArr; kv_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; OUTLINED_FUNCTION_10 &rArr; fal_flash_device_find &rArr; OUTLINED_FUNCTION_1 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_write_status
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_kv_cache
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_kv
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fdb_kvdb.o(.text._fdb_kv_load)
</UL>
<P><STRONG><a name="[b2]"></a>check_sec_hdr_cb</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, fdb_kvdb.o(.text.check_sec_hdr_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = check_sec_hdr_cb &rArr; format_sector &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; OUTLINED_FUNCTION_10 &rArr; fal_flash_device_find &rArr; OUTLINED_FUNCTION_1 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fdb_kvdb.o(.text._fdb_kv_load)
</UL>
<P><STRONG><a name="[2d7]"></a>create_kv_blob</STRONG> (Thumb, 456 bytes, Stack size 80 bytes, fdb_kvdb.o(.text.create_kv_blob))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040 + Unknown Stack Size
<LI>Call Chain = create_kv_blob &rArr; new_kv &rArr; gc_collect &rArr; OUTLINED_FUNCTION_8 &rArr; sector_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; OUTLINED_FUNCTION_10 &rArr; fal_flash_device_find &rArr; OUTLINED_FUNCTION_1 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_write_status
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_write
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sector_cache
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sec_status
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_kv_cache
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_kv
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_write
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_set_blob
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_set_default
</UL>

<P><STRONG><a name="[260]"></a>del_kv</STRONG> (Thumb, 228 bytes, Stack size 120 bytes, fdb_kvdb.o(.text.del_kv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104 + Unknown Stack Size
<LI>Call Chain = del_kv &rArr; find_kv &rArr; find_kv_no_cache &rArr; kv_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; OUTLINED_FUNCTION_10 &rArr; fal_flash_device_find &rArr; OUTLINED_FUNCTION_1 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_write_status
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_read_status
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_kv_cache
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_kv
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_set_blob
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_kv
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
</UL>

<P><STRONG><a name="[c8]"></a>do_gc</STRONG> (Thumb, 226 bytes, Stack size 144 bytes, fdb_kvdb.o(.text.do_gc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488 + Unknown Stack Size
<LI>Call Chain = do_gc &rArr; move_kv &rArr; del_kv &rArr; find_kv &rArr; find_kv_no_cache &rArr; kv_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; OUTLINED_FUNCTION_10 &rArr; fal_flash_device_find &rArr; OUTLINED_FUNCTION_1 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_write_status
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_kv
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_kv
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_kv_addr
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fdb_kvdb.o(.text.gc_collect)
</UL>
<P><STRONG><a name="[2de]"></a>find_kv</STRONG> (Thumb, 180 bytes, Stack size 104 bytes, fdb_kvdb.o(.text.find_kv))
<BR><BR>[Stack]<UL><LI>Max Depth = 984 + Unknown Stack Size
<LI>Call Chain = find_kv &rArr; find_kv_no_cache &rArr; kv_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; OUTLINED_FUNCTION_10 &rArr; fal_flash_device_find &rArr; OUTLINED_FUNCTION_1 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_calc_crc32
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_read
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_kv_cache
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_kv
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_kv_no_cache
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_set_blob
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_get_blob
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_kv
</UL>

<P><STRONG><a name="[c6]"></a>find_kv_cb</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fdb_kvdb.o(.text.find_kv_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = find_kv_cb &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fdb_kvdb.o(.text.find_kv_no_cache)
</UL>
<P><STRONG><a name="[307]"></a>find_kv_no_cache</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fdb_kvdb.o(.text.find_kv_no_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = find_kv_no_cache &rArr; kv_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; OUTLINED_FUNCTION_10 &rArr; fal_flash_device_find &rArr; OUTLINED_FUNCTION_1 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_iterator
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_kv
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_kv
</UL>

<P><STRONG><a name="[2cb]"></a>format_sector</STRONG> (Thumb, 182 bytes, Stack size 64 bytes, fdb_kvdb.o(.text.format_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = format_sector &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; OUTLINED_FUNCTION_10 &rArr; fal_flash_device_find &rArr; OUTLINED_FUNCTION_1 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_set_status
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_write
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_erase
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sector_cache
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_set_default
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gc
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sec_hdr_cb
</UL>

<P><STRONG><a name="[c7]"></a>gc_check_cb</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fdb_kvdb.o(.text.gc_check_cb))
<BR>[Address Reference Count : 1]<UL><LI> fdb_kvdb.o(.text.gc_collect)
</UL>
<P><STRONG><a name="[28d]"></a>gc_collect</STRONG> (Thumb, 116 bytes, Stack size 64 bytes, fdb_kvdb.o(.text.gc_collect))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = gc_collect &rArr; OUTLINED_FUNCTION_8 &rArr; sector_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; OUTLINED_FUNCTION_10 &rArr; fal_flash_device_find &rArr; OUTLINED_FUNCTION_1 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_set_blob
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_kv_load
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_kv
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_recovery_gc_cb
</UL>

<P><STRONG><a name="[2e0]"></a>get_next_kv_addr</STRONG> (Thumb, 200 bytes, Stack size 80 bytes, fdb_kvdb.o(.text.get_next_kv_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = get_next_kv_addr &rArr; _fdb_flash_read &rArr; fal_partition_read &rArr; OUTLINED_FUNCTION_10 &rArr; fal_flash_device_find &rArr; OUTLINED_FUNCTION_1 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_read
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sector_from_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_info
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_iterator
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gc
</UL>

<P><STRONG><a name="[342]"></a>get_next_sector_addr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fdb_kvdb.o(.text.get_next_sector_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_next_sector_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_iterator
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_iterator
</UL>

<P><STRONG><a name="[320]"></a>get_sector_from_cache</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fdb_kvdb.o(.text.get_sector_from_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_sector_from_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_info
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_kv_addr
</UL>

<P><STRONG><a name="[28c]"></a>kv_iterator</STRONG> (Thumb, 114 bytes, Stack size 56 bytes, fdb_kvdb.o(.text.kv_iterator))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = kv_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; OUTLINED_FUNCTION_10 &rArr; fal_flash_device_find &rArr; OUTLINED_FUNCTION_1 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_info
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_kv
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_sector_addr
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_kv_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_kv_load
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_kv_no_cache
</UL>

<P><STRONG><a name="[2c8]"></a>move_kv</STRONG> (Thumb, 342 bytes, Stack size 240 bytes, fdb_kvdb.o(.text.move_kv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344 + Unknown Stack Size
<LI>Call Chain = move_kv &rArr; del_kv &rArr; find_kv &rArr; find_kv_no_cache &rArr; kv_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; OUTLINED_FUNCTION_10 &rArr; fal_flash_device_find &rArr; OUTLINED_FUNCTION_1 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_write_status
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_write
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_read
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sector_cache
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sec_status
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_kv_cache
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_kv_no_cache
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_kv
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_kv
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gc
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_recovery_kv_cb
</UL>

<P><STRONG><a name="[2da]"></a>new_kv</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, fdb_kvdb.o(.text.new_kv))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = new_kv &rArr; gc_collect &rArr; OUTLINED_FUNCTION_8 &rArr; sector_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; OUTLINED_FUNCTION_10 &rArr; fal_flash_device_find &rArr; OUTLINED_FUNCTION_1 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_kv
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_set_blob
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_kv_blob
</UL>

<P><STRONG><a name="[2df]"></a>read_kv</STRONG> (Thumb, 356 bytes, Stack size 112 bytes, fdb_kvdb.o(.text.read_kv))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; OUTLINED_FUNCTION_10 &rArr; fal_flash_device_find &rArr; OUTLINED_FUNCTION_1 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_calc_crc32
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_write_status
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_get_status
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_read
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_info
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_iterator
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_kv
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gc
</UL>

<P><STRONG><a name="[341]"></a>read_sector_info</STRONG> (Thumb, 458 bytes, Stack size 168 bytes, fdb_kvdb.o(.text.read_sector_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; OUTLINED_FUNCTION_10 &rArr; fal_flash_device_find &rArr; OUTLINED_FUNCTION_1 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_get_status
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_read
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_continue_ff_addr
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sector_cache
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_kv
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sector_from_cache
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_kv_addr
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_iterator
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_iterator
</UL>

<P><STRONG><a name="[259]"></a>sector_iterator</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, fdb_kvdb.o(.text.sector_iterator))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = sector_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; OUTLINED_FUNCTION_10 &rArr; fal_flash_device_find &rArr; OUTLINED_FUNCTION_1 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_info
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_sector_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_kv_load
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_kv
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
</UL>

<P><STRONG><a name="[b5]"></a>sector_statistics_cb</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fdb_kvdb.o(.text.sector_statistics_cb))
<BR>[Address Reference Count : 1]<UL><LI> fdb_kvdb.o(.text.alloc_kv)
</UL>
<P><STRONG><a name="[2c9]"></a>update_kv_cache</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, fdb_kvdb.o(.text.update_kv_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = update_kv_cache &rArr; fdb_calc_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_calc_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_kv
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_kv
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_kv
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_kv_blob
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_recovery_kv_cb
</UL>

<P><STRONG><a name="[2db]"></a>update_sec_status</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, fdb_kvdb.o(.text.update_sec_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = update_sec_status &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; OUTLINED_FUNCTION_10 &rArr; fal_flash_device_find &rArr; OUTLINED_FUNCTION_1 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_write_status
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sector_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_kv
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_kv_blob
</UL>

<P><STRONG><a name="[2dc]"></a>update_sector_cache</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, fdb_kvdb.o(.text.update_sector_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_sector_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sec_status
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_info
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_kv
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_kv_blob
</UL>

<P><STRONG><a name="[1e5]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fdb_utils.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_write_status
</UL>

<P><STRONG><a name="[1e6]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fal_flash.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_init
</UL>

<P><STRONG><a name="[1fa]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fal_flash.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_device_find
</UL>

<P><STRONG><a name="[2f6]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, fal_partition.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
</UL>

<P><STRONG><a name="[1fb]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fal_partition.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
</UL>

<P><STRONG><a name="[204]"></a>OUTLINED_FUNCTION_10</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fal_partition.o(.text.OUTLINED_FUNCTION_10))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_10 &rArr; fal_flash_device_find &rArr; OUTLINED_FUNCTION_1 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_device_find
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
</UL>

<P><STRONG><a name="[2f8]"></a>OUTLINED_FUNCTION_11</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fal_partition.o(.text.OUTLINED_FUNCTION_11))
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
</UL>

<P><STRONG><a name="[2fa]"></a>OUTLINED_FUNCTION_12</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fal_partition.o(.text.OUTLINED_FUNCTION_12))
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
</UL>

<P><STRONG><a name="[2f7]"></a>OUTLINED_FUNCTION_13</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fal_partition.o(.text.OUTLINED_FUNCTION_13))
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
</UL>

<P><STRONG><a name="[2f9]"></a>OUTLINED_FUNCTION_14</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fal_partition.o(.text.OUTLINED_FUNCTION_14))
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
</UL>

<P><STRONG><a name="[2f3]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fal_partition.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
</UL>

<P><STRONG><a name="[231]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fal_partition.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
</UL>

<P><STRONG><a name="[2f1]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fal_partition.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_find
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
</UL>

<P><STRONG><a name="[2f2]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fal_partition.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
</UL>

<P><STRONG><a name="[2fb]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fal_partition.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
</UL>

<P><STRONG><a name="[2f0]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fal_partition.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_find
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
</UL>

<P><STRONG><a name="[29b]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_init
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_page_program
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_page_program
</UL>

<P><STRONG><a name="[29c]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_sector_erase_4k
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_page_program
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_fast_read
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_64k
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_32k
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_page_program
</UL>

<P><STRONG><a name="[419]"></a>OUTLINED_FUNCTION_100</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_100))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write
</UL>

<P><STRONG><a name="[2aa]"></a>OUTLINED_FUNCTION_101</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_101))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_page_program
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_page_program
</UL>

<P><STRONG><a name="[206]"></a>OUTLINED_FUNCTION_102</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_102))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OUTLINED_FUNCTION_102 &rArr; _w25qxx_qspi_write_read
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_qspi_write_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_sector_erase_4k
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_64k
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_32k
</UL>

<P><STRONG><a name="[3ee]"></a>OUTLINED_FUNCTION_105</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_105))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_sector_erase_4k
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_64k
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_32k
</UL>

<P><STRONG><a name="[3e7]"></a>OUTLINED_FUNCTION_107</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_107))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_sector_erase_4k
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_64k
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_32k
</UL>

<P><STRONG><a name="[3e5]"></a>OUTLINED_FUNCTION_108</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_108))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_sector_erase_4k
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_64k
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_32k
</UL>

<P><STRONG><a name="[2a0]"></a>OUTLINED_FUNCTION_109</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_109))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_page_program
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_page_program
</UL>

<P><STRONG><a name="[41b]"></a>OUTLINED_FUNCTION_110</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_110))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write
</UL>

<P><STRONG><a name="[2a4]"></a>OUTLINED_FUNCTION_111</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_111))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_page_program
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_page_program
</UL>

<P><STRONG><a name="[3fa]"></a>OUTLINED_FUNCTION_112</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_112))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_fast_read
</UL>

<P><STRONG><a name="[41c]"></a>OUTLINED_FUNCTION_113</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_113))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write
</UL>

<P><STRONG><a name="[3ff]"></a>OUTLINED_FUNCTION_116</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_116))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_fast_read
</UL>

<P><STRONG><a name="[209]"></a>OUTLINED_FUNCTION_117</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_117))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OUTLINED_FUNCTION_117 &rArr; _w25qxx_qspi_write_read
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_qspi_write_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_sector_erase_4k
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_64k
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_32k
</UL>

<P><STRONG><a name="[3e2]"></a>OUTLINED_FUNCTION_118</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_118))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_sector_erase_4k
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_64k
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_32k
</UL>

<P><STRONG><a name="[3f6]"></a>OUTLINED_FUNCTION_119</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_119))
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_init
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_deinit
</UL>

<P><STRONG><a name="[3fe]"></a>OUTLINED_FUNCTION_121</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_121))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_fast_read
</UL>

<P><STRONG><a name="[2a3]"></a>OUTLINED_FUNCTION_122</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_122))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_page_program
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_page_program
</UL>

<P><STRONG><a name="[20a]"></a>OUTLINED_FUNCTION_124</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_124))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OUTLINED_FUNCTION_124 &rArr; _w25qxx_qspi_write_read
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_qspi_write_read
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write
</UL>

<P><STRONG><a name="[29e]"></a>OUTLINED_FUNCTION_125</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_125))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_page_program
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_page_program
</UL>

<P><STRONG><a name="[416]"></a>OUTLINED_FUNCTION_127</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_127))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_set_read_parameters
</UL>

<P><STRONG><a name="[408]"></a>OUTLINED_FUNCTION_129</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_129))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_page_program
</UL>

<P><STRONG><a name="[20b]"></a>OUTLINED_FUNCTION_13</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_13))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OUTLINED_FUNCTION_13 &rArr; _w25qxx_qspi_write_read
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_qspi_write_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_sector_erase_4k
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_page_program
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_64k
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_32k
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_page_program
</UL>

<P><STRONG><a name="[2a2]"></a>OUTLINED_FUNCTION_130</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_130))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_page_program
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_page_program
</UL>

<P><STRONG><a name="[400]"></a>OUTLINED_FUNCTION_134</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_134))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_fast_read
</UL>

<P><STRONG><a name="[3fd]"></a>OUTLINED_FUNCTION_135</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_135))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_fast_read
</UL>

<P><STRONG><a name="[3e6]"></a>OUTLINED_FUNCTION_136</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_136))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_sector_erase_4k
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_64k
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_32k
</UL>

<P><STRONG><a name="[3fb]"></a>OUTLINED_FUNCTION_139</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_139))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_fast_read
</UL>

<P><STRONG><a name="[20f]"></a>OUTLINED_FUNCTION_14</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_14))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OUTLINED_FUNCTION_14 &rArr; _w25qxx_qspi_write_read
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_qspi_write_read
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_deinit
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_page_program
</UL>

<P><STRONG><a name="[29f]"></a>OUTLINED_FUNCTION_140</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_140))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_page_program
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_page_program
</UL>

<P><STRONG><a name="[2ac]"></a>OUTLINED_FUNCTION_142</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_142))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_page_program
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_page_program
</UL>

<P><STRONG><a name="[2ad]"></a>OUTLINED_FUNCTION_143</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_143))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_page_program
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_page_program
</UL>

<P><STRONG><a name="[41e]"></a>OUTLINED_FUNCTION_145</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_145))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write
</UL>

<P><STRONG><a name="[421]"></a>OUTLINED_FUNCTION_146</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_146))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write
</UL>

<P><STRONG><a name="[2a9]"></a>OUTLINED_FUNCTION_147</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_147))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_page_program
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_page_program
</UL>

<P><STRONG><a name="[3f5]"></a>OUTLINED_FUNCTION_149</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_149))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_deinit
</UL>

<P><STRONG><a name="[3f0]"></a>OUTLINED_FUNCTION_15</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_15))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_sector_erase_4k
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_page_program
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_fast_read
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_64k
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_32k
</UL>

<P><STRONG><a name="[404]"></a>OUTLINED_FUNCTION_152</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_152))
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_init
</UL>

<P><STRONG><a name="[2a7]"></a>OUTLINED_FUNCTION_153</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_153))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_page_program
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_page_program
</UL>

<P><STRONG><a name="[3f8]"></a>OUTLINED_FUNCTION_155</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_155))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_fast_read
</UL>

<P><STRONG><a name="[3f4]"></a>OUTLINED_FUNCTION_16</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_16))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_set_read_parameters
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_deinit
</UL>

<P><STRONG><a name="[2a1]"></a>OUTLINED_FUNCTION_18</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_18))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_sector_erase_4k
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_page_program
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_fast_read
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_64k
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_32k
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_page_program
</UL>

<P><STRONG><a name="[218]"></a>OUTLINED_FUNCTION_19</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_19))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OUTLINED_FUNCTION_19 &rArr; _w25qxx_qspi_write_read
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_qspi_write_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_sector_erase_4k
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_page_program
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_64k
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_32k
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_page_program
</UL>

<P><STRONG><a name="[3e1]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_sector_erase_4k
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_64k
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_32k
</UL>

<P><STRONG><a name="[229]"></a>OUTLINED_FUNCTION_23</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_23))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OUTLINED_FUNCTION_23 &rArr; _w25qxx_qspi_write_read
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_qspi_write_read
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_init
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_set_read_parameters
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_sector_erase_4k
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_page_program
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_fast_read
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_64k
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_32k
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_page_program
</UL>

<P><STRONG><a name="[22b]"></a>OUTLINED_FUNCTION_24</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_24))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_24 &rArr; _w25qxx_spi_write_read
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_spi_write_read
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_init
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_sector_erase_4k
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_page_program
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_fast_read
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_deinit
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_64k
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_32k
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_page_program
</UL>

<P><STRONG><a name="[2a8]"></a>OUTLINED_FUNCTION_25</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_25))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_sector_erase_4k
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_page_program
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_fast_read
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_64k
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_32k
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_page_program
</UL>

<P><STRONG><a name="[41d]"></a>OUTLINED_FUNCTION_28</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_28))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write
</UL>

<P><STRONG><a name="[232]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; _w25qxx_qspi_write_read
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_qspi_write_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_sector_erase_4k
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_page_program
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_64k
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_32k
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_page_program
</UL>

<P><STRONG><a name="[2b0]"></a>OUTLINED_FUNCTION_30</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_30))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_sector_erase_4k
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_page_program
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_64k
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_32k
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_page_program
</UL>

<P><STRONG><a name="[3f7]"></a>OUTLINED_FUNCTION_31</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_31))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_deinit
</UL>

<P><STRONG><a name="[3de]"></a>OUTLINED_FUNCTION_32</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_32))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_set_read_parameters
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_sector_erase_4k
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_page_program
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_fast_read
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_deinit
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_64k
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_32k
</UL>

<P><STRONG><a name="[3eb]"></a>OUTLINED_FUNCTION_33</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_33))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_sector_erase_4k
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_64k
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_32k
</UL>

<P><STRONG><a name="[41a]"></a>OUTLINED_FUNCTION_35</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_35))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write
</UL>

<P><STRONG><a name="[239]"></a>OUTLINED_FUNCTION_36</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_36))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_36 &rArr; _w25qxx_spi_write_read
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_spi_write_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_sector_erase_4k
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_64k
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_32k
</UL>

<P><STRONG><a name="[3ef]"></a>OUTLINED_FUNCTION_37</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_37))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_sector_erase_4k
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_64k
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_32k
</UL>

<P><STRONG><a name="[2a6]"></a>OUTLINED_FUNCTION_39</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_39))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_page_program
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_page_program
</UL>

<P><STRONG><a name="[3f9]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_fast_read
</UL>

<P><STRONG><a name="[417]"></a>OUTLINED_FUNCTION_42</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_42))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write
</UL>

<P><STRONG><a name="[3f1]"></a>OUTLINED_FUNCTION_43</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_43))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_sector_erase_4k
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_64k
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_32k
</UL>

<P><STRONG><a name="[402]"></a>OUTLINED_FUNCTION_44</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_44))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_fast_read
</UL>

<P><STRONG><a name="[23e]"></a>OUTLINED_FUNCTION_45</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_45))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OUTLINED_FUNCTION_45 &rArr; _w25qxx_qspi_write_read
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_qspi_write_read
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_init
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_deinit
</UL>

<P><STRONG><a name="[405]"></a>OUTLINED_FUNCTION_46</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_46))
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_init
</UL>

<P><STRONG><a name="[3f2]"></a>OUTLINED_FUNCTION_47</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_47))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_sector_erase_4k
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_64k
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_32k
</UL>

<P><STRONG><a name="[3ed]"></a>OUTLINED_FUNCTION_48</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_48))
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_init
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_sector_erase_4k
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_64k
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_32k
</UL>

<P><STRONG><a name="[23f]"></a>OUTLINED_FUNCTION_49</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_49))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OUTLINED_FUNCTION_49 &rArr; _w25qxx_qspi_write_read
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_qspi_write_read
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_fast_read
</UL>

<P><STRONG><a name="[245]"></a>OUTLINED_FUNCTION_50</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_50))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OUTLINED_FUNCTION_50 &rArr; _w25qxx_qspi_write_read
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_qspi_write_read
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_fast_read
</UL>

<P><STRONG><a name="[3e0]"></a>OUTLINED_FUNCTION_51</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_51))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_set_read_parameters
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_sector_erase_4k
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_deinit
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_64k
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_32k
</UL>

<P><STRONG><a name="[3df]"></a>OUTLINED_FUNCTION_54</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_54))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_sector_erase_4k
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_page_program
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_64k
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_32k
</UL>

<P><STRONG><a name="[403]"></a>OUTLINED_FUNCTION_55</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_55))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_fast_read
</UL>

<P><STRONG><a name="[409]"></a>OUTLINED_FUNCTION_57</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_57))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_page_program
</UL>

<P><STRONG><a name="[3fc]"></a>OUTLINED_FUNCTION_59</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_59))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_fast_read
</UL>

<P><STRONG><a name="[249]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OUTLINED_FUNCTION_6 &rArr; _w25qxx_qspi_write_read
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_qspi_write_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_sector_erase_4k
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_page_program
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_64k
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_32k
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_page_program
</UL>

<P><STRONG><a name="[418]"></a>OUTLINED_FUNCTION_60</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_60))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write
</UL>

<P><STRONG><a name="[24b]"></a>OUTLINED_FUNCTION_62</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_62))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_62 &rArr; _w25qxx_spi_write_read
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_spi_write_read
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write
</UL>

<P><STRONG><a name="[24c]"></a>OUTLINED_FUNCTION_63</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_63))
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_page_program
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_page_program
</UL>

<P><STRONG><a name="[29d]"></a>OUTLINED_FUNCTION_67</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_67))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_page_program
</UL>

<P><STRONG><a name="[250]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OUTLINED_FUNCTION_7 &rArr; _w25qxx_qspi_write_read
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_qspi_write_read
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_init
</UL>

<P><STRONG><a name="[3ea]"></a>OUTLINED_FUNCTION_70</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_70))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_sector_erase_4k
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_64k
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_32k
</UL>

<P><STRONG><a name="[3e8]"></a>OUTLINED_FUNCTION_73</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_73))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_sector_erase_4k
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_64k
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_32k
</UL>

<P><STRONG><a name="[253]"></a>OUTLINED_FUNCTION_75</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_75))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_75 &rArr; _w25qxx_spi_write_read
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_spi_write_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_sector_erase_4k
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_64k
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_32k
</UL>

<P><STRONG><a name="[406]"></a>OUTLINED_FUNCTION_78</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_78))
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_init
</UL>

<P><STRONG><a name="[254]"></a>OUTLINED_FUNCTION_79</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_79))
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_page_program
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_page_program
</UL>

<P><STRONG><a name="[25a]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OUTLINED_FUNCTION_8 &rArr; _w25qxx_qspi_write_read
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_qspi_write_read
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_page_program
</UL>

<P><STRONG><a name="[25d]"></a>OUTLINED_FUNCTION_80</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_80))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_80 &rArr; _w25qxx_spi_write_read
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_spi_write_read
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_fast_read
</UL>

<P><STRONG><a name="[25e]"></a>OUTLINED_FUNCTION_81</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_81))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_81 &rArr; _w25qxx_spi_write_read
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_spi_write_read
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_page_program
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_page_program
</UL>

<P><STRONG><a name="[2ab]"></a>OUTLINED_FUNCTION_83</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_83))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_page_program
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_page_program
</UL>

<P><STRONG><a name="[3e3]"></a>OUTLINED_FUNCTION_85</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_85))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_sector_erase_4k
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_64k
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_32k
</UL>

<P><STRONG><a name="[2a5]"></a>OUTLINED_FUNCTION_86</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_86))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_page_program
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_page_program
</UL>

<P><STRONG><a name="[2ae]"></a>OUTLINED_FUNCTION_87</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_87))
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_init
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_page_program
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_page_program
</UL>

<P><STRONG><a name="[420]"></a>OUTLINED_FUNCTION_88</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_88))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write
</UL>

<P><STRONG><a name="[261]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OUTLINED_FUNCTION_9 &rArr; _w25qxx_qspi_write_read
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_qspi_write_read
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_init
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_sector_erase_4k
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_64k
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_32k
</UL>

<P><STRONG><a name="[3ec]"></a>OUTLINED_FUNCTION_91</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_91))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_sector_erase_4k
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_64k
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_32k
</UL>

<P><STRONG><a name="[3e4]"></a>OUTLINED_FUNCTION_92</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_92))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_sector_erase_4k
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_64k
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_32k
</UL>

<P><STRONG><a name="[264]"></a>OUTLINED_FUNCTION_93</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_93))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OUTLINED_FUNCTION_93 &rArr; _w25qxx_qspi_write_read
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_qspi_write_read
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write
</UL>

<P><STRONG><a name="[2af]"></a>OUTLINED_FUNCTION_94</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_94))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_page_program
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_page_program
</UL>

<P><STRONG><a name="[3e9]"></a>OUTLINED_FUNCTION_96</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_96))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_sector_erase_4k
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_64k
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_block_erase_32k
</UL>

<P><STRONG><a name="[401]"></a>OUTLINED_FUNCTION_97</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_97))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_fast_read
</UL>

<P><STRONG><a name="[41f]"></a>OUTLINED_FUNCTION_98</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_98))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write
</UL>

<P><STRONG><a name="[265]"></a>OUTLINED_FUNCTION_99</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, driver_w25qxx.o(.text.OUTLINED_FUNCTION_99))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_99 &rArr; _w25qxx_spi_write_read
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_spi_write_read
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_page_program
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_page_program
</UL>

<P><STRONG><a name="[207]"></a>_w25qxx_qspi_write_read</STRONG> (Thumb, 68 bytes, Stack size 56 bytes, driver_w25qxx.o(.text._w25qxx_qspi_write_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _w25qxx_qspi_write_read
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_init
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_page_program
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_fast_read
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_page_program
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_93
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_50
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_49
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_45
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_23
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_19
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_124
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_117
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_102
</UL>

<P><STRONG><a name="[22c]"></a>_w25qxx_spi_write_read</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, driver_w25qxx.o(.text._w25qxx_spi_write_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _w25qxx_spi_write_read
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_99
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_81
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_80
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_75
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_62
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_36
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_24
</UL>

<P><STRONG><a name="[2b1]"></a>_w25qxx_write_no_check</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, driver_w25qxx.o(.text._w25qxx_write_no_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _w25qxx_write_no_check &rArr; _w25qxx_page_program &rArr; _w25qxx_qspi_write_read
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_w25qxx_page_program
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write
</UL>

<P><STRONG><a name="[30f]"></a>crc32</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fota_crc.o(.text.crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_step_crc
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_crc
</UL>

<P><STRONG><a name="[1e7]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ymodem.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; _rym_read_code &rArr; hal_device_read_sync &rArr; OUTLINED_FUNCTION_0 &rArr; hal_get_device &rArr; ht_get &rArr; ht_call_internal &rArr; memory_free &rArr; block_merge_next &rArr; block_absorb &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_read_code
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rym_recv_on_device
</UL>

<P><STRONG><a name="[1fc]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ymodem.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; _rym_putchar &rArr; hal_device_write_sync &rArr; OUTLINED_FUNCTION_0 &rArr; hal_get_device &rArr; ht_get &rArr; ht_call_internal &rArr; memory_free &rArr; block_merge_next &rArr; block_absorb &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rym_recv_on_device
</UL>

<P><STRONG><a name="[220]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ymodem.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; _rym_putchar &rArr; hal_device_write_sync &rArr; OUTLINED_FUNCTION_0 &rArr; hal_get_device &rArr; ht_get &rArr; ht_call_internal &rArr; memory_free &rArr; block_merge_next &rArr; block_absorb &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rym_recv_on_device
</UL>

<P><STRONG><a name="[1fd]"></a>_rym_putchar</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ymodem.o(.text._rym_putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = _rym_putchar &rArr; hal_device_write_sync &rArr; OUTLINED_FUNCTION_0 &rArr; hal_get_device &rArr; ht_get &rArr; ht_call_internal &rArr; memory_free &rArr; block_merge_next &rArr; block_absorb &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_device_write_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rym_recv_on_device
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>

<P><STRONG><a name="[1e8]"></a>_rym_read_code</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ymodem.o(.text._rym_read_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = _rym_read_code &rArr; hal_device_read_sync &rArr; OUTLINED_FUNCTION_0 &rArr; hal_get_device &rArr; ht_get &rArr; ht_call_internal &rArr; memory_free &rArr; block_merge_next &rArr; block_absorb &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_device_read_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rym_recv_on_device
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[298]"></a>_rym_read_data</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, ymodem.o(.text._rym_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = _rym_read_data &rArr; hal_device_read_async &rArr; OUTLINED_FUNCTION_0 &rArr; hal_get_device &rArr; ht_get &rArr; ht_call_internal &rArr; memory_free &rArr; block_merge_next &rArr; block_absorb &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_time_consume
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_device_read_async
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_get_tick_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rym_recv_on_device
</UL>

<P><STRONG><a name="[1e9]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fota.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_upgrade
</UL>

<P><STRONG><a name="[1fe]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fota.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_part_fw_verify
</UL>

<P><STRONG><a name="[31c]"></a>OUTLINED_FUNCTION_10</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fota.o(.text.OUTLINED_FUNCTION_10))
<BR><BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_upgrade
</UL>

<P><STRONG><a name="[3a9]"></a>OUTLINED_FUNCTION_11</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fota.o(.text.OUTLINED_FUNCTION_11))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_cmd_fota
</UL>

<P><STRONG><a name="[314]"></a>OUTLINED_FUNCTION_12</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fota.o(.text.OUTLINED_FUNCTION_12))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_part_fw_verify
</UL>

<P><STRONG><a name="[20c]"></a>OUTLINED_FUNCTION_13</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fota.o(.text.OUTLINED_FUNCTION_13))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_13 &rArr; fota_read_part &rArr; memory_free &rArr; block_merge_next &rArr; block_absorb &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_read_part
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_upgrade
</UL>

<P><STRONG><a name="[210]"></a>OUTLINED_FUNCTION_14</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fota.o(.text.OUTLINED_FUNCTION_14))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_14 &rArr; fal_partition_read &rArr; OUTLINED_FUNCTION_10 &rArr; fal_flash_device_find &rArr; OUTLINED_FUNCTION_1 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_part_fw_verify
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_cmd_fota
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_read_part
</UL>

<P><STRONG><a name="[31d]"></a>OUTLINED_FUNCTION_15</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fota.o(.text.OUTLINED_FUNCTION_15))
<BR><BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_upgrade
</UL>

<P><STRONG><a name="[213]"></a>OUTLINED_FUNCTION_16</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fota.o(.text.OUTLINED_FUNCTION_16))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_16 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_write_app_part
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_erase_app_part
</UL>

<P><STRONG><a name="[216]"></a>OUTLINED_FUNCTION_17</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fota.o(.text.OUTLINED_FUNCTION_17))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_17 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_upgrade
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_part_fw_verify
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_cmd_fota
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_erase_app_part
</UL>

<P><STRONG><a name="[217]"></a>OUTLINED_FUNCTION_18</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fota.o(.text.OUTLINED_FUNCTION_18))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = OUTLINED_FUNCTION_18 &rArr; shell_printf &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_cmd_fota
</UL>

<P><STRONG><a name="[3aa]"></a>OUTLINED_FUNCTION_19</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fota.o(.text.OUTLINED_FUNCTION_19))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_cmd_fota
</UL>

<P><STRONG><a name="[221]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fota.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_copy_version
</UL>

<P><STRONG><a name="[225]"></a>OUTLINED_FUNCTION_20</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fota.o(.text.OUTLINED_FUNCTION_20))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = OUTLINED_FUNCTION_20 &rArr; shell_printf &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_upgrade
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_cmd_fota
</UL>

<P><STRONG><a name="[30b]"></a>OUTLINED_FUNCTION_21</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fota.o(.text.OUTLINED_FUNCTION_21))
<BR><BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_upgrade
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_part_fw_verify
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_copy_version
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_cmd_fota
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_read_part
</UL>

<P><STRONG><a name="[227]"></a>OUTLINED_FUNCTION_22</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fota.o(.text.OUTLINED_FUNCTION_22))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_22 &rArr; memory_free &rArr; block_merge_next &rArr; block_absorb &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_free
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_upgrade
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_copy_version
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_cmd_fota
</UL>

<P><STRONG><a name="[22a]"></a>OUTLINED_FUNCTION_23</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fota.o(.text.OUTLINED_FUNCTION_23))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = OUTLINED_FUNCTION_23 &rArr; shell_printf &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_cmd_fota
</UL>

<P><STRONG><a name="[312]"></a>OUTLINED_FUNCTION_24</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fota.o(.text.OUTLINED_FUNCTION_24))
<BR><BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_write_app_part
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_erase_app_part
</UL>

<P><STRONG><a name="[309]"></a>OUTLINED_FUNCTION_25</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fota.o(.text.OUTLINED_FUNCTION_25))
<BR><BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_upgrade
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_check_upgrade
</UL>

<P><STRONG><a name="[311]"></a>OUTLINED_FUNCTION_26</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fota.o(.text.OUTLINED_FUNCTION_26))
<BR><BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_erase_app_part
</UL>

<P><STRONG><a name="[31f]"></a>OUTLINED_FUNCTION_27</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fota.o(.text.OUTLINED_FUNCTION_27))
<BR><BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_write_app_part
</UL>

<P><STRONG><a name="[319]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fota.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_upgrade
</UL>

<P><STRONG><a name="[316]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fota.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_part_fw_verify
</UL>

<P><STRONG><a name="[244]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fota.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_5 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_upgrade
</UL>

<P><STRONG><a name="[24a]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fota.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_6 &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_part_fw_verify
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_erase_app_part
</UL>

<P><STRONG><a name="[30e]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fota.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_copy_version
</UL>

<P><STRONG><a name="[3ab]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fota.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_cmd_fota
</UL>

<P><STRONG><a name="[31e]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fota.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_upgrade
</UL>

<P><STRONG><a name="[20d]"></a>fota_read_part</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, fota.o(.text.fota_read_part))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = fota_read_part &rArr; memory_free &rArr; block_merge_next &rArr; block_absorb &rArr; block_link_next &rArr; block_next &rArr; log_out &rArr; log_vprintf &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_free
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc_impl
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_aes_crypt_cbc
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_21
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fota_upgrade
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
</UL>

<P><STRONG><a name="[2fd]"></a>fastlz_memmove</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, fastlz.o(.text.fastlz_memmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fastlz_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fastlz2_decompress
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fastlz1_decompress
</UL>

<P><STRONG><a name="[cc]"></a>svcRtxDelay</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rtx_delay.o(.text.svcRtxDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcRtxDelay &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayStarted
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_delay.o(.text.osDelay)
</UL>
<P><STRONG><a name="[1ea]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_kernel.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; osRtxMemoryPoolInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[1ff]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_kernel.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[222]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_kernel.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[359]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_kernel.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[cd]"></a>svcRtxKernelGetState</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtx_kernel.o(.text.svcRtxKernelGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetState)
</UL>
<P><STRONG><a name="[ce]"></a>svcRtxKernelGetTickCount</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_kernel.o(.text.svcRtxKernelGetTickCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetTickCount)
</UL>
<P><STRONG><a name="[cf]"></a>svcRtxKernelInitialize</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, rtx_kernel.o(.text.svcRtxKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcRtxKernelInitialize &rArr; OUTLINED_FUNCTION_0 &rArr; osRtxMemoryPoolInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitialized
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelInitialize)
</UL>
<P><STRONG><a name="[d0]"></a>svcRtxKernelStart</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, rtx_kernel.o(.text.svcRtxKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = svcRtxKernelStart &rArr; osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Setup
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetIRQn
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Enable
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStarted
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelStart)
</UL>
<P><STRONG><a name="[27d]"></a>os_kernel_is_active</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rtx_lib.o(.text.os_kernel_is_active))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>

<P><STRONG><a name="[1ec]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rtx_mutex.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[201]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtx_mutex.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>

<P><STRONG><a name="[3c2]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_mutex.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
</UL>

<P><STRONG><a name="[3bf]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_mutex.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[23d]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtx_mutex.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[d1]"></a>svcRtxMutexAcquire</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcRtxMutexAcquire &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexNotAcquired
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquired
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquireTimeout
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquirePending
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexAcquire)
</UL>
<P><STRONG><a name="[d2]"></a>svcRtxMutexDelete</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcRtxMutexDelete &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexDestroyed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexDelete)
</UL>
<P><STRONG><a name="[d3]"></a>svcRtxMutexNew</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = svcRtxMutexNew &rArr; osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexCreated
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexNew)
</UL>
<P><STRONG><a name="[d4]"></a>svcRtxMutexRelease</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcRtxMutexRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexReleased
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquired
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexRelease)
</UL>
<P><STRONG><a name="[1ee]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rtx_semaphore.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
</UL>

<P><STRONG><a name="[202]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_semaphore.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquired
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
</UL>

<P><STRONG><a name="[223]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_semaphore.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreReleased
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
</UL>

<P><STRONG><a name="[233]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtx_semaphore.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
</UL>

<P><STRONG><a name="[396]"></a>SemaphoreTokenIncrement</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rtx_semaphore.o(.text.SemaphoreTokenIncrement))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SemaphoreTokenIncrement
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
</UL>

<P><STRONG><a name="[e3]"></a>osRtxSemaphorePostProcess</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, rtx_semaphore.o(.text.osRtxSemaphorePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osRtxSemaphorePostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquired
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.svcRtxSemaphoreNew)
</UL>
<P><STRONG><a name="[d6]"></a>svcRtxSemaphoreAcquire</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, rtx_semaphore.o(.text.svcRtxSemaphoreAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcRtxSemaphoreAcquire &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreNotAcquired
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquireTimeout
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquirePending
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.osSemaphoreAcquire)
</UL>
<P><STRONG><a name="[d7]"></a>svcRtxSemaphoreNew</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, rtx_semaphore.o(.text.svcRtxSemaphoreNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcRtxSemaphoreNew &rArr; osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreCreated
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.osSemaphoreNew)
</UL>
<P><STRONG><a name="[d8]"></a>svcRtxSemaphoreRelease</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, rtx_semaphore.o(.text.svcRtxSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcRtxSemaphoreRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenIncrement
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.osSemaphoreRelease)
</UL>
<P><STRONG><a name="[1f0]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtx_thread.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSetPriority
</UL>

<P><STRONG><a name="[3cb]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_thread.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadSetPriority
</UL>

<P><STRONG><a name="[3c7]"></a>OUTLINED_FUNCTION_11</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtx_thread.o(.text.OUTLINED_FUNCTION_11))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[375]"></a>OUTLINED_FUNCTION_14</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtx_thread.o(.text.OUTLINED_FUNCTION_14))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadBlock
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>

<P><STRONG><a name="[3c8]"></a>OUTLINED_FUNCTION_15</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rtx_thread.o(.text.OUTLINED_FUNCTION_15))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[3cc]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_thread.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadSetPriority
</UL>

<P><STRONG><a name="[234]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_thread.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[385]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtx_thread.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadYield
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDestroy
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
</UL>

<P><STRONG><a name="[251]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_thread.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRoot
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[25b]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_thread.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_8 &rArr; ThreadFlagsCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[262]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_thread.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_9 &rArr; osRtxKernelErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[25c]"></a>ThreadFlagsCheck</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rtx_thread.o(.text.ThreadFlagsCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ThreadFlagsCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
</UL>

<P><STRONG><a name="[374]"></a>osRtxThreadBlock</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadPreempted
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>

<P><STRONG><a name="[38f]"></a>osRtxThreadDelayInsert</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadDelayInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadDelayInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[390]"></a>osRtxThreadDelayRemove</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadDelayRemove))
<BR><BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>

<P><STRONG><a name="[383]"></a>osRtxThreadDestroy</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadDestroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxThreadDestroy &rArr; osRtxThreadFree &rArr; osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadDestroyed
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[384]"></a>osRtxThreadFree</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxThreadFree &rArr; osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDestroy
</UL>

<P><STRONG><a name="[387]"></a>osRtxThreadJoinWakeup</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadJoinWakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osRtxThreadJoinWakeup &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadJoined
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[252]"></a>osRtxThreadListRoot</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListRoot))
<BR><BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRoot
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRoot
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
</UL>

<P><STRONG><a name="[e5]"></a>osRtxThreadPostProcess</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osRtxThreadPostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitCompleted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[d9]"></a>svcRtxThreadExit</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rtx_thread.o(.text.svcRtxThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = svcRtxThreadExit &rArr; osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadJoinWakeup
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDestroy
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadExit)
</UL>
<P><STRONG><a name="[da]"></a>svcRtxThreadGetId</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtx_thread.o(.text.svcRtxThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcRtxThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadGetId
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadGetId)
</UL>
<P><STRONG><a name="[db]"></a>svcRtxThreadNew</STRONG> (Thumb, 572 bytes, Stack size 48 bytes, rtx_thread.o(.text.svcRtxThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = svcRtxThreadNew &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadCreated
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadNew)
</UL>
<P><STRONG><a name="[dc]"></a>svcRtxThreadSetPriority</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, rtx_thread.o(.text.svcRtxThreadSetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = svcRtxThreadSetPriority &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadPriorityUpdated
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadSetPriority)
</UL>
<P><STRONG><a name="[dd]"></a>svcRtxThreadYield</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rtx_thread.o(.text.svcRtxThreadYield))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = svcRtxThreadYield &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadPreempted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadYield)
</UL>
<P><STRONG><a name="[9d]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
