<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\cam_h7.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\cam_h7.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Sun Sep 26 00:13:02 2021
<BR><P>
<H3>Maximum Stack Usage =       2760 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
lv_meter_event &rArr; lv_draw_arc &rArr; lv_draw_rect &rArr; lv_draw_img &rArr;  lv_draw_rect (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[215]">__user_initial_stackheap</a>
 <LI><a href="#[d]">SVC_Handler</a>
 <LI><a href="#[f]">PendSV_Handler</a>
 <LI><a href="#[10]">SysTick_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[88]">ADC3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[88]">ADC3_IRQHandler</a><BR>
 <LI><a href="#[4de]">osRtxThreadListRoot</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4de]">osRtxThreadListRoot</a><BR>
 <LI><a href="#[b]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">BusFault_Handler</a><BR>
 <LI><a href="#[4d5]">osRtxErrorNotify</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4d5]">osRtxErrorNotify</a><BR>
 <LI><a href="#[9]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">HardFault_Handler</a><BR>
 <LI><a href="#[a]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">MemManage_Handler</a><BR>
 <LI><a href="#[8]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">NMI_Handler</a><BR>
 <LI><a href="#[c]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">UsageFault_Handler</a><BR>
 <LI><a href="#[378]">event_send_core</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[378]">event_send_core</a><BR>
 <LI><a href="#[2fa]">lv_obj_get_style_prop</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2fa]">lv_obj_get_style_prop</a><BR>
 <LI><a href="#[46a]">refresh_children_style</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[46a]">refresh_children_style</a><BR>
 <LI><a href="#[452]">lv_obj_construct</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[452]">lv_obj_construct</a><BR>
 <LI><a href="#[30f]">apply_theme</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[30f]">apply_theme</a><BR>
 <LI><a href="#[33d]">lv_obj_move_children_by</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[33d]">lv_obj_move_children_by</a><BR>
 <LI><a href="#[3af]">layout_update_core</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3af]">layout_update_core</a><BR>
 <LI><a href="#[35c]">lv_draw_label</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[357]">lv_draw_rect</a><BR>
 <LI><a href="#[367]">lv_draw_line</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[357]">lv_draw_rect</a><BR>
 <LI><a href="#[3f5]">lv_draw_img</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[357]">lv_draw_rect</a><BR>
 <LI><a href="#[486]">lv_refr_obj</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[486]">lv_refr_obj</a><BR>
 <LI><a href="#[484]">lv_refr_get_top_obj</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[484]">lv_refr_get_top_obj</a><BR>
 <LI><a href="#[46f]">report_style_change_core</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[46f]">report_style_change_core</a><BR>
 <LI><a href="#[42f]">lv_textarea_add_text</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[42f]">lv_textarea_add_text</a><BR>
 <LI><a href="#[430]">lv_textarea_add_char</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[42f]">lv_textarea_add_text</a><BR>
 <LI><a href="#[105]">osRtxIdleThread</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[105]">osRtxIdleThread</a><BR>
 <LI><a href="#[3b1]">list_clear</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3b1]">list_clear</a><BR>
 <LI><a href="#[455]">obj_del_core</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[455]">obj_del_core</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[88]">ADC3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[23]">ADC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8a]">BDMA_Channel0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8b]">BDMA_Channel1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8c]">BDMA_Channel2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8d]">BDMA_Channel3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8e]">BDMA_Channel4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8f]">BDMA_Channel5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[90]">BDMA_Channel6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[91]">BDMA_Channel7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[b]">BusFault_Handler</a> from stm32h7xx_it.o(.text.BusFault_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[69]">CEC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[92]">COMP1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[98]">CRS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[a1]">DCMI_DMAError</a> from stm32h7xx_hal_dcmi.o(.text.DCMI_DMAError) referenced 2 times from stm32h7xx_hal_dcmi.o(.text.HAL_DCMI_IRQHandler)
 <LI><a href="#[a1]">DCMI_DMAError</a> from stm32h7xx_hal_dcmi.o(.text.DCMI_DMAError) referenced 2 times from stm32h7xx_hal_dcmi.o(.text.HAL_DCMI_Start_DMA)
 <LI><a href="#[a2]">DCMI_DMAXferCplt</a> from stm32h7xx_hal_dcmi.o(.text.DCMI_DMAXferCplt) referenced 2 times from stm32h7xx_hal_dcmi.o(.text.HAL_DCMI_Start_DMA)
 <LI><a href="#[5a]">DCMI_IRQHandler</a> from stm32h7xx_it.o(.text.DCMI_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[79]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7a]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7b]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7c]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream0_IRQHandler</a> from stm32h7xx_it.o(.text.DMA1_Stream0_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1d]">DMA1_Stream1_IRQHandler</a> from stm32h7xx_it.o(.text.DMA1_Stream1_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1e]">DMA1_Stream2_IRQHandler</a> from stm32h7xx_it.o(.text.DMA1_Stream2_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1f]">DMA1_Stream3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[20]">DMA1_Stream4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[21]">DMA1_Stream5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[22]">DMA1_Stream6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3f]">DMA1_Stream7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[65]">DMA2D_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[48]">DMA2_Stream0_IRQHandler</a> from stm32h7xx_it.o(.text.DMA2_Stream0_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[49]">DMA2_Stream1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4a]">DMA2_Stream2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4b]">DMA2_Stream3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4c]">DMA2_Stream4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[51]">DMA2_Stream6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[52]">DMA2_Stream7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[71]">DMAMUX1_OVR_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[89]">DMAMUX2_OVR_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[e]">DebugMon_Handler</a> from stm32h7xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[99]">ECC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4d]">ETH_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4e]">ETH_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[17]">EXTI0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[39]">EXTI15_10_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[18]">EXTI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[19]">EXTI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1a]">EXTI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1b]">EXTI4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[28]">EXTI9_5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[24]">FDCAN1_IT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[26]">FDCAN1_IT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[25]">FDCAN2_IT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[27]">FDCAN2_IT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4f]">FDCAN_CAL_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[15]">FLASH_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[40]">FMC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5c]">FPU_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[78]">HRTIM1_FLT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[72]">HRTIM1_Master_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[73]">HRTIM1_TIMA_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[74]">HRTIM1_TIMB_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[75]">HRTIM1_TIMC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[76]">HRTIM1_TIMD_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[77]">HRTIM1_TIME_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[87]">HSEM1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[9]">HardFault_Handler</a> from stm32h7xx_it.o(.text.HardFault_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[31]">I2C1_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[30]">I2C1_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[33]">I2C2_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[32]">I2C2_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[55]">I2C3_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[54]">I2C3_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6b]">I2C4_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6a]">I2C4_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[84]">JPEG_IRQHandler</a> from stm32h7xx_it.o(.text.JPEG_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[b3]">JPEG_MDMAErrorCallback</a> from stm32h7xx_hal_jpeg.o(.text.JPEG_MDMAErrorCallback) referenced 2 times from stm32h7xx_hal_jpeg.o(.text.JPEG_DMA_StartProcess)
 <LI><a href="#[b2]">JPEG_MDMAInCpltCallback</a> from stm32h7xx_hal_jpeg.o(.text.JPEG_MDMAInCpltCallback) referenced 2 times from stm32h7xx_hal_jpeg.o(.text.JPEG_DMA_StartProcess)
 <LI><a href="#[b5]">JPEG_MDMAOutAbortCallback</a> from stm32h7xx_hal_jpeg.o(.text.JPEG_MDMAOutAbortCallback) referenced 2 times from stm32h7xx_hal_jpeg.o(.text.JPEG_DMA_StartProcess)
 <LI><a href="#[b4]">JPEG_MDMAOutCpltCallback</a> from stm32h7xx_hal_jpeg.o(.text.JPEG_MDMAOutCpltCallback) referenced 2 times from stm32h7xx_hal_jpeg.o(.text.JPEG_DMA_StartProcess)
 <LI><a href="#[68]">LPTIM1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[93]">LPTIM2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[94]">LPTIM3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[95]">LPTIM4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[96]">LPTIM5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[97]">LPUART1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[64]">LTDC_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[63]">LTDC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[83]">MDIOS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[82]">MDIOS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[85]">MDMA_IRQHandler</a> from stm32h7xx_it.o(.text.MDMA_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[a]">MemManage_Handler</a> from stm32h7xx_it.o(.text.MemManage_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8]">NMI_Handler</a> from stm32h7xx_it.o(.text.NMI_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6e]">OTG_FS_EP1_IN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6d]">OTG_FS_EP1_OUT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[70]">OTG_FS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6f]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[59]">OTG_HS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[58]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[12]">PVD_AVD_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[f]">PendSV_Handler</a> from irq_armv7m.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[a3]">QSPI_DMAAbortCplt</a> from stm32h7xx_hal_qspi.o(.text.QSPI_DMAAbortCplt) referenced 2 times from stm32h7xx_hal_qspi.o(.text.HAL_QSPI_IRQHandler)
 <LI><a href="#[67]">QUADSPI_IRQHandler</a> from stm32h7xx_it.o(.text.QUADSPI_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[16]">RCC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5b]">RNG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3a]">RTC_Alarm_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[14]">RTC_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7]">Reset_Handler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[62]">SAI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[66]">SAI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7d]">SAI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[9a]">SAI4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[41]">SDMMC1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[86]">SDMMC2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6c]">SPDIF_RX_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[34]">SPI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[35]">SPI2_IRQHandler</a> from stm32h7xx_it.o(.text.SPI2_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[43]">SPI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5f]">SPI4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[60]">SPI5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[61]">SPI6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[a4]">SPI_DMAAbortOnError</a> from stm32h7xx_hal_spi.o(.text.SPI_DMAAbortOnError) referenced 2 times from stm32h7xx_hal_spi.o(.text.HAL_SPI_IRQHandler)
 <LI><a href="#[a7]">SPI_DMAError</a> from stm32h7xx_hal_spi.o(.text.SPI_DMAError) referenced 2 times from stm32h7xx_hal_spi.o(.text.HAL_SPI_Transmit_DMA)
 <LI><a href="#[a6]">SPI_DMAHalfTransmitCplt</a> from stm32h7xx_hal_spi.o(.text.SPI_DMAHalfTransmitCplt) referenced 2 times from stm32h7xx_hal_spi.o(.text.HAL_SPI_Transmit_DMA)
 <LI><a href="#[a5]">SPI_DMATransmitCplt</a> from stm32h7xx_hal_spi.o(.text.SPI_DMATransmitCplt) referenced 2 times from stm32h7xx_hal_spi.o(.text.HAL_SPI_Transmit_DMA)
 <LI><a href="#[d]">SVC_Handler</a> from irq_armv7m.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7e]">SWPMI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[10]">SysTick_Handler</a> from irq_armv7m.o(.text) referenced from rtx_kernel.o(.text.svcRtxKernelStart)
 <LI><a href="#[10]">SysTick_Handler</a> from irq_armv7m.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[9c]">SystemInit</a> from system_stm32h7xx.o(.text.SystemInit) referenced from startup_stm32h743xx.o(.text)
 <LI><a href="#[13]">TAMP_STAMP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7f]">TIM15_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[80]">TIM16_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[81]">TIM17_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[29]">TIM1_BRK_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2c]">TIM1_CC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2b]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2a]">TIM1_UP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2d]">TIM2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2e]">TIM3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2f]">TIM4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[42]">TIM5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[46]">TIM6_DAC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[47]">TIM7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3b]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3e]">TIM8_CC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3d]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3c]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[44]">UART4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[45]">UART5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5d]">UART7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5e]">UART8_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[aa]">UART_DMAAbortOnError</a> from stm32h7xx_hal_uart.o(.text.UART_DMAAbortOnError) referenced 2 times from stm32h7xx_hal_uart.o(.text.HAL_UART_IRQHandler)
 <LI><a href="#[ad]">UART_DMAError</a> from stm32h7xx_hal_uart.o(.text.UART_DMAError) referenced 2 times from stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
 <LI><a href="#[ad]">UART_DMAError</a> from stm32h7xx_hal_uart.o(.text.UART_DMAError) referenced 2 times from stm32h7xx_hal_uart.o(.text.UART_Start_Receive_DMA)
 <LI><a href="#[b8]">UART_DMAReceiveCplt</a> from stm32h7xx_hal_uart.o(.text.UART_DMAReceiveCplt) referenced 2 times from stm32h7xx_hal_uart.o(.text.UART_Start_Receive_DMA)
 <LI><a href="#[b9]">UART_DMARxHalfCplt</a> from stm32h7xx_hal_uart.o(.text.UART_DMARxHalfCplt) referenced 2 times from stm32h7xx_hal_uart.o(.text.UART_Start_Receive_DMA)
 <LI><a href="#[a8]">UART_DMARxOnlyAbortCallback</a> from stm32h7xx_hal_uart.o(.text.UART_DMARxOnlyAbortCallback) referenced 2 times from stm32h7xx_hal_uart.o(.text.HAL_UART_AbortReceive_IT)
 <LI><a href="#[ab]">UART_DMATransmitCplt</a> from stm32h7xx_hal_uart.o(.text.UART_DMATransmitCplt) referenced 2 times from stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
 <LI><a href="#[ac]">UART_DMATxHalfCplt</a> from stm32h7xx_hal_uart.o(.text.UART_DMATxHalfCplt) referenced 2 times from stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
 <LI><a href="#[a9]">UART_DMATxOnlyAbortCallback</a> from stm32h7xx_hal_uart.o(.text.UART_DMATxOnlyAbortCallback) referenced 2 times from stm32h7xx_hal_uart.o(.text.HAL_UART_AbortTransmit_IT)
 <LI><a href="#[b6]">UART_RxISR_16BIT</a> from stm32h7xx_hal_uart.o(.text.UART_RxISR_16BIT) referenced 2 times from stm32h7xx_hal_uart.o(.text.UART_RxISR_16BIT_FIFOEN)
 <LI><a href="#[b6]">UART_RxISR_16BIT</a> from stm32h7xx_hal_uart.o(.text.UART_RxISR_16BIT) referenced 2 times from stm32h7xx_hal_uart.o(.text.UART_Start_Receive_IT)
 <LI><a href="#[bb]">UART_RxISR_16BIT_FIFOEN</a> from stm32h7xx_hal_uart.o(.text.UART_RxISR_16BIT_FIFOEN) referenced 2 times from stm32h7xx_hal_uart.o(.text.UART_Start_Receive_IT)
 <LI><a href="#[b7]">UART_RxISR_8BIT</a> from stm32h7xx_hal_uart.o(.text.UART_RxISR_8BIT) referenced 2 times from stm32h7xx_hal_uart.o(.text.UART_RxISR_8BIT_FIFOEN)
 <LI><a href="#[b7]">UART_RxISR_8BIT</a> from stm32h7xx_hal_uart.o(.text.UART_RxISR_8BIT) referenced 2 times from stm32h7xx_hal_uart.o(.text.UART_Start_Receive_IT)
 <LI><a href="#[ba]">UART_RxISR_8BIT_FIFOEN</a> from stm32h7xx_hal_uart.o(.text.UART_RxISR_8BIT_FIFOEN) referenced 2 times from stm32h7xx_hal_uart.o(.text.UART_Start_Receive_IT)
 <LI><a href="#[b1]">UART_TxISR_16BIT</a> from stm32h7xx_hal_uart.o(.text.UART_TxISR_16BIT) referenced 2 times from stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit_IT)
 <LI><a href="#[b0]">UART_TxISR_16BIT_FIFOEN</a> from stm32h7xx_hal_uart.o(.text.UART_TxISR_16BIT_FIFOEN) referenced 2 times from stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit_IT)
 <LI><a href="#[af]">UART_TxISR_8BIT</a> from stm32h7xx_hal_uart.o(.text.UART_TxISR_8BIT) referenced 2 times from stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit_IT)
 <LI><a href="#[ae]">UART_TxISR_8BIT_FIFOEN</a> from stm32h7xx_hal_uart.o(.text.UART_TxISR_8BIT_FIFOEN) referenced 2 times from stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit_IT)
 <LI><a href="#[36]">USART1_IRQHandler</a> from stm32h7xx_it.o(.text.USART1_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[37]">USART2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[38]">USART3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[53]">USART6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[c]">UsageFault_Handler</a> from stm32h7xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[9b]">WAKEUP_PIN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[11]">WWDG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[9d]">__main</a> from __main.o(!!!main) referenced from startup_stm32h743xx.o(.text)
 <LI><a href="#[a0]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[dd]">_lv_disp_refr_timer</a> from lv_refr.o(.text._lv_disp_refr_timer) referenced 2 times from lv_hal_disp.o(.text.lv_disp_drv_register)
 <LI><a href="#[9f]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[9e]">_snputc</a> from _snputc.o(.text) referenced 2 times from vsnprintf.o(.text)
 <LI><a href="#[bc]">anim_timer</a> from lv_anim.o(.text.anim_timer) referenced 2 times from lv_anim.o(.text._lv_anim_core_init)
 <LI><a href="#[ed]">arc_anim_end_angle</a> from lv_spinner.o(.text.arc_anim_end_angle) referenced 2 times from lv_spinner.o(.text.lv_spinner_constructor)
 <LI><a href="#[ef]">arc_anim_start_angle</a> from lv_spinner.o(.text.arc_anim_start_angle) referenced 2 times from lv_spinner.o(.text.lv_spinner_constructor)
 <LI><a href="#[f0]">btns_value_changed_event_cb</a> from lv_tabview.o(.text.btns_value_changed_event_cb) referenced 2 times from lv_tabview.o(.text.lv_tabview_constructor)
 <LI><a href="#[be]">color_blend_true_color_additive</a> from lv_draw_blend.o(.text.color_blend_true_color_additive) referenced 2 times from lv_draw_blend.o(.text._lv_blend_fill)
 <LI><a href="#[be]">color_blend_true_color_additive</a> from lv_draw_blend.o(.text.color_blend_true_color_additive) referenced 2 times from lv_draw_blend.o(.text._lv_blend_map)
 <LI><a href="#[bd]">color_blend_true_color_subtractive</a> from lv_draw_blend.o(.text.color_blend_true_color_subtractive) referenced 2 times from lv_draw_blend.o(.text._lv_blend_fill)
 <LI><a href="#[bd]">color_blend_true_color_subtractive</a> from lv_draw_blend.o(.text.color_blend_true_color_subtractive) referenced 2 times from lv_draw_blend.o(.text._lv_blend_map)
 <LI><a href="#[ce]">com_recv</a> from hal_com_stm32h7.o(.text.com_recv) referenced 2 times from hal_com_stm32h7.o(.text.com_create)
 <LI><a href="#[cf]">com_recv_async</a> from hal_com_stm32h7.o(.text.com_recv_async) referenced 2 times from hal_com_stm32h7.o(.text.com_create)
 <LI><a href="#[d0]">com_send</a> from hal_com_stm32h7.o(.text.com_send) referenced 2 times from hal_com_stm32h7.o(.text.com_create)
 <LI><a href="#[d1]">com_send_async</a> from hal_com_stm32h7.o(.text.com_send_async) referenced 2 times from hal_com_stm32h7.o(.text.com_create)
 <LI><a href="#[f1]">cont_scroll_end_event_cb</a> from lv_tabview.o(.text.cont_scroll_end_event_cb) referenced 2 times from lv_tabview.o(.text.lv_tabview_constructor)
 <LI><a href="#[f5]">cursor_blink_anim_cb</a> from lv_textarea.o(.text.cursor_blink_anim_cb) referenced 4 times from lv_textarea.o(.text.lv_textarea_constructor)
 <LI><a href="#[f5]">cursor_blink_anim_cb</a> from lv_textarea.o(.text.cursor_blink_anim_cb) referenced 6 times from lv_textarea.o(.text.lv_textarea_event)
 <LI><a href="#[f5]">cursor_blink_anim_cb</a> from lv_textarea.o(.text.cursor_blink_anim_cb) referenced 4 times from lv_textarea.o(.text.lv_textarea_set_cursor_pos)
 <LI><a href="#[141]">dark_color_filter_cb</a> from lv_theme_default.o(.text.dark_color_filter_cb) referenced 2 times from lv_theme_default.o(.text.style_init)
 <LI><a href="#[d6]">disp_flush</a> from gui_thread.o(.text.disp_flush) referenced 2 times from gui_thread.o(.text.gui_thread)
 <LI><a href="#[dc]">draw_part_begin_event_cb</a> from lv_calendar.o(.text.draw_part_begin_event_cb) referenced 2 times from lv_calendar.o(.text.lv_calendar_constructor)
 <LI><a href="#[e1]">flex_update</a> from lv_flex.o(.text.flex_update) referenced 2 times from lv_flex.o(.text.lv_flex_init)
 <LI><a href="#[11c]">get_exposure_us</a> from ov2640.o(.text.get_exposure_us) referenced 2 times from ov2640.o(.text.ov2640_init)
 <LI><a href="#[130]">get_exposure_us</a> from ov7725.o(.text.get_exposure_us) referenced 2 times from ov7725.o(.text.ov7725_init)
 <LI><a href="#[11a]">get_gain_db</a> from ov2640.o(.text.get_gain_db) referenced 2 times from ov2640.o(.text.ov2640_init)
 <LI><a href="#[12e]">get_gain_db</a> from ov7725.o(.text.get_gain_db) referenced 2 times from ov7725.o(.text.ov7725_init)
 <LI><a href="#[11e]">get_rgb_gain_db</a> from ov2640.o(.text.get_rgb_gain_db) referenced 2 times from ov2640.o(.text.ov2640_init)
 <LI><a href="#[132]">get_rgb_gain_db</a> from ov7725.o(.text.get_rgb_gain_db) referenced 2 times from ov7725.o(.text.ov7725_init)
 <LI><a href="#[142]">grey_filter_cb</a> from lv_theme_default.o(.text.grey_filter_cb) referenced 2 times from lv_theme_default.o(.text.style_init)
 <LI><a href="#[e4]">grid_update</a> from lv_grid.o(.text.grid_update) referenced 2 times from lv_grid.o(.text.lv_grid_init)
 <LI><a href="#[14c]">gui_thread</a> from gui_thread.o(.text.gui_thread) referenced 2 times from system_thread.o(.text.system_thread)
 <LI><a href="#[e3]">kern_pair_16_compare</a> from lv_font_fmt_txt.o(.text.kern_pair_16_compare) referenced 2 times from lv_font_fmt_txt.o(.text.lv_font_get_glyph_dsc_fmt_txt)
 <LI><a href="#[e2]">kern_pair_8_compare</a> from lv_font_fmt_txt.o(.text.kern_pair_8_compare) referenced 2 times from lv_font_fmt_txt.o(.text.lv_font_get_glyph_dsc_fmt_txt)
 <LI><a href="#[c6]">ll_iterator_handle</a> from binary.o(.text.ll_iterator_handle) referenced 2 times from binary.o(.text.binary_image)
 <LI><a href="#[ee]">lv_anim_path_ease_in_out</a> from lv_anim.o(.text.lv_anim_path_ease_in_out) referenced 2 times from lv_spinner.o(.text.lv_spinner_constructor)
 <LI><a href="#[ea]">lv_anim_path_ease_out</a> from lv_anim.o(.text.lv_anim_path_ease_out) referenced 2 times from lv_obj_scroll.o(.text.lv_obj_scroll_by)
 <LI><a href="#[ea]">lv_anim_path_ease_out</a> from lv_anim.o(.text.lv_anim_path_ease_out) referenced 2 times from lv_roller.o(.text.refr_position)
 <LI><a href="#[d7]">lv_anim_path_linear</a> from lv_anim.o(.text.lv_anim_path_linear) referenced 2 times from lv_anim.o(.text.lv_anim_init)
 <LI><a href="#[d7]">lv_anim_path_linear</a> from lv_anim.o(.text.lv_anim_path_linear) referenced 2 times from lv_style.o(.text.lv_style_transition_dsc_init)
 <LI><a href="#[d7]">lv_anim_path_linear</a> from lv_anim.o(.text.lv_anim_path_linear) referenced 2 times from lv_theme_default.o(.text.style_init)
 <LI><a href="#[f3]">lv_anim_path_step</a> from lv_anim.o(.text.lv_anim_path_step) referenced 2 times from lv_textarea.o(.text.lv_textarea_add_char)
 <LI><a href="#[f3]">lv_anim_path_step</a> from lv_anim.o(.text.lv_anim_path_step) referenced 2 times from lv_textarea.o(.text.lv_textarea_add_text)
 <LI><a href="#[f3]">lv_anim_path_step</a> from lv_anim.o(.text.lv_anim_path_step) referenced 2 times from lv_textarea.o(.text.lv_textarea_constructor)
 <LI><a href="#[f3]">lv_anim_path_step</a> from lv_anim.o(.text.lv_anim_path_step) referenced 2 times from lv_textarea.o(.text.lv_textarea_event)
 <LI><a href="#[f3]">lv_anim_path_step</a> from lv_anim.o(.text.lv_anim_path_step) referenced 2 times from lv_textarea.o(.text.lv_textarea_set_cursor_pos)
 <LI><a href="#[f3]">lv_anim_path_step</a> from lv_anim.o(.text.lv_anim_path_step) referenced 2 times from lv_textarea.o(.text.lv_textarea_set_text)
 <LI><a href="#[14f]">lv_arc_constructor</a> from lv_arc.o(.text.lv_arc_constructor) referenced from lv_arc.o(.rodata.lv_arc_class)
 <LI><a href="#[150]">lv_arc_event</a> from lv_arc.o(.text.lv_arc_event) referenced from lv_arc.o(.rodata.lv_arc_class)
 <LI><a href="#[c8]">lv_area_get_height</a> from lv_flex.o(.text.lv_area_get_height) referenced 2 times from lv_flex.o(.text.children_repos)
 <LI><a href="#[d8]">lv_area_get_height</a> from lv_bar.o(.text.lv_area_get_height) referenced 2 times from lv_bar.o(.text.lv_bar_event)
 <LI><a href="#[c7]">lv_area_get_width</a> from lv_flex.o(.text.lv_area_get_width) referenced 4 times from lv_flex.o(.text.children_repos)
 <LI><a href="#[d9]">lv_area_get_width</a> from lv_bar.o(.text.lv_area_get_width) referenced 2 times from lv_bar.o(.text.lv_bar_event)
 <LI><a href="#[c9]">lv_area_set_height</a> from lv_area.o(.text.lv_area_set_height) referenced 2 times from lv_flex.o(.text.children_repos)
 <LI><a href="#[ca]">lv_area_set_width</a> from lv_area.o(.text.lv_area_set_width) referenced 2 times from lv_flex.o(.text.children_repos)
 <LI><a href="#[da]">lv_bar_anim</a> from lv_bar.o(.text.lv_bar_anim) referenced 2 times from lv_bar.o(.text.lv_bar_set_start_value)
 <LI><a href="#[da]">lv_bar_anim</a> from lv_bar.o(.text.lv_bar_anim) referenced 2 times from lv_bar.o(.text.lv_bar_set_value)
 <LI><a href="#[db]">lv_bar_anim_ready</a> from lv_bar.o(.text.lv_bar_anim_ready) referenced 2 times from lv_bar.o(.text.lv_bar_set_start_value)
 <LI><a href="#[db]">lv_bar_anim_ready</a> from lv_bar.o(.text.lv_bar_anim_ready) referenced 2 times from lv_bar.o(.text.lv_bar_set_value)
 <LI><a href="#[151]">lv_bar_constructor</a> from lv_bar.o(.text.lv_bar_constructor) referenced from lv_bar.o(.rodata.lv_bar_class)
 <LI><a href="#[152]">lv_bar_destructor</a> from lv_bar.o(.text.lv_bar_destructor) referenced from lv_bar.o(.rodata.lv_bar_class)
 <LI><a href="#[153]">lv_bar_event</a> from lv_bar.o(.text.lv_bar_event) referenced from lv_bar.o(.rodata.lv_bar_class)
 <LI><a href="#[154]">lv_btn_constructor</a> from lv_btn.o(.text.lv_btn_constructor) referenced from lv_btn.o(.rodata.lv_btn_class)
 <LI><a href="#[155]">lv_btnmatrix_constructor</a> from lv_btnmatrix.o(.text.lv_btnmatrix_constructor) referenced from lv_btnmatrix.o(.rodata.lv_btnmatrix_class)
 <LI><a href="#[156]">lv_btnmatrix_destructor</a> from lv_btnmatrix.o(.text.lv_btnmatrix_destructor) referenced from lv_btnmatrix.o(.rodata.lv_btnmatrix_class)
 <LI><a href="#[157]">lv_btnmatrix_event</a> from lv_btnmatrix.o(.text.lv_btnmatrix_event) referenced from lv_btnmatrix.o(.rodata.lv_btnmatrix_class)
 <LI><a href="#[158]">lv_calendar_constructor</a> from lv_calendar.o(.text.lv_calendar_constructor) referenced from lv_calendar.o(.rodata.lv_calendar_class)
 <LI><a href="#[15b]">lv_chart_constructor</a> from lv_chart.o(.text.lv_chart_constructor) referenced from lv_chart.o(.rodata.lv_chart_class)
 <LI><a href="#[15c]">lv_chart_destructor</a> from lv_chart.o(.text.lv_chart_destructor) referenced from lv_chart.o(.rodata.lv_chart_class)
 <LI><a href="#[15d]">lv_chart_event</a> from lv_chart.o(.text.lv_chart_event) referenced from lv_chart.o(.rodata.lv_chart_class)
 <LI><a href="#[15e]">lv_checkbox_constructor</a> from lv_checkbox.o(.text.lv_checkbox_constructor) referenced from lv_checkbox.o(.rodata.lv_checkbox_class)
 <LI><a href="#[15f]">lv_checkbox_destructor</a> from lv_checkbox.o(.text.lv_checkbox_destructor) referenced from lv_checkbox.o(.rodata.lv_checkbox_class)
 <LI><a href="#[160]">lv_checkbox_event</a> from lv_checkbox.o(.text.lv_checkbox_event) referenced from lv_checkbox.o(.rodata.lv_checkbox_class)
 <LI><a href="#[161]">lv_colorwheel_constructor</a> from lv_colorwheel.o(.text.lv_colorwheel_constructor) referenced from lv_colorwheel.o(.rodata.lv_colorwheel_class)
 <LI><a href="#[162]">lv_colorwheel_event</a> from lv_colorwheel.o(.text.lv_colorwheel_event) referenced from lv_colorwheel.o(.rodata.lv_colorwheel_class)
 <LI><a href="#[de]">lv_draw_mask_angle</a> from lv_draw_mask.o(.text.lv_draw_mask_angle) referenced 2 times from lv_draw_mask.o(.text.lv_draw_mask_angle_init)
 <LI><a href="#[df]">lv_draw_mask_line</a> from lv_draw_mask.o(.text.lv_draw_mask_line) referenced 2 times from lv_draw_mask.o(.text.lv_draw_mask_line_points_init)
 <LI><a href="#[e0]">lv_draw_mask_radius</a> from lv_draw_mask.o(.text.lv_draw_mask_radius) referenced 2 times from lv_draw_mask.o(.text.lv_draw_mask_radius_init)
 <LI><a href="#[163]">lv_dropdown_constructor</a> from lv_dropdown.o(.text.lv_dropdown_constructor) referenced from lv_dropdown.o(.rodata.lv_dropdown_class)
 <LI><a href="#[164]">lv_dropdown_destructor</a> from lv_dropdown.o(.text.lv_dropdown_destructor) referenced from lv_dropdown.o(.rodata.lv_dropdown_class)
 <LI><a href="#[165]">lv_dropdown_event</a> from lv_dropdown.o(.text.lv_dropdown_event) referenced from lv_dropdown.o(.rodata.lv_dropdown_class)
 <LI><a href="#[168]">lv_dropdown_list_event</a> from lv_dropdown.o(.text.lv_dropdown_list_event) referenced from lv_dropdown.o(.rodata.lv_dropdownlist_class)
 <LI><a href="#[166]">lv_dropdownlist_constructor</a> from lv_dropdown.o(.text.lv_dropdownlist_constructor) referenced from lv_dropdown.o(.rodata.lv_dropdownlist_class)
 <LI><a href="#[167]">lv_dropdownlist_destructor</a> from lv_dropdown.o(.text.lv_dropdownlist_destructor) referenced from lv_dropdown.o(.rodata.lv_dropdownlist_class)
 <LI><a href="#[16a]">lv_font_get_bitmap_fmt_txt</a> from lv_font_fmt_txt.o(.text.lv_font_get_bitmap_fmt_txt) referenced from lv_font_montserrat_14.o(.rodata.lv_font_montserrat_14)
 <LI><a href="#[169]">lv_font_get_glyph_dsc_fmt_txt</a> from lv_font_fmt_txt.o(.text.lv_font_get_glyph_dsc_fmt_txt) referenced from lv_font_montserrat_14.o(.rodata.lv_font_montserrat_14)
 <LI><a href="#[16b]">lv_img_constructor</a> from lv_img.o(.text.lv_img_constructor) referenced from lv_img.o(.rodata.lv_img_class)
 <LI><a href="#[c2]">lv_img_decoder_built_in_close</a> from lv_img_decoder.o(.text.lv_img_decoder_built_in_close) referenced 2 times from lv_img_decoder.o(.text._lv_img_decoder_init)
 <LI><a href="#[bf]">lv_img_decoder_built_in_info</a> from lv_img_decoder.o(.text.lv_img_decoder_built_in_info) referenced 2 times from lv_img_decoder.o(.text._lv_img_decoder_init)
 <LI><a href="#[c0]">lv_img_decoder_built_in_open</a> from lv_img_decoder.o(.text.lv_img_decoder_built_in_open) referenced 2 times from lv_img_decoder.o(.text._lv_img_decoder_init)
 <LI><a href="#[c1]">lv_img_decoder_built_in_read_line</a> from lv_img_decoder.o(.text.lv_img_decoder_built_in_read_line) referenced 2 times from lv_img_decoder.o(.text._lv_img_decoder_init)
 <LI><a href="#[16c]">lv_img_destructor</a> from lv_img.o(.text.lv_img_destructor) referenced from lv_img.o(.rodata.lv_img_class)
 <LI><a href="#[16d]">lv_img_event</a> from lv_img.o(.text.lv_img_event) referenced from lv_img.o(.rodata.lv_img_class)
 <LI><a href="#[16e]">lv_keyboard_constructor</a> from lv_keyboard.o(.text.lv_keyboard_constructor) referenced from lv_keyboard.o(.rodata.lv_keyboard_class)
 <LI><a href="#[e5]">lv_keyboard_def_event_cb</a> from lv_keyboard.o(.text.lv_keyboard_def_event_cb) referenced 2 times from lv_keyboard.o(.text.lv_keyboard_constructor)
 <LI><a href="#[16f]">lv_label_constructor</a> from lv_label.o(.text.lv_label_constructor) referenced from lv_label.o(.rodata.lv_label_class)
 <LI><a href="#[170]">lv_label_destructor</a> from lv_label.o(.text.lv_label_destructor) referenced from lv_label.o(.rodata.lv_label_class)
 <LI><a href="#[171]">lv_label_event</a> from lv_label.o(.text.lv_label_event) referenced from lv_label.o(.rodata.lv_label_class)
 <LI><a href="#[172]">lv_led_constructor</a> from lv_led.o(.text.lv_led_constructor) referenced from lv_led.o(.rodata.lv_led_class)
 <LI><a href="#[173]">lv_led_event</a> from lv_led.o(.text.lv_led_event) referenced from lv_led.o(.rodata.lv_led_class)
 <LI><a href="#[174]">lv_line_constructor</a> from lv_line.o(.text.lv_line_constructor) referenced from lv_line.o(.rodata.lv_line_class)
 <LI><a href="#[175]">lv_line_event</a> from lv_line.o(.text.lv_line_event) referenced from lv_line.o(.rodata.lv_line_class)
 <LI><a href="#[176]">lv_meter_constructor</a> from lv_meter.o(.text.lv_meter_constructor) referenced from lv_meter.o(.rodata.lv_meter_class)
 <LI><a href="#[177]">lv_meter_destructor</a> from lv_meter.o(.text.lv_meter_destructor) referenced from lv_meter.o(.rodata.lv_meter_class)
 <LI><a href="#[178]">lv_meter_event</a> from lv_meter.o(.text.lv_meter_event) referenced from lv_meter.o(.rodata.lv_meter_class)
 <LI><a href="#[179]">lv_obj_constructor</a> from lv_obj.o(.text.lv_obj_constructor) referenced from lv_obj.o(.rodata.lv_obj_class)
 <LI><a href="#[17a]">lv_obj_destructor</a> from lv_obj.o(.text.lv_obj_destructor) referenced from lv_obj.o(.rodata.lv_obj_class)
 <LI><a href="#[17b]">lv_obj_event</a> from lv_obj.o(.text.lv_obj_event) referenced from lv_obj.o(.rodata.lv_obj_class)
 <LI><a href="#[d3]">lv_obj_get_height</a> from lv_obj_pos.o(.text.lv_obj_get_height) referenced 2 times from lv_flex.o(.text.find_track_end)
 <LI><a href="#[d2]">lv_obj_get_width</a> from lv_obj_pos.o(.text.lv_obj_get_width) referenced 2 times from lv_flex.o(.text.find_track_end)
 <LI><a href="#[17c]">lv_roller_constructor</a> from lv_roller.o(.text.lv_roller_constructor) referenced from lv_roller.o(.rodata.lv_roller_class)
 <LI><a href="#[17d]">lv_roller_event</a> from lv_roller.o(.text.lv_roller_event) referenced from lv_roller.o(.rodata.lv_roller_class)
 <LI><a href="#[17e]">lv_roller_label_event</a> from lv_roller.o(.text.lv_roller_label_event) referenced from lv_roller.o(.rodata.lv_roller_label_class)
 <LI><a href="#[17f]">lv_slider_constructor</a> from lv_slider.o(.text.lv_slider_constructor) referenced from lv_slider.o(.rodata.lv_slider_class)
 <LI><a href="#[180]">lv_slider_event</a> from lv_slider.o(.text.lv_slider_event) referenced from lv_slider.o(.rodata.lv_slider_class)
 <LI><a href="#[181]">lv_spinbox_constructor</a> from lv_spinbox.o(.text.lv_spinbox_constructor) referenced from lv_spinbox.o(.rodata.lv_spinbox_class)
 <LI><a href="#[182]">lv_spinbox_event</a> from lv_spinbox.o(.text.lv_spinbox_event) referenced from lv_spinbox.o(.rodata.lv_spinbox_class)
 <LI><a href="#[183]">lv_spinner_constructor</a> from lv_spinner.o(.text.lv_spinner_constructor) referenced from lv_spinner.o(.rodata.lv_spinner_class)
 <LI><a href="#[184]">lv_switch_constructor</a> from lv_switch.o(.text.lv_switch_constructor) referenced from lv_switch.o(.rodata.lv_switch_class)
 <LI><a href="#[185]">lv_switch_event</a> from lv_switch.o(.text.lv_switch_event) referenced from lv_switch.o(.rodata.lv_switch_class)
 <LI><a href="#[186]">lv_table_constructor</a> from lv_table.o(.text.lv_table_constructor) referenced from lv_table.o(.rodata.lv_table_class)
 <LI><a href="#[187]">lv_table_destructor</a> from lv_table.o(.text.lv_table_destructor) referenced from lv_table.o(.rodata.lv_table_class)
 <LI><a href="#[188]">lv_table_event</a> from lv_table.o(.text.lv_table_event) referenced from lv_table.o(.rodata.lv_table_class)
 <LI><a href="#[189]">lv_tabview_constructor</a> from lv_tabview.o(.text.lv_tabview_constructor) referenced from lv_tabview.o(.rodata.lv_tabview_class)
 <LI><a href="#[18a]">lv_tabview_destructor</a> from lv_tabview.o(.text.lv_tabview_destructor) referenced from lv_tabview.o(.rodata.lv_tabview_class)
 <LI><a href="#[18b]">lv_tabview_event</a> from lv_tabview.o(.text.lv_tabview_event) referenced from lv_tabview.o(.rodata.lv_tabview_class)
 <LI><a href="#[18c]">lv_textarea_constructor</a> from lv_textarea.o(.text.lv_textarea_constructor) referenced from lv_textarea.o(.rodata.lv_textarea_class)
 <LI><a href="#[18d]">lv_textarea_destructor</a> from lv_textarea.o(.text.lv_textarea_destructor) referenced from lv_textarea.o(.rodata.lv_textarea_class)
 <LI><a href="#[18e]">lv_textarea_event</a> from lv_textarea.o(.text.lv_textarea_event) referenced from lv_textarea.o(.rodata.lv_textarea_class)
 <LI><a href="#[18f]">lv_tileview_constructor</a> from lv_tileview.o(.text.lv_tileview_constructor) referenced from lv_tileview.o(.rodata.lv_tileview_class)
 <LI><a href="#[190]">lv_tileview_tile_constructor</a> from lv_tileview.o(.text.lv_tileview_tile_constructor) referenced from lv_tileview.o(.rodata.lv_tileview_tile_class)
 <LI><a href="#[6]">lv_txt_unicode_to_utf8</a> from lv_txt.o(.text.lv_txt_unicode_to_utf8) referenced 2 times from lv_txt.o(.data._lv_txt_unicode_to_encoded)
 <LI><a href="#[2]">lv_txt_utf8_get_byte_id</a> from lv_txt.o(.text.lv_txt_utf8_get_byte_id) referenced 2 times from lv_txt.o(.data._lv_txt_encoded_get_byte_id)
 <LI><a href="#[3]">lv_txt_utf8_get_char_id</a> from lv_txt.o(.text.lv_txt_utf8_get_char_id) referenced 2 times from lv_txt.o(.data._lv_txt_encoded_get_char_id)
 <LI><a href="#[5]">lv_txt_utf8_get_length</a> from lv_txt.o(.text.lv_txt_utf8_get_length) referenced 2 times from lv_txt.o(.data._lv_txt_get_encoded_length)
 <LI><a href="#[1]">lv_txt_utf8_next</a> from lv_txt.o(.text.lv_txt_utf8_next) referenced 2 times from lv_txt.o(.data..L_MergedGlobals)
 <LI><a href="#[4]">lv_txt_utf8_prev</a> from lv_txt.o(.text.lv_txt_utf8_prev) referenced 2 times from lv_txt.o(.data._lv_txt_encoded_prev)
 <LI><a href="#[0]">lv_txt_utf8_size</a> from lv_txt.o(.text.lv_txt_utf8_size) referenced 2 times from lv_txt.o(.data..L_MergedGlobals)
 <LI><a href="#[191]">lv_win_constructor</a> from lv_win.o(.text.lv_win_constructor) referenced from lv_win.o(.rodata.lv_win_class)
 <LI><a href="#[d5]">lvgl_log_output</a> from gui_thread.o(.text.lvgl_log_output) referenced 2 times from gui_thread.o(.text.gui_thread)
 <LI><a href="#[192]">memory</a> from system_thread.o(.text.memory) referenced from system_thread.o(shellCommand)
 <LI><a href="#[f9]">month_event_cb</a> from lv_calendar_header_arrow.o(.text.month_event_cb) referenced 4 times from lv_calendar_header_arrow.o(.text.my_constructor)
 <LI><a href="#[159]">my_constructor</a> from lv_calendar_header_arrow.o(.text.my_constructor) referenced from lv_calendar_header_arrow.o(.rodata.lv_calendar_header_arrow_class)
 <LI><a href="#[15a]">my_constructor</a> from lv_calendar_header_dropdown.o(.text.my_constructor) referenced from lv_calendar_header_dropdown.o(.rodata.lv_calendar_header_dropdown_class)
 <LI><a href="#[105]">osRtxIdleThread</a> from rtx_config.o(.text.osRtxIdleThread) referenced from rtx_thread.o(.text.osRtxThreadStartup)
 <LI><a href="#[143]">osRtxMemoryInit</a> from rtx_memory.o(.text.osRtxMemoryInit) referenced from rtx_kernel.o(.text.svcRtxKernelInitialize)
 <LI><a href="#[144]">osRtxSemaphorePostProcess</a> from rtx_semaphore.o(.text.osRtxSemaphorePostProcess) referenced from rtx_semaphore.o(.text.svcRtxSemaphoreNew)
 <LI><a href="#[146]">osRtxThreadPostProcess</a> from rtx_thread.o(.text.osRtxThreadPostProcess) referenced from rtx_thread.o(.text.svcRtxThreadNew)
 <LI><a href="#[145]">osThreadExit</a> from rtx_thread.o(.text.osThreadExit) referenced from rtx_thread.o(.text.svcRtxThreadNew)
 <LI><a href="#[f2]">pwd_char_hider_anim</a> from lv_textarea.o(.text.pwd_char_hider_anim) referenced 2 times from lv_textarea.o(.text.lv_textarea_add_char)
 <LI><a href="#[f2]">pwd_char_hider_anim</a> from lv_textarea.o(.text.pwd_char_hider_anim) referenced 2 times from lv_textarea.o(.text.lv_textarea_add_text)
 <LI><a href="#[f2]">pwd_char_hider_anim</a> from lv_textarea.o(.text.pwd_char_hider_anim) referenced 2 times from lv_textarea.o(.text.lv_textarea_set_text)
 <LI><a href="#[f4]">pwd_char_hider_anim_ready</a> from lv_textarea.o(.text.pwd_char_hider_anim_ready) referenced 2 times from lv_textarea.o(.text.lv_textarea_add_char)
 <LI><a href="#[f4]">pwd_char_hider_anim_ready</a> from lv_textarea.o(.text.pwd_char_hider_anim_ready) referenced 2 times from lv_textarea.o(.text.lv_textarea_add_text)
 <LI><a href="#[f4]">pwd_char_hider_anim_ready</a> from lv_textarea.o(.text.pwd_char_hider_anim_ready) referenced 2 times from lv_textarea.o(.text.lv_textarea_set_text)
 <LI><a href="#[10f]">read_reg</a> from ov2640.o(.text.read_reg) referenced 2 times from ov2640.o(.text.ov2640_init)
 <LI><a href="#[124]">read_reg</a> from ov7725.o(.text.read_reg) referenced 2 times from ov7725.o(.text.ov7725_init)
 <LI><a href="#[10e]">reset</a> from ov2640.o(.text.reset) referenced 2 times from ov2640.o(.text.ov2640_init)
 <LI><a href="#[123]">reset</a> from ov7725.o(.text.reset) referenced 2 times from ov7725.o(.text.ov7725_init)
 <LI><a href="#[139]">rte_calloc</a> from rte_adapter_cmsis_rtos2.o(.text.rte_calloc) referenced 2 times from rte_adapter_cmsis_rtos2.o(.text.rte_init)
 <LI><a href="#[147]">rte_data_out</a> from system_thread.o(.text.rte_data_out) referenced 2 times from system_thread.o(.text.system_thread)
 <LI><a href="#[13b]">rte_free</a> from rte_adapter_cmsis_rtos2.o(.text.rte_free) referenced 2 times from rte_adapter_cmsis_rtos2.o(.text.rte_init)
 <LI><a href="#[13c]">rte_get_tick</a> from rte_adapter_cmsis_rtos2.o(.text.rte_get_tick) referenced 2 times from rte_adapter_cmsis_rtos2.o(.text.rte_init)
 <LI><a href="#[138]">rte_malloc</a> from rte_adapter_cmsis_rtos2.o(.text.rte_malloc) referenced 2 times from rte_adapter_cmsis_rtos2.o(.text.rte_init)
 <LI><a href="#[cb]">rte_mutex_lock</a> from rte_adapter_cmsis_rtos2.o(.text.rte_mutex_lock) referenced 2 times from hal_com_stm32h7.o(.text.com_create)
 <LI><a href="#[cb]">rte_mutex_lock</a> from rte_adapter_cmsis_rtos2.o(.text.rte_mutex_lock) referenced 2 times from rte_adapter_cmsis_rtos2.o(.text.rte_init)
 <LI><a href="#[cb]">rte_mutex_lock</a> from rte_adapter_cmsis_rtos2.o(.text.rte_mutex_lock) referenced 2 times from hal_spi_stm32h7.o(.text.spi_create)
 <LI><a href="#[cc]">rte_mutex_trylock</a> from rte_adapter_cmsis_rtos2.o(.text.rte_mutex_trylock) referenced 2 times from hal_com_stm32h7.o(.text.com_create)
 <LI><a href="#[cc]">rte_mutex_trylock</a> from rte_adapter_cmsis_rtos2.o(.text.rte_mutex_trylock) referenced 2 times from hal_spi_stm32h7.o(.text.spi_create)
 <LI><a href="#[cd]">rte_mutex_unlock</a> from rte_adapter_cmsis_rtos2.o(.text.rte_mutex_unlock) referenced 2 times from hal_com_stm32h7.o(.text.com_create)
 <LI><a href="#[cd]">rte_mutex_unlock</a> from rte_adapter_cmsis_rtos2.o(.text.rte_mutex_unlock) referenced 2 times from rte_adapter_cmsis_rtos2.o(.text.rte_init)
 <LI><a href="#[cd]">rte_mutex_unlock</a> from rte_adapter_cmsis_rtos2.o(.text.rte_mutex_unlock) referenced 2 times from hal_spi_stm32h7.o(.text.spi_create)
 <LI><a href="#[13a]">rte_realloc</a> from rte_adapter_cmsis_rtos2.o(.text.rte_realloc) referenced 2 times from rte_adapter_cmsis_rtos2.o(.text.rte_init)
 <LI><a href="#[148]">running_timer</a> from system_thread.o(.text.running_timer) referenced 2 times from system_thread.o(.text.system_thread)
 <LI><a href="#[eb]">scroll_anim_ready_cb</a> from lv_obj_scroll.o(.text.scroll_anim_ready_cb) referenced 2 times from lv_obj_scroll.o(.text.lv_obj_scroll_by)
 <LI><a href="#[137]">scroll_anim_ready_cb</a> from lv_roller.o(.text.scroll_anim_ready_cb) referenced 2 times from lv_roller.o(.text.refr_position)
 <LI><a href="#[e8]">scroll_x_anim</a> from lv_obj_scroll.o(.text.scroll_x_anim) referenced 2 times from lv_obj_scroll.o(.text.lv_obj_get_scroll_end)
 <LI><a href="#[e8]">scroll_x_anim</a> from lv_obj_scroll.o(.text.scroll_x_anim) referenced 4 times from lv_obj_scroll.o(.text.lv_obj_scroll_by)
 <LI><a href="#[e8]">scroll_x_anim</a> from lv_obj_scroll.o(.text.scroll_x_anim) referenced 2 times from lv_obj_scroll.o(.text.lv_obj_scroll_to_x)
 <LI><a href="#[e8]">scroll_x_anim</a> from lv_obj_scroll.o(.text.scroll_x_anim) referenced 2 times from lv_obj_scroll.o(.text.scroll_area_into_view)
 <LI><a href="#[e9]">scroll_y_anim</a> from lv_obj_scroll.o(.text.scroll_y_anim) referenced 2 times from lv_obj_scroll.o(.text.lv_obj_get_scroll_end)
 <LI><a href="#[e9]">scroll_y_anim</a> from lv_obj_scroll.o(.text.scroll_y_anim) referenced 4 times from lv_obj_scroll.o(.text.lv_obj_scroll_by)
 <LI><a href="#[e9]">scroll_y_anim</a> from lv_obj_scroll.o(.text.scroll_y_anim) referenced 2 times from lv_obj_scroll.o(.text.lv_obj_scroll_to)
 <LI><a href="#[e9]">scroll_y_anim</a> from lv_obj_scroll.o(.text.scroll_y_anim) referenced 2 times from lv_obj_scroll.o(.text.lv_obj_scroll_to_y)
 <LI><a href="#[e9]">scroll_y_anim</a> from lv_obj_scroll.o(.text.scroll_y_anim) referenced 2 times from lv_obj_scroll.o(.text.scroll_area_into_view)
 <LI><a href="#[13d]">sensor_snapshot</a> from bsp_sensor.o(.text.sensor_snapshot) referenced 2 times from bsp_sensor.o(.text.sensor_init)
 <LI><a href="#[14d]">sensor_thread</a> from sensor_thread.o(.text.sensor_thread) referenced 2 times from system_thread.o(.text.system_thread)
 <LI><a href="#[11b]">set_auto_exposure</a> from ov2640.o(.text.set_auto_exposure) referenced 2 times from ov2640.o(.text.ov2640_init)
 <LI><a href="#[12f]">set_auto_exposure</a> from ov7725.o(.text.set_auto_exposure) referenced 2 times from ov7725.o(.text.ov7725_init)
 <LI><a href="#[119]">set_auto_gain</a> from ov2640.o(.text.set_auto_gain) referenced 2 times from ov2640.o(.text.ov2640_init)
 <LI><a href="#[12d]">set_auto_gain</a> from ov7725.o(.text.set_auto_gain) referenced 2 times from ov7725.o(.text.ov7725_init)
 <LI><a href="#[11d]">set_auto_whitebal</a> from ov2640.o(.text.set_auto_whitebal) referenced 2 times from ov2640.o(.text.ov2640_init)
 <LI><a href="#[131]">set_auto_whitebal</a> from ov7725.o(.text.set_auto_whitebal) referenced 2 times from ov7725.o(.text.ov7725_init)
 <LI><a href="#[114]">set_brightness</a> from ov2640.o(.text.set_brightness) referenced 2 times from ov2640.o(.text.ov2640_init)
 <LI><a href="#[129]">set_brightness</a> from ov7725.o(.text.set_brightness) referenced 2 times from ov7725.o(.text.ov7725_init)
 <LI><a href="#[118]">set_colorbar</a> from ov2640.o(.text.set_colorbar) referenced 2 times from ov2640.o(.text.ov2640_init)
 <LI><a href="#[12c]">set_colorbar</a> from ov7725.o(.text.set_colorbar) referenced 2 times from ov7725.o(.text.ov7725_init)
 <LI><a href="#[113]">set_contrast</a> from ov2640.o(.text.set_contrast) referenced 2 times from ov2640.o(.text.ov2640_init)
 <LI><a href="#[128]">set_contrast</a> from ov7725.o(.text.set_contrast) referenced 2 times from ov7725.o(.text.ov7725_init)
 <LI><a href="#[112]">set_framesize</a> from ov2640.o(.text.set_framesize) referenced 2 times from ov2640.o(.text.ov2640_init)
 <LI><a href="#[127]">set_framesize</a> from ov7725.o(.text.set_framesize) referenced 2 times from ov7725.o(.text.ov7725_init)
 <LI><a href="#[116]">set_gainceiling</a> from ov2640.o(.text.set_gainceiling) referenced 2 times from ov2640.o(.text.ov2640_init)
 <LI><a href="#[12b]">set_gainceiling</a> from ov7725.o(.text.set_gainceiling) referenced 2 times from ov7725.o(.text.ov7725_init)
 <LI><a href="#[11f]">set_hmirror</a> from ov2640.o(.text.set_hmirror) referenced 2 times from ov2640.o(.text.ov2640_init)
 <LI><a href="#[133]">set_hmirror</a> from ov7725.o(.text.set_hmirror) referenced 2 times from ov7725.o(.text.ov7725_init)
 <LI><a href="#[136]">set_lens_correction</a> from ov7725.o(.text.set_lens_correction) referenced 2 times from ov7725.o(.text.ov7725_init)
 <LI><a href="#[e6]">set_ofs_x_anim</a> from lv_label.o(.text.set_ofs_x_anim) referenced 8 times from lv_label.o(.text.lv_label_refr_text)
 <LI><a href="#[e6]">set_ofs_x_anim</a> from lv_label.o(.text.set_ofs_x_anim) referenced 2 times from lv_label.o(.text.lv_label_set_long_mode)
 <LI><a href="#[e7]">set_ofs_y_anim</a> from lv_label.o(.text.set_ofs_y_anim) referenced 6 times from lv_label.o(.text.lv_label_refr_text)
 <LI><a href="#[e7]">set_ofs_y_anim</a> from lv_label.o(.text.set_ofs_y_anim) referenced 2 times from lv_label.o(.text.lv_label_set_long_mode)
 <LI><a href="#[111]">set_pixformat</a> from ov2640.o(.text.set_pixformat) referenced 2 times from ov2640.o(.text.ov2640_init)
 <LI><a href="#[126]">set_pixformat</a> from ov7725.o(.text.set_pixformat) referenced 2 times from ov7725.o(.text.ov7725_init)
 <LI><a href="#[117]">set_quality</a> from ov2640.o(.text.set_quality) referenced 2 times from ov2640.o(.text.ov2640_init)
 <LI><a href="#[115]">set_saturation</a> from ov2640.o(.text.set_saturation) referenced 2 times from ov2640.o(.text.ov2640_init)
 <LI><a href="#[12a]">set_saturation</a> from ov7725.o(.text.set_saturation) referenced 2 times from ov7725.o(.text.ov7725_init)
 <LI><a href="#[121]">set_special_effect</a> from ov2640.o(.text.set_special_effect) referenced 2 times from ov2640.o(.text.ov2640_init)
 <LI><a href="#[135]">set_special_effect</a> from ov7725.o(.text.set_special_effect) referenced 2 times from ov7725.o(.text.ov7725_init)
 <LI><a href="#[120]">set_vflip</a> from ov2640.o(.text.set_vflip) referenced 2 times from ov2640.o(.text.ov2640_init)
 <LI><a href="#[134]">set_vflip</a> from ov7725.o(.text.set_vflip) referenced 2 times from ov7725.o(.text.ov7725_init)
 <LI><a href="#[ec]">set_y_anim</a> from lv_roller.o(.text.set_y_anim) referenced 2 times from lv_roller.o(.text.lv_roller_event)
 <LI><a href="#[ec]">set_y_anim</a> from lv_roller.o(.text.set_y_anim) referenced 4 times from lv_roller.o(.text.refr_position)
 <LI><a href="#[199]">shellBackspace</a> from shell.o(.text.shellBackspace) referenced 2 times from shell.o(shellCommand)
 <LI><a href="#[1a1]">shellClear</a> from shell.o(.text.shellClear) referenced from shell.o(shellCommand)
 <LI><a href="#[19e]">shellCmds</a> from shell.o(.text.shellCmds) referenced from shell.o(shellCommand)
 <LI><a href="#[19a]">shellDelete</a> from shell.o(.text.shellDelete) referenced from shell.o(shellCommand)
 <LI><a href="#[195]">shellDown</a> from shell.o(.text.shellDown) referenced from shell.o(shellCommand)
 <LI><a href="#[19b]">shellEnter</a> from shell.o(.text.shellEnter) referenced 2 times from shell.o(shellCommand)
 <LI><a href="#[19c]">shellHelp</a> from shell.o(.text.shellHelp) referenced from shell.o(shellCommand)
 <LI><a href="#[1a0]">shellKeys</a> from shell.o(.text.shellKeys) referenced from shell.o(shellCommand)
 <LI><a href="#[197]">shellLeft</a> from shell.o(.text.shellLeft) referenced from shell.o(shellCommand)
 <LI><a href="#[196]">shellRight</a> from shell.o(.text.shellRight) referenced from shell.o(shellCommand)
 <LI><a href="#[193]">shellSetVar</a> from shell.o(.text.shellSetVar) referenced from shell.o(shellCommand)
 <LI><a href="#[198]">shellTab</a> from shell.o(.text.shellTab) referenced from shell.o(shellCommand)
 <LI><a href="#[14b]">shellTask</a> from shell.o(.text.shellTask) referenced 2 times from system_thread.o(.text.system_thread)
 <LI><a href="#[194]">shellUp</a> from shell.o(.text.shellUp) referenced from shell.o(shellCommand)
 <LI><a href="#[19d]">shellUsers</a> from shell.o(.text.shellUsers) referenced from shell.o(shellCommand)
 <LI><a href="#[19f]">shellVars</a> from shell.o(.text.shellVars) referenced from shell.o(shellCommand)
 <LI><a href="#[14e]">single_timer_free_cb</a> from rte_timer.o(.text.single_timer_free_cb) referenced 2 times from rte_timer.o(.text.timer_create_group)
 <LI><a href="#[10d]">sleep</a> from ov2640.o(.text.sleep) referenced 2 times from ov2640.o(.text.ov2640_init)
 <LI><a href="#[122]">sleep</a> from ov7725.o(.text.sleep) referenced 2 times from ov7725.o(.text.ov7725_init)
 <LI><a href="#[13e]">spi_recv</a> from hal_spi_stm32h7.o(.text.spi_recv) referenced 2 times from hal_spi_stm32h7.o(.text.spi_create)
 <LI><a href="#[13f]">spi_send</a> from hal_spi_stm32h7.o(.text.spi_send) referenced 2 times from hal_spi_stm32h7.o(.text.spi_create)
 <LI><a href="#[140]">spi_send_async</a> from hal_spi_stm32h7.o(.text.spi_send_async) referenced 2 times from hal_spi_stm32h7.o(.text.spi_create)
 <LI><a href="#[fc]">svcRtxDelay</a> from rtx_delay.o(.text.svcRtxDelay) referenced from rtx_delay.o(.text.osDelay)
 <LI><a href="#[fd]">svcRtxKernelGetState</a> from rtx_kernel.o(.text.svcRtxKernelGetState) referenced from rtx_kernel.o(.text.osKernelGetState)
 <LI><a href="#[fe]">svcRtxKernelGetTickCount</a> from rtx_kernel.o(.text.svcRtxKernelGetTickCount) referenced from rtx_kernel.o(.text.osKernelGetTickCount)
 <LI><a href="#[ff]">svcRtxKernelInitialize</a> from rtx_kernel.o(.text.svcRtxKernelInitialize) referenced from rtx_kernel.o(.text.osKernelInitialize)
 <LI><a href="#[100]">svcRtxKernelStart</a> from rtx_kernel.o(.text.svcRtxKernelStart) referenced from rtx_kernel.o(.text.osKernelStart)
 <LI><a href="#[101]">svcRtxMutexAcquire</a> from rtx_mutex.o(.text.svcRtxMutexAcquire) referenced from rtx_mutex.o(.text.osMutexAcquire)
 <LI><a href="#[102]">svcRtxMutexDelete</a> from rtx_mutex.o(.text.svcRtxMutexDelete) referenced from rtx_mutex.o(.text.osMutexDelete)
 <LI><a href="#[103]">svcRtxMutexNew</a> from rtx_mutex.o(.text.svcRtxMutexNew) referenced from rtx_mutex.o(.text.osMutexNew)
 <LI><a href="#[104]">svcRtxMutexRelease</a> from rtx_mutex.o(.text.svcRtxMutexRelease) referenced from rtx_mutex.o(.text.osMutexRelease)
 <LI><a href="#[106]">svcRtxSemaphoreAcquire</a> from rtx_semaphore.o(.text.svcRtxSemaphoreAcquire) referenced from rtx_semaphore.o(.text.osSemaphoreAcquire)
 <LI><a href="#[107]">svcRtxSemaphoreNew</a> from rtx_semaphore.o(.text.svcRtxSemaphoreNew) referenced from rtx_semaphore.o(.text.osSemaphoreNew)
 <LI><a href="#[108]">svcRtxSemaphoreRelease</a> from rtx_semaphore.o(.text.svcRtxSemaphoreRelease) referenced from rtx_semaphore.o(.text.osSemaphoreRelease)
 <LI><a href="#[109]">svcRtxThreadExit</a> from rtx_thread.o(.text.svcRtxThreadExit) referenced from rtx_thread.o(.text.osThreadExit)
 <LI><a href="#[10a]">svcRtxThreadGetId</a> from rtx_thread.o(.text.svcRtxThreadGetId) referenced from rtx_thread.o(.text.osThreadGetId)
 <LI><a href="#[10b]">svcRtxThreadNew</a> from rtx_thread.o(.text.svcRtxThreadNew) referenced from rtx_thread.o(.text.osThreadNew)
 <LI><a href="#[10c]">svcRtxThreadSetPriority</a> from rtx_thread.o(.text.svcRtxThreadSetPriority) referenced from rtx_thread.o(.text.osThreadSetPriority)
 <LI><a href="#[f8]">system_thread</a> from system_thread.o(.text.system_thread) referenced 2 times from main.o(.text.main)
 <LI><a href="#[f6]">theme_apply</a> from lv_theme_default.o(.text.theme_apply) referenced 2 times from lv_theme_default.o(.text.lv_theme_default_init)
 <LI><a href="#[f7]">tileview_event_cb</a> from lv_tileview.o(.text.tileview_event_cb) referenced 2 times from lv_tileview.o(.text.lv_tileview_constructor)
 <LI><a href="#[c3]">trans_anim_cb</a> from lv_obj_style.o(.text.trans_anim_cb) referenced 2 times from lv_obj_style.o(.text._lv_obj_style_create_transition)
 <LI><a href="#[c5]">trans_anim_ready_cb</a> from lv_obj_style.o(.text.trans_anim_ready_cb) referenced 2 times from lv_obj_style.o(.text._lv_obj_style_create_transition)
 <LI><a href="#[c4]">trans_anim_start_cb</a> from lv_obj_style.o(.text.trans_anim_start_cb) referenced 2 times from lv_obj_style.o(.text._lv_obj_style_create_transition)
 <LI><a href="#[d4]">unicode_list_compare</a> from lv_font_fmt_txt.o(.text.unicode_list_compare) referenced 4 times from lv_font_fmt_txt.o(.text.get_glyph_dsc_id)
 <LI><a href="#[14a]">userShellRead</a> from system_thread.o(.text.userShellRead) referenced 2 times from system_thread.o(.text.system_thread)
 <LI><a href="#[149]">userShellWrite</a> from system_thread.o(.text.userShellWrite) referenced 2 times from system_thread.o(.text.system_thread)
 <LI><a href="#[110]">write_reg</a> from ov2640.o(.text.write_reg) referenced 2 times from ov2640.o(.text.ov2640_init)
 <LI><a href="#[125]">write_reg</a> from ov7725.o(.text.write_reg) referenced 2 times from ov7725.o(.text.ov7725_init)
 <LI><a href="#[fa]">year_event_cb</a> from lv_calendar_header_dropdown.o(.text.year_event_cb) referenced 2 times from lv_calendar_header_dropdown.o(.text.my_constructor)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[9d]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(.text)
</UL>
<P><STRONG><a name="[1a6]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[1a8]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[535]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[536]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[537]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[538]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[539]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[1a9]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[1ed]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[1ab]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[1ad]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[1af]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[1b0]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[1b1]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[53a]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[1b3]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1b5]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1b6]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1b7]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[1b9]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[1bb]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[1bd]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[1be]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[1bf]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[1c1]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[53b]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[1c3]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[1c5]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[1c7]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[1c9]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[53c]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[1d7]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[1cb]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[53d]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1cd]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_common &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[53e]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[53f]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[540]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[541]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1cf]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[542]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[543]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1d0]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[544]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[545]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[546]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[547]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[548]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[549]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[54a]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[54b]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[54c]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[54d]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[54e]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[54f]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[550]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[1dc]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[551]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[552]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[553]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[554]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[555]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[556]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[557]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[1a7]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[558]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[1d2]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1d4]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_postsh_1 &rArr; _platform_post_stackheap_init &rArr; osKernelInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[1d6]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1d8]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 2244 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; MX_JPEG_Init &rArr; HAL_JPEG_Init &rArr; JPEG_Set_HuffAC_Mem &rArr; JPEG_Bits_To_SizeCodes &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[559]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[216]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1db]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[55a]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[1dd]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[7]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>BDMA_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>BDMA_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>BDMA_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>BDMA_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>BDMA_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>BDMA_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>BDMA_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>BDMA_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>COMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>DMAMUX2_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>ECC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>FDCAN2_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>FDCAN2_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>FDCAN_CAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>HRTIM1_FLT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>HRTIM1_Master_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>HRTIM1_TIMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>HRTIM1_TIMB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>HRTIM1_TIMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>HRTIM1_TIMD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>HRTIM1_TIME_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>HSEM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>LPTIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>LPTIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>LPTIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>MDIOS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>MDIOS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>OTG_FS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>OTG_FS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>PVD_AVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>SAI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>SAI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>SDMMC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>WAKEUP_PIN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[215]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32h743xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[d]"></a>SVC_Handler</STRONG> (Thumb, 154 bytes, Stack size unknown bytes, irq_armv7m.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>PendSV_Handler</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, irq_armv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = PendSV_Handler &rArr; osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, irq_armv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; osRtxTick_Handler &rArr; osRtxThreadDelayTick &rArr; osRtxMutexOwnerRestore &rArr; osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> startup_stm32h743xx.o(RESET)
<LI> rtx_kernel.o(.text.svcRtxKernelStart)
</UL>
<P><STRONG><a name="[2b3]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[55b]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[1e1]"></a>vsnprintf</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_set_text_vfmt
</UL>

<P><STRONG><a name="[1e4]"></a>__2snprintf</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, __2snprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_updatevalue
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
</UL>

<P><STRONG><a name="[1e6]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[1e7]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[1e5]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[1b4]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[1eb]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[1ee]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory
</UL>

<P><STRONG><a name="[3b8]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>

<P><STRONG><a name="[415]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_set_options
</UL>

<P><STRONG><a name="[2f8]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_log_output
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_ext
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_updatevalue
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_set_options
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_ins
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_cut
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellRunCommand
</UL>

<P><STRONG><a name="[512]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSeekCommand
</UL>

<P><STRONG><a name="[1f4]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_send_async
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recv_async
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_remove_by_index
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_push
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_realloc
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_morph
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;binary_erode
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_expand
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_blur_corner
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_ctrl_map
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_ins
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[1f1]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[55c]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[372]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_remove_by_index
</UL>

<P><STRONG><a name="[1f3]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[55d]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[1f2]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_morph
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;binary_erode
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_expand
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[55e]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[55f]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[560]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[371]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_remove_by_index
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_control
</UL>

<P><STRONG><a name="[561]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[1f6]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[1f5]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[562]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[1f7]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_vsnprintf
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_init
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Bits_To_SizeCodes
</UL>

<P><STRONG><a name="[1f9]"></a>__aeabi_memset4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memset4 &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_updatevalue
</UL>

<P><STRONG><a name="[563]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_memset4.o(.text), UNUSED)

<P><STRONG><a name="[1fc]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_input_mcu_buffer
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_init
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_calloc
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_calloc_object
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_calloc_calculate
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_angle
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line_points_init
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_constructor
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[564]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[1f8]"></a>_memset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[239]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_init
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_pool
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[565]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[566]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1fa]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>

<P><STRONG><a name="[1fb]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_vsnprintf
</UL>

<P><STRONG><a name="[3b7]"></a>strcmp</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, strcmpv7m_pel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellInit
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_control
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_get_btn_text
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSeekCommand
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellRunCommand
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExec
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[567]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[568]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[569]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1ef]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[56a]"></a>__errno$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text), UNUSED)

<P><STRONG><a name="[56b]"></a>__rt_errno_addr$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text), UNUSED)

<P><STRONG><a name="[1fe]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[1ff]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __set_errno &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log2
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[1e8]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1e9]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[1ea]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>

<P><STRONG><a name="[1aa]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[1e2]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[1e3]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[9e]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> vsnprintf.o(.text)
<LI> __2snprintf.o(.text)
</UL>
<P><STRONG><a name="[200]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[1c4]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[1c6]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[201]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[1bc]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[204]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[1b8]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[1c0]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[205]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[1ba]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[1c2]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[1ac]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[1f0]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtol &rArr; _strtoul &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[56c]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[214]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[206]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c16rtomb
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[203]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[20d]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[210]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[211]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[1c8]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[1ca]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[207]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _strtoul &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[213]"></a>_c16rtomb</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, _c16rtomb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[202]"></a>_wcrtomb</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, _c16rtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[1d3]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[1ce]"></a>__rt_locale</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_locale_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[20f]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[212]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[209]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1da]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1de]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[56d]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[56e]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[56f]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[b]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DCMI_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.DCMI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DCMI_IRQHandler &rArr; HAL_DCMI_IRQHandler &rArr; HAL_DCMI_FrameEventCallback &rArr; osSemaphoreRelease &rArr; SemaphoreTokenIncrement
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.DMA1_Stream0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA1_Stream0_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.DMA1_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA1_Stream1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.DMA1_Stream2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA1_Stream2_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.DMA2_Stream0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA2_Stream0_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[224]"></a>Error_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_JPEG_Init
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_MspInit
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_QUADSPI_Init
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_MspInit
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DCMI_Init
</UL>

<P><STRONG><a name="[217]"></a>HAL_DCMI_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_dcmi.o(.text.HAL_DCMI_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_DMAError
</UL>

<P><STRONG><a name="[21b]"></a>HAL_DCMI_FrameEventCallback</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bsp_sensor.o(.text.HAL_DCMI_FrameEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DCMI_FrameEventCallback &rArr; osSemaphoreRelease &rArr; SemaphoreTokenIncrement
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_IRQHandler
</UL>

<P><STRONG><a name="[219]"></a>HAL_DCMI_IRQHandler</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, stm32h7xx_hal_dcmi.o(.text.HAL_DCMI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_DCMI_IRQHandler &rArr; HAL_DCMI_FrameEventCallback &rArr; osSemaphoreRelease &rArr; SemaphoreTokenIncrement
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_FrameEventCallback
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_VsyncEventCallback
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_LineEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_IRQHandler
</UL>

<P><STRONG><a name="[220]"></a>HAL_DCMI_Init</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, stm32h7xx_hal_dcmi.o(.text.HAL_DCMI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = HAL_DCMI_Init &rArr; HAL_DCMI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DCMI_Init
</UL>

<P><STRONG><a name="[21f]"></a>HAL_DCMI_LineEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_dcmi.o(.text.HAL_DCMI_LineEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_IRQHandler
</UL>

<P><STRONG><a name="[221]"></a>HAL_DCMI_MspInit</STRONG> (Thumb, 384 bytes, Stack size 56 bytes, dcmi.o(.text.HAL_DCMI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = HAL_DCMI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_Init
</UL>

<P><STRONG><a name="[227]"></a>HAL_DCMI_Start_DMA</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, stm32h7xx_hal_dcmi.o(.text.HAL_DCMI_Start_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_DCMI_Start_DMA &rArr; HAL_DMAEx_MultiBufferStart_IT &rArr; DMA_MultiBufferSetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMAEx_MultiBufferStart_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_snapshot
</UL>

<P><STRONG><a name="[22a]"></a>HAL_DCMI_Stop</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, stm32h7xx_hal_dcmi.o(.text.HAL_DCMI_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_DCMI_Stop &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_snapshot
</UL>

<P><STRONG><a name="[21d]"></a>HAL_DCMI_VsyncEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_dcmi.o(.text.HAL_DCMI_VsyncEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_IRQHandler
</UL>

<P><STRONG><a name="[218]"></a>HAL_DMAEx_ChangeMemory</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal_dma_ex.o(.text.HAL_DMAEx_ChangeMemory))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_DMAXferCplt
</UL>

<P><STRONG><a name="[229]"></a>HAL_DMAEx_MultiBufferStart_IT</STRONG> (Thumb, 1590 bytes, Stack size 32 bytes, stm32h7xx_hal_dma_ex.o(.text.HAL_DMAEx_MultiBufferStart_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_DMAEx_MultiBufferStart_IT &rArr; DMA_MultiBufferSetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_MultiBufferSetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_Start_DMA
</UL>

<P><STRONG><a name="[22b]"></a>HAL_DMA_Abort</STRONG> (Thumb, 1332 bytes, Stack size 24 bytes, stm32h7xx_hal_dma.o(.text.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_Stop
</UL>

<P><STRONG><a name="[21e]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 698 bytes, Stack size 8 bytes, stm32h7xx_hal_dma.o(.text.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortTransmit_IT
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceive_IT
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_IRQHandler
</UL>

<P><STRONG><a name="[2ab]"></a>HAL_DMA_GetError</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(.text.HAL_DMA_GetError))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAError
</UL>

<P><STRONG><a name="[21a]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 2104 bytes, Stack size 40 bytes, stm32h7xx_hal_dma.o(.text.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream0_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream2_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream0_IRQHandler
</UL>

<P><STRONG><a name="[223]"></a>HAL_DMA_Init</STRONG> (Thumb, 1820 bytes, Stack size 24 bytes, stm32h7xx_hal_dma.o(.text.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_MspInit
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[228]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 934 bytes, Stack size 16 bytes, stm32h7xx_hal_dma.o(.text.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_Start_DMA
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit_DMA
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_DMA
</UL>

<P><STRONG><a name="[222]"></a>HAL_GPIO_Init</STRONG> (Thumb, 486 bytes, Stack size 60 bytes, stm32h7xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_MspInit
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[389]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal_gpio.o(.text.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_toggle
</UL>

<P><STRONG><a name="[29d]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_low
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_high
</UL>

<P><STRONG><a name="[26d]"></a>HAL_GetREVID</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.HAL_GetREVID))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[22d]"></a>HAL_GetTick</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rte_adapter_cmsis_rtos2.o(.text.HAL_GetTick))
<BR><BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MDMA_Init
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_Abort
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_IsDeviceReady
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MDMA_Abort
</UL>

<P><STRONG><a name="[29f]"></a>HAL_I2CEx_ConfigAnalogFilter</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32h7xx_hal_i2c_ex.o(.text.HAL_I2CEx_ConfigAnalogFilter))
<BR><BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init
</UL>

<P><STRONG><a name="[2a0]"></a>HAL_I2CEx_ConfigDigitalFilter</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, stm32h7xx_hal_i2c_ex.o(.text.HAL_I2CEx_ConfigDigitalFilter))
<BR><BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init
</UL>

<P><STRONG><a name="[231]"></a>HAL_I2C_Init</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, stm32h7xx_hal_i2c.o(.text.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init
</UL>

<P><STRONG><a name="[233]"></a>HAL_I2C_IsDeviceReady</STRONG> (Thumb, 576 bytes, Stack size 40 bytes, stm32h7xx_hal_i2c.o(.text.HAL_I2C_IsDeviceReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_I2C_IsDeviceReady
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_init
</UL>

<P><STRONG><a name="[234]"></a>HAL_I2C_Master_Receive</STRONG> (Thumb, 690 bytes, Stack size 32 bytes, stm32h7xx_hal_i2c.o(.text.HAL_I2C_Master_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_I2C_Master_Receive &rArr; I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_readb
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_init
</UL>

<P><STRONG><a name="[237]"></a>HAL_I2C_Master_Transmit</STRONG> (Thumb, 690 bytes, Stack size 32 bytes, stm32h7xx_hal_i2c.o(.text.HAL_I2C_Master_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_writeb
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_readb
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_init
</UL>

<P><STRONG><a name="[232]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 150 bytes, Stack size 232 bytes, i2c.o(.text.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[23b]"></a>HAL_Init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, stm32h7xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[23e]"></a>HAL_InitTick</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32h7xx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[241]"></a>HAL_JPEG_Abort</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, stm32h7xx_hal_jpeg.o(.text.HAL_JPEG_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_JPEG_Abort &rArr; HAL_MDMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MDMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_jpeg_compress
</UL>

<P><STRONG><a name="[243]"></a>HAL_JPEG_ConfigEncoding</STRONG> (Thumb, 692 bytes, Stack size 16 bytes, stm32h7xx_hal_jpeg.o(.text.HAL_JPEG_ConfigEncoding))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_JPEG_ConfigEncoding &rArr; JPEG_Set_Quantization_Mem
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Set_Quantization_Mem
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_jpeg_compress
</UL>

<P><STRONG><a name="[24d]"></a>HAL_JPEG_ConfigInputBuffer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_jpeg.o(.text.HAL_JPEG_ConfigInputBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_GetDataCallback
</UL>

<P><STRONG><a name="[246]"></a>HAL_JPEG_ConfigOutputBuffer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_jpeg.o(.text.HAL_JPEG_ConfigOutputBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_DataReadyCallback
</UL>

<P><STRONG><a name="[245]"></a>HAL_JPEG_DataReadyCallback</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, bsp_jpege.o(.text.HAL_JPEG_DataReadyCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_JPEG_DataReadyCallback &rArr; osSemaphoreRelease &rArr; SemaphoreTokenIncrement
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_ConfigOutputBuffer
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_StoreOutputData
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Process
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_MDMAOutCpltCallback
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_PollResidualData
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_EndProcess
</UL>

<P><STRONG><a name="[293]"></a>HAL_JPEG_DecodeCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_jpeg.o(.text.HAL_JPEG_DecodeCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Process
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_PollResidualData
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_EndProcess
</UL>

<P><STRONG><a name="[247]"></a>HAL_JPEG_EncodeCpltCallback</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, bsp_jpege.o(.text.HAL_JPEG_EncodeCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_JPEG_EncodeCpltCallback &rArr; osSemaphoreRelease &rArr; SemaphoreTokenIncrement
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Process
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_PollResidualData
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_EndProcess
</UL>

<P><STRONG><a name="[248]"></a>HAL_JPEG_Encode_DMA</STRONG> (Thumb, 260 bytes, Stack size 8 bytes, stm32h7xx_hal_jpeg.o(.text.HAL_JPEG_Encode_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_JPEG_Encode_DMA &rArr; JPEG_DMA_StartProcess &rArr; HAL_MDMA_Start_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_StartProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_jpeg_compress
</UL>

<P><STRONG><a name="[296]"></a>HAL_JPEG_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_jpeg.o(.text.HAL_JPEG_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_MDMAOutCpltCallback
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_MDMAInCpltCallback
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_MDMAErrorCallback
</UL>

<P><STRONG><a name="[24a]"></a>HAL_JPEG_GetDataCallback</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, bsp_jpege.o(.text.HAL_JPEG_GetDataCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = HAL_JPEG_GetDataCallback &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_ConfigInputBuffer
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_input_mcu_buffer
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_ReadInputData
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_MDMAInCpltCallback
</UL>

<P><STRONG><a name="[250]"></a>HAL_JPEG_GetInfo</STRONG> (Thumb, 492 bytes, Stack size 32 bytes, stm32h7xx_hal_jpeg.o(.text.HAL_JPEG_GetInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_JPEG_GetInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_IRQHandler
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Process
</UL>

<P><STRONG><a name="[24e]"></a>HAL_JPEG_IRQHandler</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, stm32h7xx_hal_jpeg.o(.text.HAL_JPEG_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = HAL_JPEG_IRQHandler &rArr; JPEG_Process &rArr; JPEG_ReadInputData &rArr; HAL_JPEG_GetDataCallback &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MDMA_Abort_IT
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_InfoReadyCallback
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_GetInfo
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Process
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_EndProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_IRQHandler
</UL>

<P><STRONG><a name="[251]"></a>HAL_JPEG_InfoReadyCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_jpeg.o(.text.HAL_JPEG_InfoReadyCallback))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_IRQHandler
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Process
</UL>

<P><STRONG><a name="[254]"></a>HAL_JPEG_Init</STRONG> (Thumb, 726 bytes, Stack size 32 bytes, stm32h7xx_hal_jpeg.o(.text.HAL_JPEG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 2212<LI>Call Chain = HAL_JPEG_Init &rArr; JPEG_Set_HuffAC_Mem &rArr; JPEG_Bits_To_SizeCodes &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_MspInit
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Set_HuffDC_Mem
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Set_HuffAC_Mem
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_JPEG_Init
</UL>

<P><STRONG><a name="[255]"></a>HAL_JPEG_MspInit</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, jpeg.o(.text.HAL_JPEG_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_JPEG_MspInit &rArr; HAL_MDMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MDMA_Init
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_Init
</UL>

<P><STRONG><a name="[242]"></a>HAL_MDMA_Abort</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, stm32h7xx_hal_mdma.o(.text.HAL_MDMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_MDMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_Abort
</UL>

<P><STRONG><a name="[252]"></a>HAL_MDMA_Abort_IT</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32h7xx_hal_mdma.o(.text.HAL_MDMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_IRQHandler
</UL>

<P><STRONG><a name="[299]"></a>HAL_MDMA_IRQHandler</STRONG> (Thumb, 486 bytes, Stack size 24 bytes, stm32h7xx_hal_mdma.o(.text.HAL_MDMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MDMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDMA_IRQHandler
</UL>

<P><STRONG><a name="[258]"></a>HAL_MDMA_Init</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, stm32h7xx_hal_mdma.o(.text.HAL_MDMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_MDMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_MspInit
</UL>

<P><STRONG><a name="[295]"></a>HAL_MDMA_Start_IT</STRONG> (Thumb, 300 bytes, Stack size 16 bytes, stm32h7xx_hal_mdma.o(.text.HAL_MDMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_MDMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_MDMAOutCpltCallback
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_MDMAInCpltCallback
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_StartProcess
</UL>

<P><STRONG><a name="[4c6]"></a>HAL_MPU_ConfigRegion</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32h7xx_hal_cortex.o(.text.HAL_MPU_ConfigRegion))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_MPU_ConfigRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c5]"></a>HAL_MPU_Disable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_MPU_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c7]"></a>HAL_MPU_Enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_MPU_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[23f]"></a>HAL_MspInit</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, stm32h7xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[226]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_MDMA_Init
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_MspInit
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_MspInit
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[225]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_MDMA_Init
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_MspInit
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_MspInit
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[23c]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[259]"></a>HAL_PWREx_ConfigSupply</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32h7xx_hal_pwr_ex.o(.text.HAL_PWREx_ConfigSupply))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PWREx_ConfigSupply
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[261]"></a>HAL_QSPI_AbortCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_qspi.o(.text.HAL_QSPI_AbortCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
</UL>

<P><STRONG><a name="[25e]"></a>HAL_QSPI_CmdCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_qspi.o(.text.HAL_QSPI_CmdCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
</UL>

<P><STRONG><a name="[260]"></a>HAL_QSPI_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_qspi.o(.text.HAL_QSPI_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_DMAAbortCplt
</UL>

<P><STRONG><a name="[25f]"></a>HAL_QSPI_FifoThresholdCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_qspi.o(.text.HAL_QSPI_FifoThresholdCallback))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
</UL>

<P><STRONG><a name="[25a]"></a>HAL_QSPI_IRQHandler</STRONG> (Thumb, 594 bytes, Stack size 8 bytes, stm32h7xx_hal_qspi.o(.text.HAL_QSPI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_QSPI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_TxCpltCallback
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_TimeOutCallback
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_StatusMatchCallback
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_RxCpltCallback
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_FifoThresholdCallback
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_ErrorCallback
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_CmdCpltCallback
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AbortCpltCallback
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MDMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUADSPI_IRQHandler
</UL>

<P><STRONG><a name="[263]"></a>HAL_QSPI_Init</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, stm32h7xx_hal_qspi.o(.text.HAL_QSPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = HAL_QSPI_Init &rArr; HAL_QSPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_QUADSPI_Init
</UL>

<P><STRONG><a name="[264]"></a>HAL_QSPI_MspInit</STRONG> (Thumb, 298 bytes, Stack size 248 bytes, quadspi.o(.text.HAL_QSPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = HAL_QSPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
</UL>

<P><STRONG><a name="[262]"></a>HAL_QSPI_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_qspi.o(.text.HAL_QSPI_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
</UL>

<P><STRONG><a name="[25c]"></a>HAL_QSPI_StatusMatchCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_qspi.o(.text.HAL_QSPI_StatusMatchCallback))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
</UL>

<P><STRONG><a name="[25d]"></a>HAL_QSPI_TimeOutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_qspi.o(.text.HAL_QSPI_TimeOutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
</UL>

<P><STRONG><a name="[25b]"></a>HAL_QSPI_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_qspi.o(.text.HAL_QSPI_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
</UL>

<P><STRONG><a name="[265]"></a>HAL_RCCEx_GetD3PCLK1Freq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetD3PCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCCEx_GetD3PCLK1Freq &rArr; HAL_RCC_GetHCLKFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[2b1]"></a>HAL_RCCEx_GetPLL2ClockFreq</STRONG> (Thumb, 394 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPLL2ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCCEx_GetPLL2ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[2b2]"></a>HAL_RCCEx_GetPLL3ClockFreq</STRONG> (Thumb, 394 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPLL3ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCCEx_GetPLL3ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[23a]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 3480 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[269]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 616 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[266]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetHCLKFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
</UL>

<P><STRONG><a name="[26a]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[26b]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[23d]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 372 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>

<P><STRONG><a name="[26c]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1254 bytes, Stack size 24 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetREVID
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[270]"></a>HAL_SPI_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_spi.o(.text.HAL_SPI_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAError
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAAbortOnError
</UL>

<P><STRONG><a name="[26e]"></a>HAL_SPI_IRQHandler</STRONG> (Thumb, 662 bytes, Stack size 40 bytes, stm32h7xx_hal_spi.o(.text.HAL_SPI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SPI_IRQHandler &rArr; HAL_SPI_TxCpltCallback &rArr; osSemaphoreRelease &rArr; SemaphoreTokenIncrement
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxCpltCallback
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxCpltCallback
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxCpltCallback
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_IRQHandler
</UL>

<P><STRONG><a name="[274]"></a>HAL_SPI_Init</STRONG> (Thumb, 352 bytes, Stack size 24 bytes, stm32h7xx_hal_spi.o(.text.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
</UL>

<P><STRONG><a name="[275]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 230 bytes, Stack size 232 bytes, spi.o(.text.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[276]"></a>HAL_SPI_Receive</STRONG> (Thumb, 874 bytes, Stack size 32 bytes, stm32h7xx_hal_spi.o(.text.HAL_SPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_recv
</UL>

<P><STRONG><a name="[273]"></a>HAL_SPI_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_spi.o(.text.HAL_SPI_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
</UL>

<P><STRONG><a name="[278]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 880 bytes, Stack size 32 bytes, stm32h7xx_hal_spi.o(.text.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_SPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send
</UL>

<P><STRONG><a name="[277]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 1146 bytes, Stack size 40 bytes, stm32h7xx_hal_spi.o(.text.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>

<P><STRONG><a name="[279]"></a>HAL_SPI_Transmit_DMA</STRONG> (Thumb, 338 bytes, Stack size 16 bytes, stm32h7xx_hal_spi.o(.text.HAL_SPI_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_SPI_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_async
</UL>

<P><STRONG><a name="[272]"></a>HAL_SPI_TxCpltCallback</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hal_spi_stm32h7.o(.text.HAL_SPI_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SPI_TxCpltCallback &rArr; osSemaphoreRelease &rArr; SemaphoreTokenIncrement
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
</UL>

<P><STRONG><a name="[2ac]"></a>HAL_SPI_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_spi.o(.text.HAL_SPI_TxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAHalfTransmitCplt
</UL>

<P><STRONG><a name="[271]"></a>HAL_SPI_TxRxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_spi.o(.text.HAL_SPI_TxRxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
</UL>

<P><STRONG><a name="[240]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[2a8]"></a>HAL_UARTEx_DisableFifoMode</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_UARTEx_DisableFifoMode))
<BR><BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[27a]"></a>HAL_UARTEx_ReceiveToIdle</STRONG> (Thumb, 476 bytes, Stack size 40 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_UARTEx_ReceiveToIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UARTEx_ReceiveToIdle
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recv
</UL>

<P><STRONG><a name="[27b]"></a>HAL_UARTEx_ReceiveToIdle_DMA</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_UARTEx_ReceiveToIdle_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recv_async
</UL>

<P><STRONG><a name="[27d]"></a>HAL_UARTEx_ReceiveToIdle_IT</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_UARTEx_ReceiveToIdle_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UARTEx_ReceiveToIdle_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recv_async
</UL>

<P><STRONG><a name="[27f]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hal_com_stm32h7.o(.text.HAL_UARTEx_RxEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UARTEx_RxEventCallback &rArr; osSemaphoreRelease &rArr; SemaphoreTokenIncrement
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
</UL>

<P><STRONG><a name="[289]"></a>HAL_UARTEx_RxFifoFullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_UARTEx_RxFifoFullCallback))
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[2a7]"></a>HAL_UARTEx_SetRxFifoThreshold</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_UARTEx_SetRxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UARTEx_SetRxFifoThreshold
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[2a6]"></a>HAL_UARTEx_SetTxFifoThreshold</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_UARTEx_SetTxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UARTEx_SetTxFifoThreshold
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[286]"></a>HAL_UARTEx_TxFifoEmptyCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_UARTEx_TxFifoEmptyCallback))
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[285]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_UARTEx_WakeupCallback))
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[281]"></a>HAL_UART_AbortReceiveCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_AbortReceiveCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceive_IT
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxOnlyAbortCallback
</UL>

<P><STRONG><a name="[280]"></a>HAL_UART_AbortReceive_IT</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_AbortReceive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UART_AbortReceive_IT &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceiveCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recv_async
</UL>

<P><STRONG><a name="[283]"></a>HAL_UART_AbortTransmitCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_AbortTransmitCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortTransmit_IT
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxOnlyAbortCallback
</UL>

<P><STRONG><a name="[282]"></a>HAL_UART_AbortTransmit_IT</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_AbortTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UART_AbortTransmit_IT &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortTransmitCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_send_async
</UL>

<P><STRONG><a name="[287]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[284]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 764 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_UART_TxCpltCallback &rArr; osSemaphoreRelease &rArr; SemaphoreTokenIncrement
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_TxFifoEmptyCallback
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxFifoFullCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[28a]"></a>HAL_UART_Init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[28b]"></a>HAL_UART_MspInit</STRONG> (Thumb, 282 bytes, Stack size 240 bytes, usart.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[2ae]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
</UL>

<P><STRONG><a name="[2af]"></a>HAL_UART_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_RxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
</UL>

<P><STRONG><a name="[28f]"></a>HAL_UART_Transmit</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_send
</UL>

<P><STRONG><a name="[291]"></a>HAL_UART_Transmit_DMA</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_send_async
</UL>

<P><STRONG><a name="[343]"></a>HAL_UART_Transmit_IT</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_send_async
</UL>

<P><STRONG><a name="[288]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hal_com_stm32h7.o(.text.HAL_UART_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UART_TxCpltCallback &rArr; osSemaphoreRelease &rArr; SemaphoreTokenIncrement
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATransmitCplt
</UL>

<P><STRONG><a name="[2b0]"></a>HAL_UART_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_TxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxHalfCplt
</UL>

<P><STRONG><a name="[9]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>JPEG_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.JPEG_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = JPEG_IRQHandler &rArr; HAL_JPEG_IRQHandler &rArr; JPEG_Process &rArr; JPEG_ReadInputData &rArr; HAL_JPEG_GetDataCallback &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>MDMA_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32h7xx_it.o(.text.MDMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MDMA_IRQHandler &rArr; HAL_MDMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MDMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[29a]"></a>MX_DCMI_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, dcmi.o(.text.MX_DCMI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = MX_DCMI_Init &rArr; HAL_DCMI_Init &rArr; HAL_DCMI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_Init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29b]"></a>MX_DMA_Init</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, dma.o(.text.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29c]"></a>MX_GPIO_Init</STRONG> (Thumb, 294 bytes, Stack size 64 bytes, gpio.o(.text.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29e]"></a>MX_I2C2_Init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, i2c.o(.text.MX_I2C2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = MX_I2C2_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a1]"></a>MX_JPEG_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, jpeg.o(.text.MX_JPEG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 2220<LI>Call Chain = MX_JPEG_Init &rArr; HAL_JPEG_Init &rArr; JPEG_Set_HuffAC_Mem &rArr; JPEG_Bits_To_SizeCodes &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_Init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a2]"></a>MX_MDMA_Init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, mdma.o(.text.MX_MDMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MX_MDMA_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a3]"></a>MX_QUADSPI_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, quadspi.o(.text.MX_QUADSPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = MX_QUADSPI_Init &rArr; HAL_QSPI_Init &rArr; HAL_QSPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a4]"></a>MX_SPI2_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, spi.o(.text.MX_SPI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = MX_SPI2_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a5]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, usart.o(.text.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4ed]"></a>OS_Tick_AcknowledgeIRQ</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_AcknowledgeIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[518]"></a>OS_Tick_Enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[517]"></a>OS_Tick_GetIRQn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_GetIRQn))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[516]"></a>OS_Tick_Setup</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_Setup))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[67]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.QUADSPI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QUADSPI_IRQHandler &rArr; HAL_QSPI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>SPI2_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.SPI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI2_IRQHandler &rArr; HAL_SPI_IRQHandler &rArr; HAL_SPI_TxCpltCallback &rArr; osSemaphoreRelease &rArr; SemaphoreTokenIncrement
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2ad]"></a>SystemClock_Config</STRONG> (Thumb, 216 bytes, Stack size 128 bytes, main.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9c]"></a>SystemInit</STRONG> (Thumb, 218 bytes, Stack size 8 bytes, system_stm32h7xx.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(.text)
</UL>
<P><STRONG><a name="[28d]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 224 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[28e]"></a>UART_CheckIdleState</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(.text.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_CheckIdleState
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[28c]"></a>UART_SetConfig</STRONG> (Thumb, 1984 bytes, Stack size 32 bytes, stm32h7xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[27c]"></a>UART_Start_Receive_DMA</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(.text.UART_Start_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle_DMA
</UL>

<P><STRONG><a name="[27e]"></a>UART_Start_Receive_IT</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(.text.UART_Start_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle_IT
</UL>

<P><STRONG><a name="[290]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, stm32h7xx_hal_uart.o(.text.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[36]"></a>USART1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_UART_TxCpltCallback &rArr; osSemaphoreRelease &rArr; SemaphoreTokenIncrement
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1fd]"></a>__user_perthread_libspace</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, rtx_lib.o(.text.__user_perthread_libspace))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[2b7]"></a>_lv_anim_core_init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lv_anim.o(.text._lv_anim_core_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = _lv_anim_core_init &rArr; lv_timer_create &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_resume
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_pause
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[2c3]"></a>_lv_area_intersect</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lv_area.o(.text._lv_area_intersect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box_label
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[2bd]"></a>_lv_area_is_in</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, lv_area.o(.text._lv_area_is_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_is_any
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
</UL>

<P><STRONG><a name="[2cb]"></a>_lv_area_is_on</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, lv_area.o(.text._lv_area_is_on))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[2bf]"></a>_lv_area_is_out</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, lv_area.o(.text._lv_area_is_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _lv_area_is_out &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_is_any
</UL>

<P><STRONG><a name="[2be]"></a>_lv_area_is_point_on</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, lv_area.o(.text._lv_area_is_point_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _lv_area_is_point_on
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_out
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_button_from_point
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[2cc]"></a>_lv_area_join</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lv_area.o(.text._lv_area_join))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _lv_area_join
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[2c0]"></a>_lv_blend_fill</STRONG> (Thumb, 4014 bytes, Stack size 104 bytes, lv_draw_blend.o(.text._lv_blend_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080 + Unknown Stack Size
<LI>Call Chain = _lv_blend_fill &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_fill
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_move
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_draw_buf
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
</UL>

<P><STRONG><a name="[2c8]"></a>_lv_blend_map</STRONG> (Thumb, 4594 bytes, Stack size 112 bytes, lv_draw_blend.o(.text._lv_blend_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088 + Unknown Stack Size
<LI>Call Chain = _lv_blend_map &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_draw_buf
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
</UL>

<P><STRONG><a name="[dd]"></a>_lv_disp_refr_timer</STRONG> (Thumb, 1402 bytes, Stack size 80 bytes, lv_refr.o(.text._lv_disp_refr_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 2160 + Unknown Stack Size
<LI>Call Chain = _lv_disp_refr_timer &rArr; lv_refr_area_part &rArr; lv_draw_rect &rArr; lv_draw_img &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_get_idle
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_free_all
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_draw_buf
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_font_clean_up_fmt_txt
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_draw_mask_cleanup
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_join
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_on
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_flush
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_color
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_align
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_top
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_right
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_left
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_bottom
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_opa
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_color
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_now
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_hal_disp.o(.text.lv_disp_drv_register)
</UL>
<P><STRONG><a name="[2d4]"></a>_lv_draw_mask_cleanup</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, lv_draw_mask.o(.text._lv_draw_mask_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = _lv_draw_mask_cleanup &rArr; lv_mem_free &rArr; memory_free &rArr; block_merge_next &rArr; remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[457]"></a>_lv_event_mark_deleted</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lv_event.o(.text._lv_event_mark_deleted))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_destructor
</UL>

<P><STRONG><a name="[2d3]"></a>_lv_font_clean_up_fmt_txt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_font_fmt_txt.o(.text._lv_font_clean_up_fmt_txt))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[2e5]"></a>_lv_fs_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_fs.o(.text._lv_fs_init))
<BR><BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[2e6]"></a>_lv_group_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_group.o(.text._lv_group_init))
<BR><BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[2e7]"></a>_lv_img_buf_get_transformed_area</STRONG> (Thumb, 522 bytes, Stack size 48 bytes, lv_img_buf.o(.text._lv_img_buf_get_transformed_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _lv_img_buf_get_transformed_area
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
</UL>

<P><STRONG><a name="[2e9]"></a>_lv_img_buf_transform</STRONG> (Thumb, 360 bytes, Stack size 40 bytes, lv_img_buf.o(.text._lv_img_buf_transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _lv_img_buf_transform &rArr; _lv_img_buf_transform_anti_alias &rArr; lv_img_buf_get_px_color
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_buf_get_px_color
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_buf_get_px_alpha
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_anti_alias
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
</UL>

<P><STRONG><a name="[2ec]"></a>_lv_img_buf_transform_anti_alias</STRONG> (Thumb, 990 bytes, Stack size 72 bytes, lv_img_buf.o(.text._lv_img_buf_transform_anti_alias))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _lv_img_buf_transform_anti_alias &rArr; lv_img_buf_get_px_color
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_buf_get_px_color
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_buf_get_px_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform
</UL>

<P><STRONG><a name="[2ed]"></a>_lv_img_buf_transform_init</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, lv_img_buf.o(.text._lv_img_buf_transform_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _lv_img_buf_transform_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_is_chroma_keyed
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_has_alpha
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
</UL>

<P><STRONG><a name="[2f0]"></a>_lv_img_cache_open</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, lv_img_cache.o(.text._lv_img_cache_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088 + Unknown Stack Size
<LI>Call Chain = _lv_img_cache_open &rArr; lv_img_decoder_open &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
</UL>

<P><STRONG><a name="[2f2]"></a>_lv_img_decoder_init</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, lv_img_decoder.o(.text._lv_img_decoder_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = _lv_img_decoder_init &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[2f4]"></a>_lv_inv_area</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, lv_refr.o(.text._lv_inv_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_resume
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
</UL>

<P><STRONG><a name="[2f5]"></a>_lv_ll_clear</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lv_ll.o(.text._lv_ll_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = _lv_ll_clear &rArr; lv_mem_free &rArr; memory_free &rArr; block_merge_next &rArr; remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_destructor
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_destructor
</UL>

<P><STRONG><a name="[2ba]"></a>_lv_ll_get_head</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_ll.o(.text._lv_ll_get_head))
<BR><BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_handler
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_next
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_get
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_destructor
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
</UL>

<P><STRONG><a name="[3e5]"></a>_lv_ll_get_len</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, lv_ll.o(.text._lv_ll_get_len))
<BR><BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
</UL>

<P><STRONG><a name="[30d]"></a>_lv_ll_get_next</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_ll.o(.text._lv_ll_get_next))
<BR><BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_handler
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_next
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_get
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
</UL>

<P><STRONG><a name="[3e4]"></a>_lv_ll_get_prev</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_ll.o(.text._lv_ll_get_prev))
<BR><BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
</UL>

<P><STRONG><a name="[3e3]"></a>_lv_ll_get_tail</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_ll.o(.text._lv_ll_get_tail))
<BR><BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
</UL>

<P><STRONG><a name="[2b8]"></a>_lv_ll_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_ll.o(.text._lv_ll_init))
<BR><BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_timer_core_init
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_init
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_decoder_init
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_fs_init
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_group_init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_constructor
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_constructor
</UL>

<P><STRONG><a name="[2f3]"></a>_lv_ll_ins_head</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lv_ll.o(.text._lv_ll_ins_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024 + Unknown Stack Size
<LI>Call Chain = _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_decoder_init
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
</UL>

<P><STRONG><a name="[2f7]"></a>_lv_ll_ins_tail</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lv_ll.o(.text._lv_ll_ins_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024 + Unknown Stack Size
<LI>Call Chain = _lv_ll_ins_tail &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
</UL>

<P><STRONG><a name="[3bf]"></a>_lv_ll_is_empty</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_ll.o(.text._lv_ll_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
</UL>

<P><STRONG><a name="[30e]"></a>_lv_ll_remove</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, lv_ll.o(.text._lv_ll_remove))
<BR><BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_handler
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_destructor
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
</UL>

<P><STRONG><a name="[2c6]"></a>_lv_log_add</STRONG> (Thumb, 234 bytes, Stack size 832 bytes, lv_log.o(.text._lv_log_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + Unknown Stack Size
<LI>Call Chain = _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_handler
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_layout_register
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_decoder_init
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_set_ext_draw_size
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_indev
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_prev
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_lighten
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_darken
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_read_line
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_main
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_flush
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_set_options
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_set_text_vfmt
</UL>

<P><STRONG><a name="[4d2]"></a>_lv_obj_destruct</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_obj_class.o(.text._lv_obj_destruct))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _lv_obj_destruct
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>

<P><STRONG><a name="[44f]"></a>_lv_obj_get_ext_draw_size</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj_draw.o(.text._lv_obj_get_ext_draw_size))
<BR><BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_visible
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
</UL>

<P><STRONG><a name="[2f9]"></a>_lv_obj_style_create_transition</STRONG> (Thumb, 394 bytes, Stack size 120 bytes, lv_obj_style.o(.text._lv_obj_style_create_transition))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176 + Unknown Stack Size
<LI>Call Chain = _lv_obj_style_create_transition &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_trans_style
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[2ff]"></a>_lv_obj_style_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj_style.o(.text._lv_obj_style_init))
<BR><BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[300]"></a>_lv_obj_style_state_compare</STRONG> (Thumb, 682 bytes, Stack size 40 bytes, lv_obj_style.o(.text._lv_obj_style_state_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _lv_obj_style_state_compare &rArr; lv_style_get_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_get_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[2c1]"></a>_lv_refr_get_disp_refreshing</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_refr.o(.text._lv_refr_get_disp_refreshing))
<BR><BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
</UL>

<P><STRONG><a name="[42d]"></a>_lv_refr_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_refr.o(.text._lv_refr_init))
<BR><BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[464]"></a>_lv_style_get_prop_group</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_style.o(.text._lv_style_get_prop_group))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>

<P><STRONG><a name="[302]"></a>_lv_timer_core_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lv_timer.o(.text._lv_timer_core_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _lv_timer_core_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[303]"></a>_lv_txt_cut</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, lv_txt.o(.text._lv_txt_cut))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _lv_txt_cut &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
</UL>

<P><STRONG><a name="[3fa]"></a>_lv_txt_encoded_letter_next_2</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, lv_txt.o(.text._lv_txt_encoded_letter_next_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _lv_txt_encoded_letter_next_2
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[304]"></a>_lv_txt_get_next_line</STRONG> (Thumb, 1420 bytes, Stack size 88 bytes, lv_txt.o(.text._lv_txt_get_next_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[306]"></a>_lv_txt_ins</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, lv_txt.o(.text._lv_txt_ins))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _lv_txt_ins &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
</UL>

<P><STRONG><a name="[43c]"></a>_lv_txt_is_cmd</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, lv_txt.o(.text._lv_txt_is_cmd))
<BR><BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[307]"></a>_lv_txt_set_text_vfmt</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, lv_txt.o(.text._lv_txt_set_text_vfmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = _lv_txt_set_text_vfmt &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
</UL>

<P><STRONG><a name="[384]"></a>_lv_utils_bsearch</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, lv_utils.o(.text._lv_utils_bsearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _lv_utils_bsearch
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc_fmt_txt
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_glyph_dsc_id
</UL>

<P><STRONG><a name="[1a3]"></a>_mutex_acquire</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rtx_lib.o(.text._mutex_acquire), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>

<P><STRONG><a name="[1a5]"></a>_mutex_free</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_lib.o(.text._mutex_free), UNUSED, KEPT)
<BR><BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[1a2]"></a>_mutex_initialize</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rtx_lib.o(.text._mutex_initialize), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _mutex_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>

<P><STRONG><a name="[1a4]"></a>_mutex_release</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rtx_lib.o(.text._mutex_release), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>

<P><STRONG><a name="[1d5]"></a>_platform_post_stackheap_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtx_lib.o(.text._platform_post_stackheap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _platform_post_stackheap_init &rArr; osKernelInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_postsh_1
</UL>

<P><STRONG><a name="[312]"></a>binary_erode</STRONG> (Thumb, 6074 bytes, Stack size 216 bytes, binary.o(.text.binary_erode))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = binary_erode &rArr; data_malloc_calculate &rArr; memory_alloc_align &rArr; block_locate_free &rArr; remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_free
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_get_mask_pixel
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_malloc_calculate
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edge_simple
</UL>

<P><STRONG><a name="[316]"></a>binary_image</STRONG> (Thumb, 5976 bytes, Stack size 136 bytes, binary.o(.text.binary_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = binary_image &rArr; data_calloc_calculate &rArr; memory_alloc_align &rArr; block_locate_free &rArr; remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_free
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_yuv_to_rgb
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_size
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_get_mask_pixel
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_calloc_calculate
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_foreach_value
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edge_simple
</UL>

<P><STRONG><a name="[320]"></a>bsp_jpeg_compress</STRONG> (Thumb, 752 bytes, Stack size 80 bytes, bsp_jpege.o(.text.bsp_jpeg_compress))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = bsp_jpeg_compress &rArr; memory_alloc_align &rArr; block_locate_free &rArr; remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_sizeof_max
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_Encode_DMA
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_ConfigEncoding
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_Abort
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_input_mcu_buffer
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc_align
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_free
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_thread
</UL>

<P><STRONG><a name="[325]"></a>bsp_jpeg_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsp_jpege.o(.text.bsp_jpeg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_jpeg_init
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_thread
</UL>

<P><STRONG><a name="[327]"></a>bsp_lcd_fill_color_normal</STRONG> (Thumb, 414 bytes, Stack size 64 bytes, bsp_lcd.o(.text.bsp_lcd_fill_color_normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = bsp_lcd_fill_color_normal &rArr; memory_alloc_align &rArr; block_locate_free &rArr; remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_low
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_high
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_set_cursor
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_device_write_async
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc_align
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_device_write_sync
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_free
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_init
</UL>

<P><STRONG><a name="[32d]"></a>bsp_lcd_fill_frame</STRONG> (Thumb, 328 bytes, Stack size 64 bytes, bsp_lcd.o(.text.bsp_lcd_fill_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = bsp_lcd_fill_frame &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_low
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_high
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_set_cursor
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_device_write_async
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_device_write_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_flush
</UL>

<P><STRONG><a name="[32e]"></a>bsp_lcd_init</STRONG> (Thumb, 2620 bytes, Stack size 64 bytes, bsp_lcd.o(.text.bsp_lcd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = bsp_lcd_init &rArr; bsp_lcd_fill_color_normal &rArr; memory_alloc_align &rArr; block_locate_free &rArr; remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_create
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_low
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_high
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_fill_color_normal
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc_align
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_fill_frame
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_device_write_sync
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_get_tick
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_delay_ms
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_free
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_thread
</UL>

<P><STRONG><a name="[335]"></a>cambus_readb</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, bsp_sensor.o(.text.cambus_readb))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cambus_readb &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_vflip
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pixformat
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_hmirror
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gainceiling
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_framesize
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_colorbar
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_auto_whitebal
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_auto_gain
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_auto_exposure
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reg
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rgb_gain_db
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gain_db
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_exposure_us
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_vflip
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_hmirror
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_colorbar
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_auto_whitebal
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_auto_gain
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_auto_exposure
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reg
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rgb_gain_db
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gain_db
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_exposure_us
</UL>

<P><STRONG><a name="[336]"></a>cambus_writeb</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bsp_sensor.o(.text.cambus_writeb))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cambus_writeb &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_vflip
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_special_effect
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_saturation
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pixformat
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_lens_correction
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_hmirror
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gainceiling
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_framesize
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_contrast
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_colorbar
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_brightness
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_auto_whitebal
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_auto_gain
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_auto_exposure
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_vflip
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_special_effect
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_saturation
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_quality
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pixformat
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_hmirror
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gainceiling
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_framesize
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_contrast
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_colorbar
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_brightness
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_auto_whitebal
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_auto_gain
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_auto_exposure
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rgb_gain_db
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gain_db
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_exposure_us
</UL>

<P><STRONG><a name="[33e]"></a>color_rgb565_to_a</STRONG> (Thumb, 334 bytes, Stack size 40 bytes, image_base.o(.text.color_rgb565_to_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = color_rgb565_to_a
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cbrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_iterator_handle
</UL>

<P><STRONG><a name="[340]"></a>color_rgb565_to_b</STRONG> (Thumb, 334 bytes, Stack size 40 bytes, image_base.o(.text.color_rgb565_to_b))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = color_rgb565_to_b
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cbrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_iterator_handle
</UL>

<P><STRONG><a name="[341]"></a>color_rgb565_to_l</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, image_base.o(.text.color_rgb565_to_l))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = color_rgb565_to_l
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cbrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_iterator_handle
</UL>

<P><STRONG><a name="[31a]"></a>color_yuv_to_rgb</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, image_base.o(.text.color_yuv_to_rgb))
<BR><BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_disp_image
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;binary_image
</UL>

<P><STRONG><a name="[342]"></a>com_create</STRONG> (Thumb, 434 bytes, Stack size 56 bytes, hal_com_stm32h7.o(.text.com_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = com_create &rArr; memory_alloc_align &rArr; block_locate_free &rArr; remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc_align
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_thread
</UL>

<P><STRONG><a name="[318]"></a>data_calloc_calculate</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, image_base.o(.text.data_calloc_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = data_calloc_calculate &rArr; memory_alloc_align &rArr; block_locate_free &rArr; remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc_align
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hough_find_lines
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hough_find_circles
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;binary_image
</UL>

<P><STRONG><a name="[348]"></a>data_calloc_object</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, image_base.o(.text.data_calloc_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = data_calloc_object &rArr; memory_alloc_align &rArr; block_locate_free &rArr; remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc_align
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hough_find_lines
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hough_find_circles
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edge_simple
</UL>

<P><STRONG><a name="[315]"></a>data_free</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, image_base.o(.text.data_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = data_free &rArr; memory_free &rArr; block_merge_next &rArr; remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hough_find_lines
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hough_find_circles
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edge_simple
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_thread
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_morph
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;binary_image
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;binary_erode
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denoise_sepconv3
</UL>

<P><STRONG><a name="[313]"></a>data_malloc_calculate</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, image_base.o(.text.data_malloc_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = data_malloc_calculate &rArr; memory_alloc_align &rArr; block_locate_free &rArr; remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc_align
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hough_find_circles
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_morph
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;binary_erode
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denoise_sepconv3
</UL>

<P><STRONG><a name="[349]"></a>denoise_sepconv3</STRONG> (Thumb, 378 bytes, Stack size 64 bytes, denoise.o(.text.denoise_sepconv3))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = denoise_sepconv3 &rArr; data_malloc_calculate &rArr; memory_alloc_align &rArr; block_locate_free &rArr; remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_free
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_malloc_calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edge_simple
</UL>

<P><STRONG><a name="[34b]"></a>draw_border_generic</STRONG> (Thumb, 2150 bytes, Stack size 192 bytes, lv_draw_rect.o(.text.draw_border_generic))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312 + Unknown Stack Size
<LI>Call Chain = draw_border_generic &rArr; lv_draw_mask_radius_init &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_is_any
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[514]"></a>ds_vector_at</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ds_vector.o(.text.ds_vector_at))
<BR><BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_group_poll
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_timer_free_cb
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_tick_handle
</UL>

<P><STRONG><a name="[36c]"></a>ds_vector_create</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, ds_vector.o(.text.ds_vector_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ds_vector_create
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_get_general_allocator
</UL>
<BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_create_group
</UL>

<P><STRONG><a name="[36e]"></a>ds_vector_expand</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, ds_vector.o(.text.ds_vector_expand))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ds_vector_expand &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_push
</UL>

<P><STRONG><a name="[521]"></a>ds_vector_length</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ds_vector.o(.text.ds_vector_length))
<BR><BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_group_poll
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_tick_handle
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_create_new
</UL>

<P><STRONG><a name="[520]"></a>ds_vector_lock</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ds_vector.o(.text.ds_vector_lock))
<BR><BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_group_poll
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_tick_handle
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_create_new
</UL>

<P><STRONG><a name="[36f]"></a>ds_vector_push</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, ds_vector.o(.text.ds_vector_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ds_vector_push &rArr; ds_vector_expand &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_expand
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_create_new
</UL>

<P><STRONG><a name="[370]"></a>ds_vector_remove_by_index</STRONG> (Thumb, 370 bytes, Stack size 24 bytes, ds_vector.o(.text.ds_vector_remove_by_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ds_vector_remove_by_index &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_group_poll
</UL>

<P><STRONG><a name="[522]"></a>ds_vector_unlock</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ds_vector.o(.text.ds_vector_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_group_poll
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_tick_handle
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_create_new
</UL>

<P><STRONG><a name="[373]"></a>edge_simple</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, edge.o(.text.edge_simple))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = edge_simple &rArr; filter_morph &rArr; data_malloc_calculate &rArr; memory_alloc_align &rArr; block_locate_free &rArr; remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_destroy
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_free
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_morph
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;binary_image
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;binary_erode
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_calloc_object
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denoise_sepconv3
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_push_tail_value
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_create
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_thread
</UL>

<P><STRONG><a name="[374]"></a>filter_morph</STRONG> (Thumb, 5462 bytes, Stack size 232 bytes, filter.o(.text.filter_morph))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = filter_morph &rArr; data_malloc_calculate &rArr; memory_alloc_align &rArr; block_locate_free &rArr; remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_free
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_get_mask_pixel
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_malloc_calculate
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edge_simple
</UL>

<P><STRONG><a name="[32b]"></a>gpio_set_high</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hal_gpio_stm32h7.o(.text.gpio_set_high))
<BR><BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_fill_color_normal
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_set_cursor
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_reset
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_init
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_init
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_fill_frame
</UL>

<P><STRONG><a name="[329]"></a>gpio_set_low</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hal_gpio_stm32h7.o(.text.gpio_set_low))
<BR><BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_fill_color_normal
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_set_cursor
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_reset
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_init
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_init
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_fill_frame
</UL>

<P><STRONG><a name="[388]"></a>gpio_toggle</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_gpio_stm32h7.o(.text.gpio_toggle))
<BR><BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;running_timer
</UL>

<P><STRONG><a name="[4ff]"></a>gui_get_disp_obj</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gui_thread.o(.text.gui_get_disp_obj))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_thread
</UL>

<P><STRONG><a name="[14c]"></a>gui_thread</STRONG> (Thumb, 406 bytes, Stack size 24 bytes, gui_thread.o(.text.gui_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 2192 + Unknown Stack Size
<LI>Call Chain = gui_thread &rArr; lv_refr_now &rArr; _lv_disp_refr_timer &rArr; lv_refr_area_part &rArr; lv_draw_rect &rArr; lv_draw_img &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc_align
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_handler
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_now
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_log_register_print_cb
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_set_default
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_init
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_draw_buf_init
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_init
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_thread.o(.text.system_thread)
</UL>
<P><STRONG><a name="[39a]"></a>hal_device_read_async</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, hal.o(.text.hal_device_read_async))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hal_device_read_async &rArr; rte_tick_consume
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_tick_consume
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_get_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userShellRead
</UL>

<P><STRONG><a name="[32c]"></a>hal_device_write_async</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, hal.o(.text.hal_device_write_async))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hal_device_write_async &rArr; rte_tick_consume
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_tick_consume
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_get_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_fill_color_normal
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_fill_frame
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_thread
</UL>

<P><STRONG><a name="[32a]"></a>hal_device_write_sync</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, hal.o(.text.hal_device_write_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hal_device_write_sync &rArr; rte_tick_consume
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_tick_consume
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_get_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_fill_color_normal
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_set_cursor
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_init
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_fill_frame
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userShellWrite
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_data_out
</UL>

<P><STRONG><a name="[39f]"></a>hough_find_circles</STRONG> (Thumb, 3930 bytes, Stack size 160 bytes, hough.o(.text.hough_find_circles))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = hough_find_circles &rArr; data_calloc_object &rArr; memory_alloc_align &rArr; block_locate_free &rArr; remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_sizeof_max
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_destroy
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_count
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_free
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_calloc_object
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_calloc_calculate
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_malloc_calculate
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_push_tail_value
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_pop_head_value
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_create
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_thread
</UL>

<P><STRONG><a name="[3a3]"></a>hough_find_lines</STRONG> (Thumb, 3846 bytes, Stack size 192 bytes, hough.o(.text.hough_find_lines))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = hough_find_lines &rArr; data_calloc_object &rArr; memory_alloc_align &rArr; block_locate_free &rArr; remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_sizeof_max
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_destroy
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_count
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_free
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_clip
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_calloc_object
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_calloc_calculate
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_push_tail_value
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_pop_head_value
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_create
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_thread
</UL>

<P><STRONG><a name="[501]"></a>image_draw_circle</STRONG> (Thumb, 1698 bytes, Stack size 112 bytes, image_base.o(.text.image_draw_circle))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = image_draw_circle
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_thread
</UL>

<P><STRONG><a name="[500]"></a>image_draw_line</STRONG> (Thumb, 476 bytes, Stack size 80 bytes, image_base.o(.text.image_draw_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = image_draw_line
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_thread
</UL>

<P><STRONG><a name="[314]"></a>image_get_mask_pixel</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, image_base.o(.text.image_get_mask_pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = image_get_mask_pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_morph
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;binary_image
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;binary_erode
</UL>

<P><STRONG><a name="[4fe]"></a>image_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, image_base.o(.text.image_init))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_thread
</UL>

<P><STRONG><a name="[3a5]"></a>image_reuse</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, image_base.o(.text.image_reuse))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = image_reuse &rArr; memory_free &rArr; block_merge_next &rArr; remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_free
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_snapshot
</UL>

<P><STRONG><a name="[317]"></a>image_size</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, image_base.o(.text.image_size))
<BR><BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;binary_image
</UL>

<P><STRONG><a name="[3a4]"></a>line_clip</STRONG> (Thumb, 540 bytes, Stack size 16 bytes, image_base.o(.text.line_clip))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = line_clip
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hough_find_lines
</UL>

<P><STRONG><a name="[3b1]"></a>list_clear</STRONG> (Thumb, 390 bytes, Stack size 32 bytes, ds_linklist.o(.text.list_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + In Cycle
<LI>Call Chain = list_clear &rArr;  list_clear (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_get_general_allocator
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slice_destroy
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_clear
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_destroy
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_clear
</UL>

<P><STRONG><a name="[3a1]"></a>list_count</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ds_linklist.o(.text.list_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = list_count
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hough_find_lines
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hough_find_circles
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_thread
</UL>

<P><STRONG><a name="[375]"></a>list_create</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ds_linklist.o(.text.list_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = list_create
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_get_general_allocator
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hough_find_lines
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hough_find_circles
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edge_simple
</UL>

<P><STRONG><a name="[377]"></a>list_destroy</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ds_linklist.o(.text.list_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = list_destroy &rArr; list_clear &rArr;  list_clear (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_get_general_allocator
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slice_destroy
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hough_find_lines
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hough_find_circles
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edge_simple
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_thread
</UL>

<P><STRONG><a name="[319]"></a>list_foreach_value</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, ds_linklist.o(.text.list_foreach_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = list_foreach_value &rArr; slice_foreach_value &rArr; pick_entry
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slice_foreach_value
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;binary_image
</UL>

<P><STRONG><a name="[3a2]"></a>list_pop_head_value</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, ds_linklist.o(.text.list_pop_head_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = list_pop_head_value &rArr; remove_entry &rArr; pick_entry
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_get_general_allocator
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hough_find_lines
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hough_find_circles
</UL>

<P><STRONG><a name="[3b5]"></a>list_pop_tail_value</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, ds_linklist.o(.text.list_pop_tail_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = list_pop_tail_value &rArr; remove_entry &rArr; pick_entry
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_get_general_allocator
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_thread
</UL>

<P><STRONG><a name="[376]"></a>list_push_tail_value</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ds_linklist.o(.text.list_push_tail_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = list_push_tail_value
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_get_general_allocator
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hough_find_lines
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hough_find_circles
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edge_simple
</UL>

<P><STRONG><a name="[3b6]"></a>log_control</STRONG> (Thumb, 380 bytes, Stack size 32 bytes, rte_log.o(.text.log_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = log_control &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_thread
</UL>

<P><STRONG><a name="[4f5]"></a>log_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rte_log.o(.text.log_init))
<BR><BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_init
</UL>

<P><STRONG><a name="[24c]"></a>log_out</STRONG> (Thumb, 3074 bytes, Stack size 216 bytes, rte_log.o(.text.log_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_snprintf
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_send_async
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recv_async
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_group_poll
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_timer_free_cb
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_free_block
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_split
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_locate_free
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_GetDataCallback
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_create
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_fill_color_normal
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_snapshot
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hough_find_lines
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hough_find_circles
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_jpeg_compress
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc_align
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_init
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_fill_frame
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_create_new
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_thread
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_thread
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_demon
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_create
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_create_group
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_realloc
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_pool
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_free
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_morph
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;binary_image
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;binary_erode
</UL>

<P><STRONG><a name="[4c4]"></a>log_output</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, rte_log.o(.text.log_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = log_output
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_log_output
</UL>

<P><STRONG><a name="[3b9]"></a>log_snprintf</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, rte_log.o(.text.log_snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>

<P><STRONG><a name="[3bb]"></a>lv_anim_del</STRONG> (Thumb, 340 bytes, Stack size 40 bytes, lv_anim.o(.text.lv_anim_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = lv_anim_del &rArr; lv_mem_free &rArr; memory_free &rArr; block_merge_next &rArr; remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_resume
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_pause
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_y
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_destructor
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_start_value
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_destructor
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_constructor
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[3bc]"></a>lv_anim_get</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lv_anim.o(.text.lv_anim_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_anim_get
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_end
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[2fd]"></a>lv_anim_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lv_anim.o(.text.lv_anim_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = lv_anim_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinner_constructor
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_start_value
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_constructor
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
</UL>

<P><STRONG><a name="[ee]"></a>lv_anim_path_ease_in_out</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, lv_anim.o(.text.lv_anim_path_ease_in_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_anim_path_ease_in_out &rArr; lv_bezier3
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bezier3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_spinner.o(.text.lv_spinner_constructor)
</UL>
<P><STRONG><a name="[ea]"></a>lv_anim_path_ease_out</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lv_anim.o(.text.lv_anim_path_ease_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_anim_path_ease_out &rArr; lv_bezier3
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bezier3
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_obj_scroll.o(.text.lv_obj_scroll_by)
<LI> lv_roller.o(.text.refr_position)
</UL>
<P><STRONG><a name="[d7]"></a>lv_anim_path_linear</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lv_anim.o(.text.lv_anim_path_linear))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_anim_path_linear &rArr; lv_map
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
</UL>
<BR>[Address Reference Count : 3]<UL><LI> lv_theme_default.o(.text.style_init)
<LI> lv_anim.o(.text.lv_anim_init)
<LI> lv_style.o(.text.lv_style_transition_dsc_init)
</UL>
<P><STRONG><a name="[f3]"></a>lv_anim_path_step</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_anim.o(.text.lv_anim_path_step))
<BR>[Address Reference Count : 6]<UL><LI> lv_textarea.o(.text.lv_textarea_set_cursor_pos)
<LI> lv_textarea.o(.text.lv_textarea_add_text)
<LI> lv_textarea.o(.text.lv_textarea_set_text)
<LI> lv_textarea.o(.text.lv_textarea_constructor)
<LI> lv_textarea.o(.text.lv_textarea_event)
<LI> lv_textarea.o(.text.lv_textarea_add_char)
</UL>
<P><STRONG><a name="[3be]"></a>lv_anim_refr_now</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_anim.o(.text.lv_anim_refr_now))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = lv_anim_refr_now &rArr; anim_timer &rArr; lv_mem_free &rArr; memory_free &rArr; block_merge_next &rArr; remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_now
</UL>

<P><STRONG><a name="[440]"></a>lv_anim_speed_to_time</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_anim.o(.text.lv_anim_speed_to_time))
<BR><BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[2fe]"></a>lv_anim_start</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, lv_anim.o(.text.lv_anim_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056 + Unknown Stack Size
<LI>Call Chain = lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_resume
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_is_empty
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_pause
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinner_constructor
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_start_value
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_constructor
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
</UL>

<P><STRONG><a name="[3ce]"></a>lv_arc_set_bg_angles</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lv_arc.o(.text.lv_arc_set_bg_angles))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208 + Unknown Stack Size
<LI>Call Chain = lv_arc_set_bg_angles &rArr; value_update &rArr; lv_arc_set_start_angle &rArr; inv_arc_area &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_update
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinner_constructor
</UL>

<P><STRONG><a name="[310]"></a>lv_arc_set_end_angle</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lv_arc.o(.text.lv_arc_set_end_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152 + Unknown Stack Size
<LI>Call Chain = lv_arc_set_end_angle &rArr; inv_arc_area &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_anim_end_angle
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_update
</UL>

<P><STRONG><a name="[3cf]"></a>lv_arc_set_rotation</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_arc.o(.text.lv_arc_set_rotation))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_arc_set_rotation &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinner_constructor
</UL>

<P><STRONG><a name="[311]"></a>lv_arc_set_start_angle</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lv_arc.o(.text.lv_arc_set_start_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152 + Unknown Stack Size
<LI>Call Chain = lv_arc_set_start_angle &rArr; inv_arc_area &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_anim_start_angle
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_update
</UL>

<P><STRONG><a name="[2c5]"></a>lv_area_get_size</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_area.o(.text.lv_area_get_size))
<BR><BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scrollbar_invalidate
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[3ff]"></a>lv_area_increase</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_area.o(.text.lv_area_increase))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_area_increase
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[2c4]"></a>lv_area_move</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_area.o(.text.lv_area_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_area_move
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[3dd]"></a>lv_area_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_area.o(.text.lv_area_set))
<BR><BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
</UL>

<P><STRONG><a name="[c9]"></a>lv_area_set_height</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_area.o(.text.lv_area_set_height))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(.text.children_repos)
</UL>
<P><STRONG><a name="[ca]"></a>lv_area_set_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_area.o(.text.lv_area_set_width))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(.text.children_repos)
</UL>
<P><STRONG><a name="[3c9]"></a>lv_atan2</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, lv_math.o(.text.lv_atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[48a]"></a>lv_bar_get_mode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_bar.o(.text.lv_bar_get_mode))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[48c]"></a>lv_bar_get_start_value</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lv_bar.o(.text.lv_bar_get_start_value))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[48b]"></a>lv_bar_get_value</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_bar.o(.text.lv_bar_get_value))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[3d0]"></a>lv_bar_set_start_value</STRONG> (Thumb, 142 bytes, Stack size 88 bytes, lv_bar.o(.text.lv_bar_set_start_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144 + Unknown Stack Size
<LI>Call Chain = lv_bar_set_start_value &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[3d1]"></a>lv_bar_set_value</STRONG> (Thumb, 154 bytes, Stack size 88 bytes, lv_bar.o(.text.lv_bar_set_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144 + Unknown Stack Size
<LI>Call Chain = lv_bar_set_value &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[3bd]"></a>lv_bezier3</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lv_math.o(.text.lv_bezier3))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_bezier3
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_path_ease_out
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_path_ease_in_out
</UL>

<P><STRONG><a name="[3d2]"></a>lv_btn_create</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_btn.o(.text.lv_btn_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168 + Unknown Stack Size
<LI>Call Chain = lv_btn_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
</UL>

<P><STRONG><a name="[39d]"></a>lv_btnmatrix_clear_btn_ctrl_all</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_clear_btn_ctrl_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120 + Unknown Stack Size
<LI>Call Chain = lv_btnmatrix_clear_btn_ctrl_all &rArr; invalidate_button_area &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;highlight_update
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_one_button_checked
</UL>

<P><STRONG><a name="[3d6]"></a>lv_btnmatrix_create</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168 + Unknown Stack Size
<LI>Call Chain = lv_btnmatrix_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
</UL>

<P><STRONG><a name="[3da]"></a>lv_btnmatrix_get_btn_text</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_get_btn_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_btnmatrix_get_btn_text &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
</UL>

<P><STRONG><a name="[333]"></a>lv_btnmatrix_get_selected_btn</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_get_selected_btn))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btns_value_changed_event_cb
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_part_begin_event_cb
</UL>

<P><STRONG><a name="[35e]"></a>lv_btnmatrix_has_btn_ctrl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_has_btn_ctrl))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_part_begin_event_cb
</UL>

<P><STRONG><a name="[39e]"></a>lv_btnmatrix_set_btn_ctrl</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_set_btn_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128 + Unknown Stack Size
<LI>Call Chain = lv_btnmatrix_set_btn_ctrl &rArr; invalidate_button_area &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;highlight_update
</UL>

<P><STRONG><a name="[3db]"></a>lv_btnmatrix_set_btn_ctrl_all</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_set_btn_ctrl_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128 + Unknown Stack Size
<LI>Call Chain = lv_btnmatrix_set_btn_ctrl_all &rArr; invalidate_button_area &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_constructor
</UL>

<P><STRONG><a name="[3dc]"></a>lv_btnmatrix_set_ctrl_map</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_set_ctrl_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168 + Unknown Stack Size
<LI>Call Chain = lv_btnmatrix_set_ctrl_map &rArr; lv_btnmatrix_set_map &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_constructor
</UL>

<P><STRONG><a name="[3d5]"></a>lv_btnmatrix_set_map</STRONG> (Thumb, 926 bytes, Stack size 112 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_set_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160 + Unknown Stack Size
<LI>Call Chain = lv_btnmatrix_set_map &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_ctrl_map
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_constructor
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_constructor
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_constructor
</UL>

<P><STRONG><a name="[3de]"></a>lv_btnmatrix_set_one_checked</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_set_one_checked))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136 + Unknown Stack Size
<LI>Call Chain = lv_btnmatrix_set_one_checked &rArr; make_one_button_checked &rArr; lv_btnmatrix_clear_btn_ctrl_all &rArr; invalidate_button_area &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_one_button_checked
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
</UL>

<P><STRONG><a name="[4cf]"></a>lv_calendar_get_showed_date</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_calendar.o(.text.lv_calendar_get_showed_date))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;year_event_cb
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month_event_cb
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month_event_cb
</UL>

<P><STRONG><a name="[3df]"></a>lv_calendar_set_showed_date</STRONG> (Thumb, 678 bytes, Stack size 48 bytes, lv_calendar.o(.text.lv_calendar_set_showed_date))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192 + Unknown Stack Size
<LI>Call Chain = lv_calendar_set_showed_date &rArr; highlight_update &rArr; lv_btnmatrix_set_btn_ctrl &rArr; invalidate_button_area &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_btn_ctrl
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_clear_btn_ctrl_all
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;highlight_update
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;year_event_cb
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month_event_cb
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month_event_cb
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_constructor
</UL>

<P><STRONG><a name="[3e6]"></a>lv_chart_get_point_pos_by_id</STRONG> (Thumb, 598 bytes, Stack size 56 bytes, lv_chart.o(.text.lv_chart_get_point_pos_by_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032 + Unknown Stack Size
<LI>Call Chain = lv_chart_get_point_pos_by_id &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_len
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
</UL>

<P><STRONG><a name="[347]"></a>lv_color_darken</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, lv_color.o(.text.lv_color_darken))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_color_darken
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dark_color_filter_cb
</UL>

<P><STRONG><a name="[2c7]"></a>lv_color_fill</STRONG> (Thumb, 288 bytes, Stack size 8 bytes, lv_color.o(.text.lv_color_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_color_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
</UL>

<P><STRONG><a name="[3e9]"></a>lv_color_hsv_to_rgb</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, lv_color.o(.text.lv_color_hsv_to_rgb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_color_hsv_to_rgb
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
</UL>

<P><STRONG><a name="[390]"></a>lv_disp_draw_buf_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lv_hal_disp.o(.text.lv_disp_draw_buf_init))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_thread
</UL>

<P><STRONG><a name="[391]"></a>lv_disp_drv_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lv_hal_disp.o(.text.lv_disp_drv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = lv_disp_drv_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_thread
</UL>

<P><STRONG><a name="[392]"></a>lv_disp_drv_register</STRONG> (Thumb, 422 bytes, Stack size 32 bytes, lv_hal_disp.o(.text.lv_disp_drv_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200 + Unknown Stack Size
<LI>Call Chain = lv_disp_drv_register &rArr; lv_obj_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_main
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scrollbar_mode
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_ready
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_is_inited
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_thread
</UL>

<P><STRONG><a name="[34a]"></a>lv_disp_flush_ready</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_hal_disp.o(.text.lv_disp_flush_ready))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_flush
</UL>

<P><STRONG><a name="[2d5]"></a>lv_disp_get_default</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_hal_disp.o(.text.lv_disp_get_default))
<BR><BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_theme
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_prev
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_color_primary
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
</UL>

<P><STRONG><a name="[3ad]"></a>lv_disp_get_dpi</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_hal_disp.o(.text.lv_disp_get_dpi))
<BR><BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_constructor
</UL>

<P><STRONG><a name="[2c2]"></a>lv_disp_get_draw_buf</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_hal_disp.o(.text.lv_disp_get_draw_buf))
<BR><BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_flush
</UL>

<P><STRONG><a name="[2cd]"></a>lv_disp_get_hor_res</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, lv_hal_disp.o(.text.lv_disp_get_hor_res))
<BR><BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[2d6]"></a>lv_disp_get_layer_sys</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lv_disp.o(.text.lv_disp_get_layer_sys))
<BR><BR>[Stack]<UL><LI>Max Depth = 992 + Unknown Stack Size
<LI>Call Chain = lv_disp_get_layer_sys &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[3f0]"></a>lv_disp_get_layer_top</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lv_disp.o(.text.lv_disp_get_layer_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 992 + Unknown Stack Size
<LI>Call Chain = lv_disp_get_layer_top &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[3f1]"></a>lv_disp_get_next</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_hal_disp.o(.text.lv_disp_get_next))
<BR><BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_now
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_report_style_change
</UL>

<P><STRONG><a name="[393]"></a>lv_disp_get_scr_act</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lv_disp.o(.text.lv_disp_get_scr_act))
<BR><BR>[Stack]<UL><LI>Max Depth = 992 + Unknown Stack Size
<LI>Call Chain = lv_disp_get_scr_act &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_thread
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj_and_children
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[3f2]"></a>lv_disp_get_scr_prev</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lv_disp.o(.text.lv_disp_get_scr_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 992 + Unknown Stack Size
<LI>Call Chain = lv_disp_get_scr_prev &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
</UL>

<P><STRONG><a name="[3f3]"></a>lv_disp_get_theme</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_disp.o(.text.lv_disp_get_theme))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_get_theme
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_color_primary
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[2ce]"></a>lv_disp_get_ver_res</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, lv_hal_disp.o(.text.lv_disp_get_ver_res))
<BR><BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
</UL>

<P><STRONG><a name="[394]"></a>lv_disp_set_default</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_hal_disp.o(.text.lv_disp_set_default))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_thread
</UL>

<P><STRONG><a name="[3cc]"></a>lv_draw_arc</STRONG> (Thumb, 2630 bytes, Stack size 376 bytes, lv_draw_arc.o(.text.lv_draw_arc))
<BR><BR>[Stack]<UL><LI>Max Depth = 2360 + Unknown Stack Size
<LI>Call Chain = lv_draw_arc &rArr; lv_draw_rect &rArr; lv_draw_img &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_angle_init
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[3ca]"></a>lv_draw_arc_dsc_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_draw_arc.o(.text.lv_draw_arc_dsc_init))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[3f5]"></a>lv_draw_img</STRONG> (Thumb, 850 bytes, Stack size 160 bytes, lv_draw_img.o(.text.lv_draw_img))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = lv_draw_img &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_read_line
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_close
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set_height
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_get_transformed_area
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
</UL>

<P><STRONG><a name="[403]"></a>lv_draw_img_dsc_init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lv_draw_img.o(.text.lv_draw_img_dsc_init))
<BR><BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
</UL>

<P><STRONG><a name="[35c]"></a>lv_draw_label</STRONG> (Thumb, 2012 bytes, Stack size 232 bytes, lv_draw_label.o(.text.lv_draw_label))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = lv_draw_label &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_encoded_letter_next_2
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box_label
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[359]"></a>lv_draw_label_dsc_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lv_draw_label.o(.text.lv_draw_label_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008 + Unknown Stack Size
<LI>Call Chain = lv_draw_label_dsc_init &rArr; lv_palette_main &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_main
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box_label
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[3fb]"></a>lv_draw_letter</STRONG> (Thumb, 1828 bytes, Stack size 120 bytes, lv_draw_label.o(.text.lv_draw_letter))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200 + Unknown Stack Size
<LI>Call Chain = lv_draw_letter &rArr; _lv_blend_fill &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_bitmap
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_is_any
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>

<P><STRONG><a name="[367]"></a>lv_draw_line</STRONG> (Thumb, 2568 bytes, Stack size 296 bytes, lv_draw_line.o(.text.lv_draw_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = lv_draw_line &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line_points_init
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_is_any
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_draw_buf
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
</UL>

<P><STRONG><a name="[363]"></a>lv_draw_line_dsc_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_draw_line.o(.text.lv_draw_line_dsc_init))
<BR><BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
</UL>

<P><STRONG><a name="[34f]"></a>lv_draw_mask_add</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, lv_draw_mask.o(.text.lv_draw_mask_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 992 + Unknown Stack Size
<LI>Call Chain = lv_draw_mask_add &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
</UL>

<P><STRONG><a name="[3f4]"></a>lv_draw_mask_angle_init</STRONG> (Thumb, 242 bytes, Stack size 56 bytes, lv_draw_mask.o(.text.lv_draw_mask_angle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = lv_draw_mask_angle_init &rArr; lv_draw_mask_line_points_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line_points_init
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc
</UL>

<P><STRONG><a name="[350]"></a>lv_draw_mask_apply</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, lv_draw_mask.o(.text.lv_draw_mask_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_draw_mask_apply
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
</UL>

<P><STRONG><a name="[351]"></a>lv_draw_mask_free_param</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lv_draw_mask.o(.text.lv_draw_mask_free_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = lv_draw_mask_free_param &rArr; lv_mem_free &rArr; memory_free &rArr; block_merge_next &rArr; remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
</UL>

<P><STRONG><a name="[34c]"></a>lv_draw_mask_is_any</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lv_draw_mask.o(.text.lv_draw_mask_is_any))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lv_draw_mask_is_any &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_out
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
</UL>

<P><STRONG><a name="[3fe]"></a>lv_draw_mask_line_points_init</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, lv_draw_mask.o(.text.lv_draw_mask_line_points_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = lv_draw_mask_line_points_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_angle_init
</UL>

<P><STRONG><a name="[34e]"></a>lv_draw_mask_radius_init</STRONG> (Thumb, 1626 bytes, Stack size 72 bytes, lv_draw_mask.o(.text.lv_draw_mask_radius_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120 + Unknown Stack Size
<LI>Call Chain = lv_draw_mask_radius_init &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
</UL>

<P><STRONG><a name="[45c]"></a>lv_draw_mask_remove_custom</STRONG> (Thumb, 334 bytes, Stack size 0 bytes, lv_draw_mask.o(.text.lv_draw_mask_remove_custom))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[352]"></a>lv_draw_mask_remove_id</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lv_draw_mask.o(.text.lv_draw_mask_remove_id))
<BR><BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
</UL>

<P><STRONG><a name="[357]"></a>lv_draw_rect</STRONG> (Thumb, 8576 bytes, Stack size 216 bytes, lv_draw_rect.o(.text.lv_draw_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 1984 + Unknown Stack Size
<LI>Call Chain = lv_draw_rect &rArr; lv_draw_img &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_increase
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_blur_corner
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_out
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_is_any
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_event
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[355]"></a>lv_draw_rect_dsc_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lv_draw_rect.o(.text.lv_draw_rect_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = lv_draw_rect_dsc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_event
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[404]"></a>lv_dropdown_create</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_dropdown.o(.text.lv_dropdown_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168 + Unknown Stack Size
<LI>Call Chain = lv_dropdown_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
</UL>

<P><STRONG><a name="[4d0]"></a>lv_dropdown_get_selected</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_dropdown.o(.text.lv_dropdown_get_selected))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;year_event_cb
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month_event_cb
</UL>

<P><STRONG><a name="[409]"></a>lv_dropdown_open</STRONG> (Thumb, 566 bytes, Stack size 32 bytes, lv_dropdown.o(.text.lv_dropdown_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392 + Unknown Stack Size
<LI>Call Chain = lv_dropdown_open &rArr; lv_obj_align_to &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y2
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_state
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_style_text_align
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_static
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_to_selected
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
</UL>

<P><STRONG><a name="[414]"></a>lv_dropdown_set_options</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, lv_dropdown.o(.text.lv_dropdown_set_options))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_dropdown_set_options &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
</UL>

<P><STRONG><a name="[416]"></a>lv_dropdown_set_selected</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lv_dropdown.o(.text.lv_dropdown_set_selected))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_dropdown_set_selected &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
</UL>

<P><STRONG><a name="[344]"></a>lv_event_get_code</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_event.o(.text.lv_event_get_code))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tileview_event_cb
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_event
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cont_scroll_end_event_cb
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_event
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[417]"></a>lv_event_get_indev</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lv_event.o(.text.lv_event_get_indev))
<BR><BR>[Stack]<UL><LI>Max Depth = 992 + Unknown Stack Size
<LI>Call Chain = lv_event_get_indev &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[35d]"></a>lv_event_get_param</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_event.o(.text.lv_event_get_param))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_event
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_part_begin_event_cb
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[331]"></a>lv_event_get_target</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_event.o(.text.lv_event_get_target))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tileview_event_cb
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_event
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cont_scroll_end_event_cb
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btns_value_changed_event_cb
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_event
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;year_event_cb
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month_event_cb
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month_event_cb
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_part_begin_event_cb
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[4ce]"></a>lv_event_get_user_data</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_event.o(.text.lv_event_get_user_data))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;year_event_cb
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month_event_cb
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month_event_cb
</UL>

<P><STRONG><a name="[33c]"></a>lv_event_send</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, lv_event.o(.text.lv_event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send_core
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_y_anim
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_x_anim
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_anim_ready_cb
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_self_width
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_self_height
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj_and_children
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tileview_event_cb
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cont_scroll_end_event_cb
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_event
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[3e1]"></a>lv_event_set_ext_draw_size</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lv_event.o(.text.lv_event_set_ext_draw_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 992 + Unknown Stack Size
<LI>Call Chain = lv_event_set_ext_draw_size &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
</UL>

<P><STRONG><a name="[418]"></a>lv_extra_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_extra.o(.text.lv_extra_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = lv_extra_init &rArr; lv_grid_init &rArr; lv_layout_register &rArr; lv_mem_realloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_grid_init
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_flex_init
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[419]"></a>lv_flex_init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lv_flex.o(.text.lv_flex_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056 + Unknown Stack Size
<LI>Call Chain = lv_flex_init &rArr; lv_layout_register &rArr; lv_mem_realloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_layout_register
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_register_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_extra_init
</UL>

<P><STRONG><a name="[16a]"></a>lv_font_get_bitmap_fmt_txt</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lv_font_fmt_txt.o(.text.lv_font_get_bitmap_fmt_txt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lv_font_get_bitmap_fmt_txt &rArr; get_glyph_dsc_id &rArr; _lv_utils_bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_glyph_dsc_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_font_montserrat_14.o(.rodata.lv_font_montserrat_14)
</UL>
<P><STRONG><a name="[3fd]"></a>lv_font_get_glyph_bitmap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_font.o(.text.lv_font_get_glyph_bitmap))
<BR><BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
</UL>

<P><STRONG><a name="[3fc]"></a>lv_font_get_glyph_dsc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_font.o(.text.lv_font_get_glyph_dsc))
<BR><BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
</UL>

<P><STRONG><a name="[169]"></a>lv_font_get_glyph_dsc_fmt_txt</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, lv_font_fmt_txt.o(.text.lv_font_get_glyph_dsc_fmt_txt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_font_get_glyph_dsc_fmt_txt &rArr; get_glyph_dsc_id &rArr; _lv_utils_bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_utils_bsearch
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_glyph_dsc_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_font_montserrat_14.o(.rodata.lv_font_montserrat_14)
</UL>
<P><STRONG><a name="[305]"></a>lv_font_get_glyph_width</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lv_font.o(.text.lv_font_get_glyph_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_font_get_glyph_width
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
</UL>

<P><STRONG><a name="[426]"></a>lv_fs_close</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lv_fs.o(.text.lv_fs_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_fs_close
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_close
</UL>

<P><STRONG><a name="[41d]"></a>lv_fs_get_ext</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, lv_fs.o(.text.lv_fs_get_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_fs_get_ext &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
</UL>

<P><STRONG><a name="[41e]"></a>lv_fs_open</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, lv_fs.o(.text.lv_fs_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016 + Unknown Stack Size
<LI>Call Chain = lv_fs_open &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
</UL>

<P><STRONG><a name="[427]"></a>lv_fs_read</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lv_fs.o(.text.lv_fs_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_fs_read
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_read_line
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
</UL>

<P><STRONG><a name="[428]"></a>lv_fs_seek</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lv_fs.o(.text.lv_fs_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_fs_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_read_line
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
</UL>

<P><STRONG><a name="[41a]"></a>lv_grid_init</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, lv_grid.o(.text.lv_grid_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056 + Unknown Stack Size
<LI>Call Chain = lv_grid_init &rArr; lv_layout_register &rArr; lv_mem_realloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_layout_register
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_register_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_extra_init
</UL>

<P><STRONG><a name="[41f]"></a>lv_group_add_obj</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, lv_group.o(.text.lv_group_add_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112 + Unknown Stack Size
<LI>Call Chain = lv_group_add_obj &rArr; lv_group_focus_prev &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_tail
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
</UL>

<P><STRONG><a name="[420]"></a>lv_group_focus_next</STRONG> (Thumb, 378 bytes, Stack size 32 bytes, lv_group.o(.text.lv_group_focus_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080 + Unknown Stack Size
<LI>Call Chain = lv_group_focus_next &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_state
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
</UL>

<P><STRONG><a name="[421]"></a>lv_group_focus_prev</STRONG> (Thumb, 378 bytes, Stack size 32 bytes, lv_group.o(.text.lv_group_focus_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080 + Unknown Stack Size
<LI>Call Chain = lv_group_focus_prev &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_state
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
</UL>

<P><STRONG><a name="[453]"></a>lv_group_get_default</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_group.o(.text.lv_group_get_default))
<BR><BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
</UL>

<P><STRONG><a name="[3c5]"></a>lv_group_get_editing</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_group.o(.text.lv_group_get_editing))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[424]"></a>lv_group_remove_obj</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, lv_group.o(.text.lv_group_remove_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112 + Unknown Stack Size
<LI>Call Chain = lv_group_remove_obj &rArr; lv_group_focus_prev &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_destructor
</UL>

<P><STRONG><a name="[3c7]"></a>lv_group_set_editing</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, lv_group.o(.text.lv_group_set_editing))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = lv_group_set_editing &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[2eb]"></a>lv_img_buf_get_px_alpha</STRONG> (Thumb, 290 bytes, Stack size 8 bytes, lv_img_buf.o(.text.lv_img_buf_get_px_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_img_buf_get_px_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_anti_alias
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform
</UL>

<P><STRONG><a name="[2ea]"></a>lv_img_buf_get_px_color</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, lv_img_buf.o(.text.lv_img_buf_get_px_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_img_buf_get_px_color
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_get_px_size
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_anti_alias
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform
</UL>

<P><STRONG><a name="[425]"></a>lv_img_cf_get_px_size</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, lv_draw_img.o(.text.lv_img_cf_get_px_size))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_read_line
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_buf_get_px_color
</UL>

<P><STRONG><a name="[2ef]"></a>lv_img_cf_has_alpha</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_draw_img.o(.text.lv_img_cf_has_alpha))
<BR><BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_init
</UL>

<P><STRONG><a name="[2ee]"></a>lv_img_cf_is_chroma_keyed</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lv_draw_img.o(.text.lv_img_cf_is_chroma_keyed))
<BR><BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_init
</UL>

<P><STRONG><a name="[395]"></a>lv_img_create</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_img.o(.text.lv_img_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168 + Unknown Stack Size
<LI>Call Chain = lv_img_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_thread
</UL>

<P><STRONG><a name="[c2]"></a>lv_img_decoder_built_in_close</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_img_decoder.o(.text.lv_img_decoder_built_in_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = lv_img_decoder_built_in_close &rArr; lv_mem_free &rArr; memory_free &rArr; block_merge_next &rArr; remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_decoder.o(.text._lv_img_decoder_init)
</UL>
<P><STRONG><a name="[bf]"></a>lv_img_decoder_built_in_info</STRONG> (Thumb, 328 bytes, Stack size 32 bytes, lv_img_decoder.o(.text.lv_img_decoder_built_in_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_img_decoder_built_in_info &rArr; lv_fs_open &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_ext
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_decoder.o(.text._lv_img_decoder_init)
</UL>
<P><STRONG><a name="[c0]"></a>lv_img_decoder_built_in_open</STRONG> (Thumb, 878 bytes, Stack size 48 bytes, lv_img_decoder.o(.text.lv_img_decoder_built_in_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = lv_img_decoder_built_in_open &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_seek
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_ext
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_get_px_size
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_decoder.o(.text._lv_img_decoder_init)
</UL>
<P><STRONG><a name="[c1]"></a>lv_img_decoder_built_in_read_line</STRONG> (Thumb, 1860 bytes, Stack size 80 bytes, lv_img_decoder.o(.text.lv_img_decoder_built_in_read_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128 + Unknown Stack Size
<LI>Call Chain = lv_img_decoder_built_in_read_line &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_seek
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_get_px_size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_decoder.o(.text._lv_img_decoder_init)
</UL>
<P><STRONG><a name="[3f6]"></a>lv_img_decoder_close</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lv_img_decoder.o(.text.lv_img_decoder_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = lv_img_decoder_close &rArr; lv_mem_free &rArr; memory_free &rArr; block_merge_next &rArr; remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
</UL>

<P><STRONG><a name="[402]"></a>lv_img_decoder_get_info</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lv_img_decoder.o(.text.lv_img_decoder_get_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_img_decoder_get_info
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
</UL>

<P><STRONG><a name="[2f1]"></a>lv_img_decoder_open</STRONG> (Thumb, 274 bytes, Stack size 48 bytes, lv_img_decoder.o(.text.lv_img_decoder_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = lv_img_decoder_open &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
</UL>

<P><STRONG><a name="[3f8]"></a>lv_img_decoder_read_line</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lv_img_decoder.o(.text.lv_img_decoder_read_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_img_decoder_read_line
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
</UL>

<P><STRONG><a name="[4f2]"></a>lv_img_get_src</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_img.o(.text.lv_img_get_src))
<BR><BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_disp_image
</UL>

<P><STRONG><a name="[396]"></a>lv_img_set_src</STRONG> (Thumb, 506 bytes, Stack size 48 bytes, lv_img.o(.text.lv_img_set_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120 + Unknown Stack Size
<LI>Call Chain = lv_img_set_src &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_thread
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
</UL>

<P><STRONG><a name="[401]"></a>lv_img_src_get_type</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lv_draw_img.o(.text.lv_img_src_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
</UL>

<P><STRONG><a name="[379]"></a>lv_indev_get_act</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_indev.o(.text.lv_indev_get_act))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send_core
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[3d7]"></a>lv_indev_get_next</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_hal_indev.o(.text.lv_indev_get_next))
<BR><BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_reset
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
</UL>

<P><STRONG><a name="[4d1]"></a>lv_indev_get_obj_act</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_indev.o(.text.lv_indev_get_obj_act))
<BR><BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>

<P><STRONG><a name="[3c8]"></a>lv_indev_get_point</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lv_indev.o(.text.lv_indev_get_point))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[463]"></a>lv_indev_get_scroll_dir</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_indev.o(.text.lv_indev_get_scroll_dir))
<BR><BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
</UL>

<P><STRONG><a name="[407]"></a>lv_indev_get_scroll_obj</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lv_indev.o(.text.lv_indev_get_scroll_obj))
<BR><BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
</UL>

<P><STRONG><a name="[3c6]"></a>lv_indev_get_type</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_indev.o(.text.lv_indev_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[488]"></a>lv_indev_get_vect</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lv_indev.o(.text.lv_indev_get_vect))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[42b]"></a>lv_indev_reset</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, lv_indev.o(.text.lv_indev_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_indev_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>

<P><STRONG><a name="[3d8]"></a>lv_indev_reset_long_press</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_indev.o(.text.lv_indev_reset_long_press))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_indev_reset_long_press
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
</UL>

<P><STRONG><a name="[489]"></a>lv_indev_scroll_throw_predict</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, lv_indev_scroll.o(.text.lv_indev_scroll_throw_predict))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_indev_scroll_throw_predict
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[3e8]"></a>lv_indev_wait_release</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_indev.o(.text.lv_indev_wait_release))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
</UL>

<P><STRONG><a name="[38f]"></a>lv_init</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, lv_obj.o(.text.lv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088 + Unknown Stack Size
<LI>Call Chain = lv_init &rArr; _lv_anim_core_init &rArr; lv_timer_create &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_init
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_extra_init
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_timer_core_init
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_init
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_init
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_decoder_init
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_fs_init
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_group_init
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_thread
</UL>

<P><STRONG><a name="[e5]"></a>lv_keyboard_def_event_cb</STRONG> (Thumb, 632 bytes, Stack size 16 bytes, lv_keyboard.o(.text.lv_keyboard_def_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688 + Unknown Stack Size
<LI>Call Chain = lv_keyboard_def_event_cb &rArr; lv_textarea_del_char &rArr; lv_textarea_add_text &rArr;  lv_textarea_add_text (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_get_text
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_get_one_line
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_get_cursor_pos
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_right
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_left
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_ctrl_map
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_get_selected_btn
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_get_btn_text
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_keyboard.o(.text.lv_keyboard_constructor)
</UL>
<P><STRONG><a name="[2d7]"></a>lv_label_create</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_label.o(.text.lv_label_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168 + Unknown Stack Size
<LI>Call Chain = lv_label_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_thread
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdownlist_constructor
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_constructor
</UL>

<P><STRONG><a name="[43b]"></a>lv_label_get_letter_on</STRONG> (Thumb, 740 bytes, Stack size 112 bytes, lv_label.o(.text.lv_label_get_letter_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088 + Unknown Stack Size
<LI>Call Chain = lv_label_get_letter_on &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_encoded_letter_next_2
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_style_text_align
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_is_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_down
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[43d]"></a>lv_label_get_letter_pos</STRONG> (Thumb, 614 bytes, Stack size 96 bytes, lv_label.o(.text.lv_label_get_letter_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = lv_label_get_letter_pos &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_style_text_align
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_down
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[35b]"></a>lv_label_get_text</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_label.o(.text.lv_label_get_text))
<BR><BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_get_text
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box_label
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[4c0]"></a>lv_label_get_text_selection_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_label.o(.text.lv_label_get_text_selection_end))
<BR><BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
</UL>

<P><STRONG><a name="[4bf]"></a>lv_label_get_text_selection_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_label.o(.text.lv_label_get_text_selection_start))
<BR><BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
</UL>

<P><STRONG><a name="[43e]"></a>lv_label_ins_text</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, lv_label.o(.text.lv_label_ins_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296 + Unknown Stack Size
<LI>Call Chain = lv_label_ins_text &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_label_get_letter_on &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_ins
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
</UL>

<P><STRONG><a name="[43f]"></a>lv_label_is_char_under_pos</STRONG> (Thumb, 672 bytes, Stack size 96 bytes, lv_label.o(.text.lv_label_is_char_under_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = lv_label_is_char_under_pos &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_encoded_letter_next_2
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_style_text_align
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_is_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[438]"></a>lv_label_set_long_mode</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, lv_label.o(.text.lv_label_set_long_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248 + Unknown Stack Size
<LI>Call Chain = lv_label_set_long_mode &rArr; lv_label_refr_text &rArr; lv_label_get_letter_on &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_constructor
</UL>

<P><STRONG><a name="[2e0]"></a>lv_label_set_text</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, lv_label.o(.text.lv_label_set_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256 + Unknown Stack Size
<LI>Call Chain = lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_label_get_letter_on &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_thread
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_constructor
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_constructor
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_constructor
</UL>

<P><STRONG><a name="[2e3]"></a>lv_label_set_text_fmt</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, lv_label.o(.text.lv_label_set_text_fmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264 + Unknown Stack Size
<LI>Call Chain = lv_label_set_text_fmt &rArr; lv_label_refr_text &rArr; lv_label_get_letter_on &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_set_text_vfmt
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month_event_cb
</UL>

<P><STRONG><a name="[441]"></a>lv_label_set_text_sel_end</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_label.o(.text.lv_label_set_text_sel_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_label_set_text_sel_end &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
</UL>

<P><STRONG><a name="[442]"></a>lv_label_set_text_sel_start</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_label.o(.text.lv_label_set_text_sel_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_label_set_text_sel_start &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
</UL>

<P><STRONG><a name="[40d]"></a>lv_label_set_text_static</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_label.o(.text.lv_label_set_text_static))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240 + Unknown Stack Size
<LI>Call Chain = lv_label_set_text_static &rArr; lv_label_refr_text &rArr; lv_label_get_letter_on &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
</UL>

<P><STRONG><a name="[41b]"></a>lv_layout_register</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, lv_obj_pos.o(.text.lv_layout_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_layout_register &rArr; lv_mem_realloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_grid_init
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_flex_init
</UL>

<P><STRONG><a name="[38e]"></a>lv_log_register_print_cb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_log.o(.text.lv_log_register_print_cb))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_thread
</UL>

<P><STRONG><a name="[366]"></a>lv_map</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lv_math.o(.text.lv_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_map
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_path_linear
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_path_ease_out
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_path_ease_in_out
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_update
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[2f6]"></a>lv_mem_alloc</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, lv_mem.o(.text.lv_mem_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016 + Unknown Stack Size
<LI>Call Chain = lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_tail
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_trans_style
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_set_options
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_set_text_vfmt
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_constructor
</UL>

<P><STRONG><a name="[2d2]"></a>lv_mem_buf_free_all</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, lv_mem.o(.text.lv_mem_buf_free_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = lv_mem_buf_free_all &rArr; memory_free &rArr; block_merge_next &rArr; remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_free
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[34d]"></a>lv_mem_buf_get</STRONG> (Thumb, 566 bytes, Stack size 32 bytes, lv_mem.o(.text.lv_mem_buf_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_mem_buf_get &rArr; lv_mem_realloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_read_line
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_blur_corner
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_flush
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
</UL>

<P><STRONG><a name="[353]"></a>lv_mem_buf_release</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, lv_mem.o(.text.lv_mem_buf_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 992 + Unknown Stack Size
<LI>Call Chain = lv_mem_buf_release &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_read_line
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_blur_corner
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_flush
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
</UL>

<P><STRONG><a name="[2e4]"></a>lv_mem_free</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lv_mem.o(.text.lv_mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = lv_mem_free &rArr; memory_free &rArr; block_merge_next &rArr; remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_free
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_handler
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_destructor
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_clear
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_close
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_close
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_draw_mask_cleanup
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_destructor
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_destructor
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_set_options
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_destructor
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_destructor
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_static
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_destructor
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_constructor
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_destructor
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_destructor
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_destructor
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_destructor
</UL>

<P><STRONG><a name="[42c]"></a>lv_mem_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_mem.o(.text.lv_mem_init))
<BR><BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[386]"></a>lv_mem_realloc</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, lv_mem.o(.text.lv_mem_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016 + Unknown Stack Size
<LI>Call Chain = lv_mem_realloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_realloc
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_free
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_layout_register
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_trans_style
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_constructor
</UL>

<P><STRONG><a name="[3e0]"></a>lv_obj_add_event_cb</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, lv_event.o(.text.lv_obj_add_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = lv_obj_add_event_cb &rArr; lv_obj_allocate_spec_attr &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tileview_constructor
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_constructor
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_constructor
</UL>

<P><STRONG><a name="[3c0]"></a>lv_obj_add_flag</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lv_obj.o(.text.lv_obj_add_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = lv_obj_add_flag &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_layout_positioned
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tileview_constructor
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_constructor
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_constructor
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_constructor
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_constructor
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_constructor
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_constructor
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_constructor
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_constructor
</UL>

<P><STRONG><a name="[40b]"></a>lv_obj_add_state</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_add_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256 + Unknown Stack Size
<LI>Call Chain = lv_obj_add_state &rArr; lv_obj_set_state &rArr; _lv_obj_style_create_transition &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
</UL>

<P><STRONG><a name="[448]"></a>lv_obj_add_style</STRONG> (Thumb, 482 bytes, Stack size 32 bytes, lv_obj_style.o(.text.lv_obj_add_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128 + Unknown Stack Size
<LI>Call Chain = lv_obj_add_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_apply
</UL>

<P><STRONG><a name="[2e1]"></a>lv_obj_align</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184 + Unknown Stack Size
<LI>Call Chain = lv_obj_align &rArr; lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_align
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_thread
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_constructor
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
</UL>

<P><STRONG><a name="[410]"></a>lv_obj_align_to</STRONG> (Thumb, 1632 bytes, Stack size 64 bytes, lv_obj_pos.o(.text.lv_obj_align_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360 + Unknown Stack Size
<LI>Call Chain = lv_obj_align_to &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_align
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
</UL>

<P><STRONG><a name="[422]"></a>lv_obj_allocate_spec_attr</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, lv_obj.o(.text.lv_obj_allocate_spec_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040 + Unknown Stack Size
<LI>Call Chain = lv_obj_allocate_spec_attr &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_y_anim
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_x_anim
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_ext_click_area
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scrollbar_mode
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scroll_snap_y
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scroll_snap_x
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scroll_dir
</UL>

<P><STRONG><a name="[44e]"></a>lv_obj_area_is_visible</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, lv_obj_pos.o(.text.lv_obj_area_is_visible))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032 + Unknown Stack Size
<LI>Call Chain = lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_ext_draw_size
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_prev
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_visible
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
</UL>

<P><STRONG><a name="[3aa]"></a>lv_obj_calculate_ext_draw_size</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, lv_obj_draw.o(.text.lv_obj_calculate_ext_draw_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = lv_obj_calculate_ext_draw_size &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[413]"></a>lv_obj_calculate_style_text_align</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lv_obj_style.o(.text.lv_obj_calculate_style_text_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = lv_obj_calculate_style_text_align &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
</UL>

<P><STRONG><a name="[51e]"></a>lv_obj_check_type</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_check_type))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_apply
</UL>

<P><STRONG><a name="[3d3]"></a>lv_obj_class_create_obj</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, lv_obj_class.o(.text.lv_obj_class_create_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = lv_obj_class_create_obj &rArr; lv_obj_allocate_spec_attr &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_create
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_create
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_constructor
</UL>

<P><STRONG><a name="[3d4]"></a>lv_obj_class_init_obj</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, lv_obj_class.o(.text.lv_obj_class_init_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160 + Unknown Stack Size
<LI>Call Chain = lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_construct
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_enable_style_refresh
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_default
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_create
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_create
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_constructor
</UL>

<P><STRONG><a name="[3c1]"></a>lv_obj_clear_flag</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lv_obj.o(.text.lv_obj_clear_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = lv_obj_clear_flag &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_layout_positioned
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinner_constructor
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_constructor
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_constructor
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_constructor
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_constructor
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_constructor
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdownlist_constructor
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_constructor
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_constructor
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_constructor
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_constructor
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_constructor
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_constructor
</UL>

<P><STRONG><a name="[406]"></a>lv_obj_clear_state</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_clear_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256 + Unknown Stack Size
<LI>Call Chain = lv_obj_clear_state &rArr; lv_obj_set_state &rArr; _lv_obj_style_create_transition &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
</UL>

<P><STRONG><a name="[3ec]"></a>lv_obj_create</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168 + Unknown Stack Size
<LI>Call Chain = lv_obj_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_constructor
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
</UL>

<P><STRONG><a name="[405]"></a>lv_obj_del</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, lv_obj_tree.o(.text.lv_obj_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216 + Unknown Stack Size
<LI>Call Chain = lv_obj_del &rArr; lv_obj_readjust_scroll &rArr; lv_obj_scroll_by &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scrollbar_invalidate
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_destructor
</UL>

<P><STRONG><a name="[365]"></a>lv_obj_draw_dsc_init</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj_draw.o(.text.lv_obj_draw_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = lv_obj_draw_dsc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_event
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[450]"></a>lv_obj_enable_style_refresh</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_style.o(.text.lv_obj_enable_style_refresh))
<BR><BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_destructor
</UL>

<P><STRONG><a name="[3c3]"></a>lv_obj_event_base</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lv_event.o(.text.lv_obj_event_base))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_obj_event_base
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_event
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_event
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[339]"></a>lv_obj_get_child</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lv_obj_tree.o(.text.lv_obj_get_child))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tileview_event_cb
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month_event_cb
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_to_selected
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box_label
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_constructor
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inf_normalize
</UL>

<P><STRONG><a name="[38c]"></a>lv_obj_get_child_cnt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_tree.o(.text.lv_obj_get_child_cnt))
<BR><BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj_and_children
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_change_core
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tileview_event_cb
</UL>

<P><STRONG><a name="[51f]"></a>lv_obj_get_child_id</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, lv_obj_tree.o(.text.lv_obj_get_child_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_obj_get_child_id
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_apply
</UL>

<P><STRONG><a name="[42a]"></a>lv_obj_get_click_area</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_get_click_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_obj_get_click_area
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
</UL>

<P><STRONG><a name="[439]"></a>lv_obj_get_content_coords</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_get_content_coords))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = lv_obj_get_content_coords &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_increase
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
</UL>

<P><STRONG><a name="[36a]"></a>lv_obj_get_content_height</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_get_content_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = lv_obj_get_content_height &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tileview_event_cb
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tileview_tile_constructor
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_to_selected
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inf_normalize
</UL>

<P><STRONG><a name="[338]"></a>lv_obj_get_content_width</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_get_content_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = lv_obj_get_content_width &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tileview_event_cb
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tileview_tile_constructor
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cont_scroll_end_event_cb
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_point
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
</UL>

<P><STRONG><a name="[380]"></a>lv_obj_get_coords</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_pos.o(.text.lv_obj_get_coords))
<BR><BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_point
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_button_from_point
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[3ac]"></a>lv_obj_get_disp</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, lv_obj_tree.o(.text.lv_obj_get_disp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000 + Unknown Stack Size
<LI>Call Chain = lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_color_primary
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
</UL>

<P><STRONG><a name="[3c4]"></a>lv_obj_get_group</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_get_group))
<BR><BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[d3]"></a>lv_obj_get_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_pos.o(.text.lv_obj_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_constructor
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_constructor
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_to_selected
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_button_from_point
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_center
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_down
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(.text.find_track_end)
</UL>
<P><STRONG><a name="[45f]"></a>lv_obj_get_local_style_prop</STRONG> (Thumb, 142 bytes, Stack size 20 bytes, lv_obj_style.o(.text.lv_obj_get_local_style_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_obj_get_local_style_prop &rArr; lv_style_get_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_get_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
</UL>

<P><STRONG><a name="[332]"></a>lv_obj_get_parent</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_tree.o(.text.lv_obj_get_parent))
<BR><BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y2
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_view_recursive
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_layout_positioned
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_apply
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_grow
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj_and_children
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_constructor
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tileview_tile_constructor
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cont_scroll_end_event_cb
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btns_value_changed_event_cb
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month_event_cb
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_anim_ready_cb
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
</UL>

<P><STRONG><a name="[40c]"></a>lv_obj_get_screen</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lv_obj_tree.o(.text.lv_obj_get_screen))
<BR><BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
</UL>

<P><STRONG><a name="[460]"></a>lv_obj_get_scroll_bottom</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, lv_obj_scroll.o(.text.lv_obj_get_scroll_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = lv_obj_get_scroll_bottom &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_self_height
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_y
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
</UL>

<P><STRONG><a name="[459]"></a>lv_obj_get_scroll_dir</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.lv_obj_get_scroll_dir))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[345]"></a>lv_obj_get_scroll_end</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lv_obj_scroll.o(.text.lv_obj_get_scroll_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_obj_get_scroll_end &rArr; lv_anim_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_get
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tileview_event_cb
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cont_scroll_end_event_cb
</UL>

<P><STRONG><a name="[362]"></a>lv_obj_get_scroll_left</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, lv_obj_scroll.o(.text.lv_obj_get_scroll_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_scroll_left &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_self_width
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_constructor
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_point
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
</UL>

<P><STRONG><a name="[44d]"></a>lv_obj_get_scroll_right</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, lv_obj_scroll.o(.text.lv_obj_get_scroll_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = lv_obj_get_scroll_right &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_self_width
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[36b]"></a>lv_obj_get_scroll_top</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.lv_obj_get_scroll_top))
<BR><BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_constructor
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
</UL>

<P><STRONG><a name="[37d]"></a>lv_obj_get_scroll_x</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.lv_obj_get_scroll_x))
<BR><BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
</UL>

<P><STRONG><a name="[37c]"></a>lv_obj_get_scroll_y</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.lv_obj_get_scroll_y))
<BR><BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y2
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
</UL>

<P><STRONG><a name="[45b]"></a>lv_obj_get_scrollbar_area</STRONG> (Thumb, 1702 bytes, Stack size 88 bytes, lv_obj_scroll.o(.text.lv_obj_get_scrollbar_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = lv_obj_get_scrollbar_area &rArr; lv_obj_get_scroll_left &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_scroll_obj
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_scroll_dir
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scrollbar_invalidate
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[461]"></a>lv_obj_get_self_height</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_get_self_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_obj_get_self_height &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
</UL>

<P><STRONG><a name="[462]"></a>lv_obj_get_self_width</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_get_self_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_obj_get_self_width &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
</UL>

<P><STRONG><a name="[423]"></a>lv_obj_get_state</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
</UL>

<P><STRONG><a name="[2fa]"></a>lv_obj_get_style_prop</STRONG> (Thumb, 662 bytes, Stack size 72 bytes, lv_obj_style.o(.text.lv_obj_get_style_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + In Cycle
<LI>Call Chain = lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_prop_get_default
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_get_prop
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_prop_group
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y2
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_arc_dsc
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_layout_positioned
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_constructor
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_style_text_align
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_start_cb
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cont_scroll_end_event_cb
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_knob_pos
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_point
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_to_selected
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box_label
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_button_from_point
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_start_value
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_center
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_down
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_constructor
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_size
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_knob
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inf_normalize
</UL>

<P><STRONG><a name="[d2]"></a>lv_obj_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_pos.o(.text.lv_obj_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_constructor
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_knob_pos
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_constructor
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_button_from_point
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_center
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(.text.find_track_end)
</UL>
<P><STRONG><a name="[466]"></a>lv_obj_get_x</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lv_obj_pos.o(.text.lv_obj_get_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = lv_obj_get_x &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tileview_event_cb
</UL>

<P><STRONG><a name="[411]"></a>lv_obj_get_y</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lv_obj_pos.o(.text.lv_obj_get_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = lv_obj_get_y &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tileview_event_cb
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[412]"></a>lv_obj_get_y2</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, lv_obj_pos.o(.text.lv_obj_get_y2))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = lv_obj_get_y2 &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
</UL>

<P><STRONG><a name="[37a]"></a>lv_obj_has_flag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_has_flag))
<BR><BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send_core
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
</UL>

<P><STRONG><a name="[33a]"></a>lv_obj_has_flag_any</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_has_flag_any))
<BR><BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_layout_positioned
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
</UL>

<P><STRONG><a name="[3cb]"></a>lv_obj_init_draw_arc_dsc</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, lv_obj_draw.o(.text.lv_obj_init_draw_arc_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = lv_obj_init_draw_arc_dsc &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[40a]"></a>lv_obj_init_draw_img_dsc</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, lv_obj_draw.o(.text.lv_obj_init_draw_img_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = lv_obj_init_draw_img_dsc &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
</UL>

<P><STRONG><a name="[35a]"></a>lv_obj_init_draw_label_dsc</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, lv_obj_draw.o(.text.lv_obj_init_draw_label_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = lv_obj_init_draw_label_dsc &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box_label
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[364]"></a>lv_obj_init_draw_line_dsc</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, lv_obj_draw.o(.text.lv_obj_init_draw_line_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = lv_obj_init_draw_line_dsc &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
</UL>

<P><STRONG><a name="[356]"></a>lv_obj_init_draw_rect_dsc</STRONG> (Thumb, 658 bytes, Stack size 24 bytes, lv_obj_draw.o(.text.lv_obj_init_draw_rect_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = lv_obj_init_draw_rect_dsc &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_event
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[33b]"></a>lv_obj_invalidate</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_invalidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_ext_draw_size
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_disp_image
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_y_anim
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_x_anim
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scrollbar_mode
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_start_angle
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_rotation
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_end_angle
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_point
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_set_selected
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_sel_start
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_sel_end
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ofs_y_anim
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ofs_x_anim
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_to_selected
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_start_value
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_constructor
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_anim_ready
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_anim
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[346]"></a>lv_obj_invalidate_area</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_invalidate_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scrollbar_invalidate
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_knob_pos
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_point
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_blink_anim_cb
</UL>

<P><STRONG><a name="[458]"></a>lv_obj_is_editable</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, lv_obj_class.o(.text.lv_obj_is_editable))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[445]"></a>lv_obj_is_layout_positioned</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_is_layout_positioned))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = lv_obj_is_layout_positioned &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
</UL>

<P><STRONG><a name="[3a9]"></a>lv_obj_is_visible</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_is_visible))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_obj_is_visible &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_ext_draw_size
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
</UL>

<P><STRONG><a name="[446]"></a>lv_obj_mark_layout_as_dirty</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_mark_layout_as_dirty))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008 + Unknown Stack Size
<LI>Call Chain = lv_obj_mark_layout_as_dirty &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_resume
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_grow
</UL>

<P><STRONG><a name="[33d]"></a>lv_obj_move_children_by</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, lv_obj_pos.o(.text.lv_obj_move_children_by))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = lv_obj_move_children_by &rArr;  lv_obj_move_children_by (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_y_anim
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_x_anim
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
</UL>

<P><STRONG><a name="[467]"></a>lv_obj_move_to</STRONG> (Thumb, 586 bytes, Stack size 56 bytes, lv_obj_pos.o(.text.lv_obj_move_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136 + Unknown Stack Size
<LI>Call Chain = lv_obj_move_to &rArr; lv_obj_scrollbar_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scrollbar_invalidate
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_increase
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_ext_draw_size
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
</UL>

<P><STRONG><a name="[456]"></a>lv_obj_readjust_scroll</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, lv_obj_scroll.o(.text.lv_obj_readjust_scroll))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176 + Unknown Stack Size
<LI>Call Chain = lv_obj_readjust_scroll &rArr; lv_obj_scroll_by &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
</UL>

<P><STRONG><a name="[3b0]"></a>lv_obj_refr_pos</STRONG> (Thumb, 818 bytes, Stack size 48 bytes, lv_obj_pos.o(.text.lv_obj_refr_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184 + Unknown Stack Size
<LI>Call Chain = lv_obj_refr_pos &rArr; lv_obj_move_to &rArr; lv_obj_scrollbar_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
</UL>

<P><STRONG><a name="[37e]"></a>lv_obj_refr_size</STRONG> (Thumb, 1326 bytes, Stack size 80 bytes, lv_obj_pos.o(.text.lv_obj_refr_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280 + Unknown Stack Size
<LI>Call Chain = lv_obj_refr_size &rArr; lv_obj_scroll_to &rArr; lv_obj_scroll_to_x &rArr; lv_obj_scroll_by &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scrollbar_invalidate
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_increase
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_ext_draw_size
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_y
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
</UL>

<P><STRONG><a name="[429]"></a>lv_obj_refresh_ext_draw_size</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lv_obj_draw.o(.text.lv_obj_refresh_ext_draw_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_constructor
</UL>

<P><STRONG><a name="[3e2]"></a>lv_obj_refresh_self_size</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_refresh_self_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016 + Unknown Stack Size
<LI>Call Chain = lv_obj_refresh_self_size &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_resume
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_size
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[44a]"></a>lv_obj_refresh_style</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, lv_obj_style.o(.text.lv_obj_refresh_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096 + Unknown Stack Size
<LI>Call Chain = lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_change_core
</UL>

<P><STRONG><a name="[46b]"></a>lv_obj_remove_local_style_prop</STRONG> (Thumb, 162 bytes, Stack size 20 bytes, lv_obj_style.o(.text.lv_obj_remove_local_style_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 1076 + Unknown Stack Size
<LI>Call Chain = lv_obj_remove_local_style_prop &rArr; lv_style_remove_prop &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_one_line
</UL>

<P><STRONG><a name="[3ed]"></a>lv_obj_remove_style</STRONG> (Thumb, 582 bytes, Stack size 40 bytes, lv_obj_style.o(.text.lv_obj_remove_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136 + Unknown Stack Size
<LI>Call Chain = lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_destructor
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
</UL>

<P><STRONG><a name="[46e]"></a>lv_obj_report_style_change</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lv_obj_style.o(.text.lv_obj_report_style_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136 + Unknown Stack Size
<LI>Call Chain = lv_obj_report_style_change &rArr; report_style_change_core &rArr;  report_style_change_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_next
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_change_core
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[468]"></a>lv_obj_scroll_by</STRONG> (Thumb, 358 bytes, Stack size 96 bytes, lv_obj_scroll.o(.text.lv_obj_scroll_by))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152 + Unknown Stack Size
<LI>Call Chain = lv_obj_scroll_by &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_speed_to_time
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_y
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
</UL>

<P><STRONG><a name="[469]"></a>lv_obj_scroll_to</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, lv_obj_scroll.o(.text.lv_obj_scroll_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200 + Unknown Stack Size
<LI>Call Chain = lv_obj_scroll_to &rArr; lv_obj_scroll_to_x &rArr; lv_obj_scroll_by &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_one_line
</UL>

<P><STRONG><a name="[45a]"></a>lv_obj_scroll_to_view_recursive</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, lv_obj_scroll.o(.text.lv_obj_scroll_to_view_recursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344 + Unknown Stack Size
<LI>Call Chain = lv_obj_scroll_to_view_recursive &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[45d]"></a>lv_obj_scroll_to_x</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, lv_obj_scroll.o(.text.lv_obj_scroll_to_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176 + Unknown Stack Size
<LI>Call Chain = lv_obj_scroll_to_x &rArr; lv_obj_scroll_by &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
</UL>

<P><STRONG><a name="[45e]"></a>lv_obj_scroll_to_y</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, lv_obj_scroll.o(.text.lv_obj_scroll_to_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176 + Unknown Stack Size
<LI>Call Chain = lv_obj_scroll_to_y &rArr; lv_obj_scroll_by &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_to_selected
</UL>

<P><STRONG><a name="[454]"></a>lv_obj_scrollbar_invalidate</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, lv_obj_scroll.o(.text.lv_obj_scrollbar_invalidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080 + Unknown Stack Size
<LI>Call Chain = lv_obj_scrollbar_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
</UL>

<P><STRONG><a name="[3c2]"></a>lv_obj_set_ext_click_area</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_set_ext_click_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056 + Unknown Stack Size
<LI>Call Chain = lv_obj_set_ext_click_area &rArr; lv_obj_allocate_spec_attr &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_constructor
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_constructor
</UL>

<P><STRONG><a name="[471]"></a>lv_obj_set_flex_align</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lv_flex.o(.text.lv_obj_set_flex_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168 + Unknown Stack Size
<LI>Call Chain = lv_obj_set_flex_align &rArr; lv_obj_set_style_layout &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_layout
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_constructor
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
</UL>

<P><STRONG><a name="[474]"></a>lv_obj_set_flex_flow</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lv_flex.o(.text.lv_obj_set_flex_flow))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160 + Unknown Stack Size
<LI>Call Chain = lv_obj_set_flex_flow &rArr; lv_obj_set_style_layout &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_layout
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_constructor
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
</UL>

<P><STRONG><a name="[475]"></a>lv_obj_set_flex_grow</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lv_flex.o(.text.lv_obj_set_flex_grow))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152 + Unknown Stack Size
<LI>Call Chain = lv_obj_set_flex_grow &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_constructor
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
</UL>

<P><STRONG><a name="[40f]"></a>lv_obj_set_height</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lv_obj_pos.o(.text.lv_obj_set_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168 + Unknown Stack Size
<LI>Call Chain = lv_obj_set_height &rArr; lv_obj_set_style_height &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_height
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_one_line
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
</UL>

<P><STRONG><a name="[472]"></a>lv_obj_set_local_style_prop</STRONG> (Thumb, 420 bytes, Stack size 48 bytes, lv_obj_style.o(.text.lv_obj_set_local_style_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144 + Unknown Stack Size
<LI>Call Chain = lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_y
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_x
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_width
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_layout
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_height
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_align
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_grow
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_align
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_color
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_align
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_radius
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_top
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_right
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_left
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_column
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_bottom
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_opa
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_img_src
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_color
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_base_dir
</UL>

<P><STRONG><a name="[477]"></a>lv_obj_set_pos</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_set_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184 + Unknown Stack Size
<LI>Call Chain = lv_obj_set_pos &rArr; lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tileview_tile_constructor
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[478]"></a>lv_obj_set_scroll_dir</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lv_obj_scroll.o(.text.lv_obj_set_scroll_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056 + Unknown Stack Size
<LI>Call Chain = lv_obj_set_scroll_dir &rArr; lv_obj_allocate_spec_attr &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tileview_event_cb
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tileview_tile_constructor
</UL>

<P><STRONG><a name="[479]"></a>lv_obj_set_scroll_snap_x</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lv_obj_scroll.o(.text.lv_obj_set_scroll_snap_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056 + Unknown Stack Size
<LI>Call Chain = lv_obj_set_scroll_snap_x &rArr; lv_obj_allocate_spec_attr &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tileview_constructor
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
</UL>

<P><STRONG><a name="[47a]"></a>lv_obj_set_scroll_snap_y</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lv_obj_scroll.o(.text.lv_obj_set_scroll_snap_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056 + Unknown Stack Size
<LI>Call Chain = lv_obj_set_scroll_snap_y &rArr; lv_obj_allocate_spec_attr &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tileview_constructor
</UL>

<P><STRONG><a name="[3ee]"></a>lv_obj_set_scrollbar_mode</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lv_obj_scroll.o(.text.lv_obj_set_scrollbar_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = lv_obj_set_scrollbar_mode &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
</UL>

<P><STRONG><a name="[47b]"></a>lv_obj_set_size</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lv_obj_pos.o(.text.lv_obj_set_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168 + Unknown Stack Size
<LI>Call Chain = lv_obj_set_size &rArr; lv_obj_set_style_width &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_width
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_height
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_constructor
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tileview_tile_constructor
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tileview_constructor
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
</UL>

<P><STRONG><a name="[44b]"></a>lv_obj_set_style_align</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144 + Unknown Stack Size
<LI>Call Chain = lv_obj_set_style_align &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
</UL>

<P><STRONG><a name="[42e]"></a>lv_obj_set_style_base_dir</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_base_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144 + Unknown Stack Size
<LI>Call Chain = lv_obj_set_style_base_dir &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_constructor
</UL>

<P><STRONG><a name="[2d9]"></a>lv_obj_set_style_bg_color</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_bg_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144 + Unknown Stack Size
<LI>Call Chain = lv_obj_set_style_bg_color &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[47f]"></a>lv_obj_set_style_bg_img_src</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_bg_img_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144 + Unknown Stack Size
<LI>Call Chain = lv_obj_set_style_bg_img_src &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
</UL>

<P><STRONG><a name="[2d8]"></a>lv_obj_set_style_bg_opa</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_bg_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144 + Unknown Stack Size
<LI>Call Chain = lv_obj_set_style_bg_opa &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[476]"></a>lv_obj_set_style_height</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144 + Unknown Stack Size
<LI>Call Chain = lv_obj_set_style_height &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
</UL>

<P><STRONG><a name="[473]"></a>lv_obj_set_style_layout</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_layout))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144 + Unknown Stack Size
<LI>Call Chain = lv_obj_set_style_layout &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_align
</UL>

<P><STRONG><a name="[2dc]"></a>lv_obj_set_style_pad_bottom</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144 + Unknown Stack Size
<LI>Call Chain = lv_obj_set_style_pad_bottom &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
</UL>

<P><STRONG><a name="[480]"></a>lv_obj_set_style_pad_column</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_pad_column))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144 + Unknown Stack Size
<LI>Call Chain = lv_obj_set_style_pad_column &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
</UL>

<P><STRONG><a name="[2dd]"></a>lv_obj_set_style_pad_left</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144 + Unknown Stack Size
<LI>Call Chain = lv_obj_set_style_pad_left &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
</UL>

<P><STRONG><a name="[2de]"></a>lv_obj_set_style_pad_right</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144 + Unknown Stack Size
<LI>Call Chain = lv_obj_set_style_pad_right &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
</UL>

<P><STRONG><a name="[2db]"></a>lv_obj_set_style_pad_top</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144 + Unknown Stack Size
<LI>Call Chain = lv_obj_set_style_pad_top &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
</UL>

<P><STRONG><a name="[481]"></a>lv_obj_set_style_radius</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_radius))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144 + Unknown Stack Size
<LI>Call Chain = lv_obj_set_style_radius &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
</UL>

<P><STRONG><a name="[2df]"></a>lv_obj_set_style_text_align</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_text_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144 + Unknown Stack Size
<LI>Call Chain = lv_obj_set_style_text_align &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
</UL>

<P><STRONG><a name="[2da]"></a>lv_obj_set_style_text_color</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_text_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144 + Unknown Stack Size
<LI>Call Chain = lv_obj_set_style_text_color &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[47c]"></a>lv_obj_set_style_width</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144 + Unknown Stack Size
<LI>Call Chain = lv_obj_set_style_width &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
</UL>

<P><STRONG><a name="[482]"></a>lv_obj_set_style_x</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144 + Unknown Stack Size
<LI>Call Chain = lv_obj_set_style_x &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
</UL>

<P><STRONG><a name="[483]"></a>lv_obj_set_style_y</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144 + Unknown Stack Size
<LI>Call Chain = lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
</UL>

<P><STRONG><a name="[40e]"></a>lv_obj_set_width</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lv_obj_pos.o(.text.lv_obj_set_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168 + Unknown Stack Size
<LI>Call Chain = lv_obj_set_width &rArr; lv_obj_set_style_width &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_width
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_constructor
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_one_line
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_constructor
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_constructor
</UL>

<P><STRONG><a name="[44c]"></a>lv_obj_set_x</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lv_obj_pos.o(.text.lv_obj_set_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168 + Unknown Stack Size
<LI>Call Chain = lv_obj_set_x &rArr; lv_obj_set_style_x &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_x
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_local_style_prop
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
</UL>

<P><STRONG><a name="[3a7]"></a>lv_obj_set_y</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lv_obj_pos.o(.text.lv_obj_set_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168 + Unknown Stack Size
<LI>Call Chain = lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_y
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_local_style_prop
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_y_anim
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inf_normalize
</UL>

<P><STRONG><a name="[47e]"></a>lv_obj_style_get_selector_part</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj_style.o(.text.lv_obj_style_get_selector_part))
<BR><BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[47d]"></a>lv_obj_style_get_selector_state</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj_style.o(.text.lv_obj_style_get_selector_state))
<BR><BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[2ca]"></a>lv_obj_update_layout</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_update_layout))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312 + Unknown Stack Size
<LI>Call Chain = lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_view_recursive
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tileview_tile_constructor
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
</UL>

<P><STRONG><a name="[38b]"></a>lv_palette_darken</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, lv_color.o(.text.lv_palette_darken))
<BR><BR>[Stack]<UL><LI>Max Depth = 992 + Unknown Stack Size
<LI>Call Chain = lv_palette_darken &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grey_filter_cb
</UL>

<P><STRONG><a name="[38a]"></a>lv_palette_lighten</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, lv_color.o(.text.lv_palette_lighten))
<BR><BR>[Stack]<UL><LI>Max Depth = 992 + Unknown Stack Size
<LI>Call Chain = lv_palette_lighten &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grey_filter_cb
</UL>

<P><STRONG><a name="[35f]"></a>lv_palette_main</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lv_color.o(.text.lv_palette_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 992 + Unknown Stack Size
<LI>Call Chain = lv_palette_main &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_color_primary
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_part_begin_event_cb
</UL>

<P><STRONG><a name="[398]"></a>lv_refr_now</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lv_refr.o(.text.lv_refr_now))
<BR><BR>[Stack]<UL><LI>Max Depth = 2168 + Unknown Stack Size
<LI>Call Chain = lv_refr_now &rArr; _lv_disp_refr_timer &rArr; lv_refr_area_part &rArr; lv_draw_rect &rArr; lv_draw_img &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_next
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_refr_now
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_thread
</UL>

<P><STRONG><a name="[301]"></a>lv_style_get_prop</STRONG> (Thumb, 282 bytes, Stack size 28 bytes, lv_style.o(.text.lv_style_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lv_style_get_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_local_style_prop
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_state_compare
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
</UL>

<P><STRONG><a name="[387]"></a>lv_style_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style.o(.text.lv_style_init))
<BR><BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_trans_style
</UL>

<P><STRONG><a name="[524]"></a>lv_style_is_empty</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style.o(.text.lv_style_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
</UL>

<P><STRONG><a name="[465]"></a>lv_style_prop_get_default</STRONG> (Thumb, 374 bytes, Stack size 0 bytes, lv_style.o(.text.lv_style_prop_get_default))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>

<P><STRONG><a name="[41c]"></a>lv_style_register_prop</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_style.o(.text.lv_style_register_prop))
<BR><BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_grid_init
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_flex_init
</UL>

<P><STRONG><a name="[46c]"></a>lv_style_remove_prop</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, lv_style.o(.text.lv_style_remove_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056 + Unknown Stack Size
<LI>Call Chain = lv_style_remove_prop &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_local_style_prop
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
</UL>

<P><STRONG><a name="[46d]"></a>lv_style_reset</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lv_style.o(.text.lv_style_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 992 + Unknown Stack Size
<LI>Call Chain = lv_style_reset &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[492]"></a>lv_style_set_anim_time</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_anim_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_style_set_anim_time &rArr; lv_style_set_prop &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[493]"></a>lv_style_set_arc_color</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_arc_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_style_set_arc_color &rArr; lv_style_set_prop &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[494]"></a>lv_style_set_arc_rounded</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_arc_rounded))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_style_set_arc_rounded &rArr; lv_style_set_prop &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[495]"></a>lv_style_set_arc_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_arc_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_style_set_arc_width &rArr; lv_style_set_prop &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[496]"></a>lv_style_set_bg_color</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_bg_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_style_set_bg_color &rArr; lv_style_set_prop &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[497]"></a>lv_style_set_bg_grad_color</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_bg_grad_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_style_set_bg_grad_color &rArr; lv_style_set_prop &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[498]"></a>lv_style_set_bg_img_src</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_bg_img_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_style_set_bg_img_src &rArr; lv_style_set_prop &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[499]"></a>lv_style_set_bg_opa</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_bg_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_style_set_bg_opa &rArr; lv_style_set_prop &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[49a]"></a>lv_style_set_border_color</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_border_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_style_set_border_color &rArr; lv_style_set_prop &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[49b]"></a>lv_style_set_border_post</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_border_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_style_set_border_post &rArr; lv_style_set_prop &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[49c]"></a>lv_style_set_border_side</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_border_side))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_style_set_border_side &rArr; lv_style_set_prop &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[49d]"></a>lv_style_set_border_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_border_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_style_set_border_width &rArr; lv_style_set_prop &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[49e]"></a>lv_style_set_clip_corner</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_clip_corner))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_style_set_clip_corner &rArr; lv_style_set_prop &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[49f]"></a>lv_style_set_color_filter_dsc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_color_filter_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_style_set_color_filter_dsc &rArr; lv_style_set_prop &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4a0]"></a>lv_style_set_color_filter_opa</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_color_filter_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_style_set_color_filter_opa &rArr; lv_style_set_prop &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4a1]"></a>lv_style_set_height</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_style_set_height &rArr; lv_style_set_prop &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4a2]"></a>lv_style_set_line_color</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_line_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_style_set_line_color &rArr; lv_style_set_prop &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4a3]"></a>lv_style_set_line_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_line_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_style_set_line_width &rArr; lv_style_set_prop &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4a4]"></a>lv_style_set_max_height</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_max_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_style_set_max_height &rArr; lv_style_set_prop &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4a5]"></a>lv_style_set_max_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_max_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_style_set_max_width &rArr; lv_style_set_prop &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4a6]"></a>lv_style_set_outline_color</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_outline_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_style_set_outline_color &rArr; lv_style_set_prop &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4a7]"></a>lv_style_set_outline_opa</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_outline_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_style_set_outline_opa &rArr; lv_style_set_prop &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4a8]"></a>lv_style_set_outline_pad</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_outline_pad))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_style_set_outline_pad &rArr; lv_style_set_prop &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4a9]"></a>lv_style_set_outline_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_outline_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_style_set_outline_width &rArr; lv_style_set_prop &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4aa]"></a>lv_style_set_pad_bottom</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_style_set_pad_bottom &rArr; lv_style_set_prop &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4ab]"></a>lv_style_set_pad_column</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_pad_column))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_style_set_pad_column &rArr; lv_style_set_prop &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4ac]"></a>lv_style_set_pad_left</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_style_set_pad_left &rArr; lv_style_set_prop &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4ad]"></a>lv_style_set_pad_right</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_style_set_pad_right &rArr; lv_style_set_prop &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4ae]"></a>lv_style_set_pad_row</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_pad_row))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_style_set_pad_row &rArr; lv_style_set_prop &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4af]"></a>lv_style_set_pad_top</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_style_set_pad_top &rArr; lv_style_set_prop &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[2fc]"></a>lv_style_set_prop</STRONG> (Thumb, 456 bytes, Stack size 32 bytes, lv_style.o(.text.lv_style_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_style_set_prop &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transform_width
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transform_height
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_line_space
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_font
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_align
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_width
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_spread
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_ofs_y
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_color
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_width
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_pad
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_opa
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_color
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_max_width
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_max_height
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_height
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_clip_corner
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_post
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_img_src
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_grad_color
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_arc_rounded
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_width
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_row
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_column
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_width
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_color
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_color_filter_opa
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_color_filter_dsc
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_width
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_side
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_color
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_arc_width
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_arc_color
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_anim_time
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_start_cb
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
</UL>

<P><STRONG><a name="[4b0]"></a>lv_style_set_radius</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_radius))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_style_set_radius &rArr; lv_style_set_prop &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4b1]"></a>lv_style_set_shadow_color</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_shadow_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_style_set_shadow_color &rArr; lv_style_set_prop &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4b2]"></a>lv_style_set_shadow_ofs_y</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_shadow_ofs_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_style_set_shadow_ofs_y &rArr; lv_style_set_prop &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4b3]"></a>lv_style_set_shadow_spread</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_shadow_spread))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_style_set_shadow_spread &rArr; lv_style_set_prop &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4b4]"></a>lv_style_set_shadow_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_shadow_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_style_set_shadow_width &rArr; lv_style_set_prop &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4b5]"></a>lv_style_set_text_align</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_text_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_style_set_text_align &rArr; lv_style_set_prop &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4b6]"></a>lv_style_set_text_color</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_text_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_style_set_text_color &rArr; lv_style_set_prop &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4b7]"></a>lv_style_set_text_font</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_text_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_style_set_text_font &rArr; lv_style_set_prop &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4b8]"></a>lv_style_set_text_line_space</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_text_line_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_style_set_text_line_space &rArr; lv_style_set_prop &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4b9]"></a>lv_style_set_transform_height</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_transform_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_style_set_transform_height &rArr; lv_style_set_prop &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4ba]"></a>lv_style_set_transform_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_transform_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_style_set_transform_width &rArr; lv_style_set_prop &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4bb]"></a>lv_style_set_transition</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_transition))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_style_set_transition &rArr; lv_style_set_prop &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4bc]"></a>lv_style_set_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_style_set_width &rArr; lv_style_set_prop &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[515]"></a>lv_style_transition_dsc_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_style.o(.text.lv_style_transition_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_style_transition_dsc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[334]"></a>lv_tabview_set_act</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, lv_tabview.o(.text.lv_tabview_set_act))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344 + Unknown Stack Size
<LI>Call Chain = lv_tabview_set_act &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_btn_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_event
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cont_scroll_end_event_cb
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btns_value_changed_event_cb
</UL>

<P><STRONG><a name="[430]"></a>lv_textarea_add_char</STRONG> (Thumb, 490 bytes, Stack size 112 bytes, lv_textarea.o(.text.lv_textarea_add_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = lv_textarea_add_char &rArr;  lv_textarea_add_text (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_sel_start
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_sel_end
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text_selection_start
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text_selection_end
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_ins
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[42f]"></a>lv_textarea_add_text</STRONG> (Thumb, 548 bytes, Stack size 104 bytes, lv_textarea.o(.text.lv_textarea_add_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = lv_textarea_add_text &rArr;  lv_textarea_add_text (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_sel_start
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_sel_end
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text_selection_start
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text_selection_end
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_ins
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
</UL>

<P><STRONG><a name="[4c1]"></a>lv_textarea_cursor_down</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lv_textarea.o(.text.lv_textarea_cursor_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448 + Unknown Stack Size
<LI>Call Chain = lv_textarea_cursor_down &rArr; lv_textarea_set_cursor_pos &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[432]"></a>lv_textarea_cursor_left</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_textarea.o(.text.lv_textarea_cursor_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424 + Unknown Stack Size
<LI>Call Chain = lv_textarea_cursor_left &rArr; lv_textarea_set_cursor_pos &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
</UL>

<P><STRONG><a name="[433]"></a>lv_textarea_cursor_right</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_textarea.o(.text.lv_textarea_cursor_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424 + Unknown Stack Size
<LI>Call Chain = lv_textarea_cursor_right &rArr; lv_textarea_set_cursor_pos &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
</UL>

<P><STRONG><a name="[434]"></a>lv_textarea_del_char</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, lv_textarea.o(.text.lv_textarea_del_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672 + Unknown Stack Size
<LI>Call Chain = lv_textarea_del_char &rArr; lv_textarea_add_text &rArr;  lv_textarea_add_text (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_sel_start
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_sel_end
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text_selection_start
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text_selection_end
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_cut
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[435]"></a>lv_textarea_get_cursor_pos</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_textarea.o(.text.lv_textarea_get_cursor_pos))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
</UL>

<P><STRONG><a name="[431]"></a>lv_textarea_get_one_line</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_textarea.o(.text.lv_textarea_get_one_line))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
</UL>

<P><STRONG><a name="[436]"></a>lv_textarea_get_text</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_textarea.o(.text.lv_textarea_get_text))
<BR><BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
</UL>

<P><STRONG><a name="[48f]"></a>lv_textarea_set_cursor_click_pos</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_textarea.o(.text.lv_textarea_set_cursor_click_pos))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_constructor
</UL>

<P><STRONG><a name="[437]"></a>lv_textarea_set_cursor_pos</STRONG> (Thumb, 382 bytes, Stack size 112 bytes, lv_textarea.o(.text.lv_textarea_set_cursor_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424 + Unknown Stack Size
<LI>Call Chain = lv_textarea_set_cursor_pos &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_y
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
</UL>
<BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_updatevalue
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_right
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_left
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_down
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_constructor
</UL>

<P><STRONG><a name="[48e]"></a>lv_textarea_set_one_line</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, lv_textarea.o(.text.lv_textarea_set_one_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208 + Unknown Stack Size
<LI>Call Chain = lv_textarea_set_one_line &rArr; lv_obj_scroll_to &rArr; lv_obj_scroll_to_x &rArr; lv_obj_scroll_by &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_constructor
</UL>

<P><STRONG><a name="[491]"></a>lv_textarea_set_text</STRONG> (Thumb, 498 bytes, Stack size 104 bytes, lv_textarea.o(.text.lv_textarea_set_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640 + Unknown Stack Size
<LI>Call Chain = lv_textarea_set_text &rArr; lv_textarea_add_char &rArr;  lv_textarea_add_text (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_sel_start
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_sel_end
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text_selection_start
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text_selection_end
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_updatevalue
</UL>

<P><STRONG><a name="[451]"></a>lv_theme_apply</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lv_theme.o(.text.lv_theme_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152 + Unknown Stack Size
<LI>Call Chain = lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_theme
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_theme
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
</UL>

<P><STRONG><a name="[3eb]"></a>lv_theme_default_init</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, lv_theme_default.o(.text.lv_theme_default_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168 + Unknown Stack Size
<LI>Call Chain = lv_theme_default_init &rArr; lv_obj_report_style_change &rArr; report_style_change_core &rArr;  report_style_change_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_theme
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_report_style_change
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
</UL>

<P><STRONG><a name="[3ea]"></a>lv_theme_default_is_inited</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_theme_default.o(.text.lv_theme_default_is_inited))
<BR><BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
</UL>

<P><STRONG><a name="[360]"></a>lv_theme_get_color_primary</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lv_theme.o(.text.lv_theme_get_color_primary))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008 + Unknown Stack Size
<LI>Call Chain = lv_theme_get_color_primary &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_theme
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_main
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_constructor
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_part_begin_event_cb
</UL>

<P><STRONG><a name="[2d1]"></a>lv_tick_elaps</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_hal_tick.o(.text.lv_tick_elaps))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_tick_elaps
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_get_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_handler
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
</UL>

<P><STRONG><a name="[2c9]"></a>lv_tick_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_hal_tick.o(.text.lv_tick_get))
<BR><BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_get_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_handler
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_reset_long_press
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_ready
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_constructor
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
</UL>

<P><STRONG><a name="[2b9]"></a>lv_timer_create</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, lv_timer.o(.text.lv_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056 + Unknown Stack Size
<LI>Call Chain = lv_timer_create &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
</UL>

<P><STRONG><a name="[2e2]"></a>lv_timer_get_idle</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_timer.o(.text.lv_timer_get_idle))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[397]"></a>lv_timer_handler</STRONG> (Thumb, 452 bytes, Stack size 40 bytes, lv_timer.o(.text.lv_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016 + Unknown Stack Size
<LI>Call Chain = lv_timer_handler &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_thread
</UL>

<P><STRONG><a name="[2bc]"></a>lv_timer_pause</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_timer.o(.text.lv_timer_pause))
<BR><BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
</UL>

<P><STRONG><a name="[3ef]"></a>lv_timer_ready</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_timer.o(.text.lv_timer_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_timer_ready
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
</UL>

<P><STRONG><a name="[2bb]"></a>lv_timer_resume</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_timer.o(.text.lv_timer_resume))
<BR><BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
</UL>

<P><STRONG><a name="[2e8]"></a>lv_trigo_sin</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, lv_math.o(.text.lv_trigo_sin))
<BR><BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_init
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_get_transformed_area
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_angle_init
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_knob_pos
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
</UL>

<P><STRONG><a name="[368]"></a>lv_txt_get_size</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, lv_txt.o(.text.lv_txt_get_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024 + Unknown Stack Size
<LI>Call Chain = lv_txt_get_size &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_row_height
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[3f9]"></a>lv_txt_get_width</STRONG> (Thumb, 270 bytes, Stack size 40 bytes, lv_txt.o(.text.lv_txt_get_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lv_txt_get_width &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[1d9]"></a>main</STRONG> (Thumb, 466 bytes, Stack size 24 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 2244 + Unknown Stack Size
<LI>Call Chain = main &rArr; MX_JPEG_Init &rArr; HAL_JPEG_Init &rArr; JPEG_Set_HuffAC_Mem &rArr; JPEG_Bits_To_SizeCodes &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Enable
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Disable
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_ConfigRegion
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_MDMA_Init
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_JPEG_Init
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_QUADSPI_Init
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DCMI_Init
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSetPriority
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[443]"></a>memory_alloc</STRONG> (Thumb, 698 bytes, Stack size 56 bytes, rte_memory.o(.text.memory_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = memory_alloc &rArr; block_locate_free &rArr; remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_split
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_locate_free
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_realloc
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_calloc
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_malloc
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>

<P><STRONG><a name="[323]"></a>memory_alloc_align</STRONG> (Thumb, 1400 bytes, Stack size 64 bytes, rte_memory.o(.text.memory_alloc_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = memory_alloc_align &rArr; block_locate_free &rArr; remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_split
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_locate_free
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_send_async
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_fill_color_normal
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_snapshot
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_jpeg_compress
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_thread
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_create
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_calloc_object
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_calloc_calculate
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_malloc_calculate
</UL>

<P><STRONG><a name="[4cc]"></a>memory_calloc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rte_memory.o(.text.memory_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = memory_calloc &rArr; memory_alloc &rArr; block_locate_free &rArr; remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_calloc
</UL>

<P><STRONG><a name="[4cb]"></a>memory_demon</STRONG> (Thumb, 362 bytes, Stack size 64 bytes, rte_memory.o(.text.memory_demon))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = memory_demon &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory
</UL>

<P><STRONG><a name="[321]"></a>memory_free</STRONG> (Thumb, 640 bytes, Stack size 56 bytes, rte_memory.o(.text.memory_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = memory_free &rArr; block_merge_next &rArr; remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_free_block
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_send_async
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_reuse
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_fill_color_normal
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_free
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_jpeg_compress
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_init
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_realloc
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_free
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_free_all
</UL>

<P><STRONG><a name="[4cd]"></a>memory_pool</STRONG> (Thumb, 540 bytes, Stack size 56 bytes, rte_memory.o(.text.memory_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = memory_pool &rArr; block_insert &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_init
</UL>

<P><STRONG><a name="[444]"></a>memory_realloc</STRONG> (Thumb, 734 bytes, Stack size 72 bytes, rte_memory.o(.text.memory_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = memory_realloc &rArr; memory_free &rArr; block_merge_next &rArr; remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_split
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_free
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_realloc
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>

<P><STRONG><a name="[322]"></a>memory_sizeof_max</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, rte_memory.o(.text.memory_sizeof_max))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = memory_sizeof_max
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hough_find_lines
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hough_find_circles
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_jpeg_compress
</UL>

<P><STRONG><a name="[399]"></a>osDelay</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_delay.o(.text.osDelay))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_thread
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_thread
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_delay_ms
</UL>

<P><STRONG><a name="[2b4]"></a>osKernelGetState</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osKernelGetState))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>

<P><STRONG><a name="[230]"></a>osKernelGetTickCount</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osKernelGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_get_tick
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[30c]"></a>osKernelInitialize</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rtx_kernel.o(.text.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelPreInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[4ca]"></a>osKernelStart</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osKernelStart))
<BR><BR>[Calls]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[308]"></a>osMutexAcquire</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osMutexAcquire))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_mutex_trylock
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_mutex_lock
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>

<P><STRONG><a name="[309]"></a>osMutexDelete</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osMutexDelete), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
</UL>

<P><STRONG><a name="[30a]"></a>osMutexNew</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osMutexNew))
<BR><BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_create
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_create
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>

<P><STRONG><a name="[30b]"></a>osMutexRelease</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osMutexRelease))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_mutex_unlock
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
</UL>

<P><STRONG><a name="[4d5]"></a>osRtxErrorNotify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_config.o(.text.osRtxErrorNotify))
<BR><BR>[Calls]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>

<P><STRONG><a name="[105]"></a>osRtxIdleThread</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_config.o(.text.osRtxIdleThread))
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxIdleThread
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxIdleThread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osRtxThreadStartup)
</UL>
<P><STRONG><a name="[2b6]"></a>osRtxKernelErrorNotify</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osRtxKernelErrorNotify))
<BR><BR>[Calls]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>

<P><STRONG><a name="[4d3]"></a>osRtxKernelPreInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osRtxKernelPreInit))
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[51a]"></a>osRtxMemoryAlloc</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, rtx_memory.o(.text.osRtxMemoryAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = osRtxMemoryAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[4e4]"></a>osRtxMemoryFree</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rtx_memory.o(.text.osRtxMemoryFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
</UL>

<P><STRONG><a name="[143]"></a>osRtxMemoryInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, rtx_memory.o(.text.osRtxMemoryInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxMemoryInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.svcRtxKernelInitialize)
</UL>
<P><STRONG><a name="[519]"></a>osRtxMemoryPoolAlloc</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, rtx_mempool.o(.text.osRtxMemoryPoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxMemoryPoolAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[4e5]"></a>osRtxMemoryPoolFree</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, rtx_mempool.o(.text.osRtxMemoryPoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryPoolFree
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
</UL>

<P><STRONG><a name="[2aa]"></a>osRtxMemoryPoolInit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rtx_mempool.o(.text.osRtxMemoryPoolInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryPoolInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[4d6]"></a>osRtxMutexOwnerRelease</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, rtx_mutex.o(.text.osRtxMutexOwnerRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[4d9]"></a>osRtxMutexOwnerRestore</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rtx_mutex.o(.text.osRtxMutexOwnerRestore))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxMutexOwnerRestore &rArr; osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[1df]"></a>osRtxPendSV_Handler</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, rtx_system.o(.text.osRtxPendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[4dc]"></a>osRtxPostProcess</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, rtx_system.o(.text.osRtxPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[4dd]"></a>osRtxThreadDelayTick</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadDelayTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osRtxThreadDelayTick &rArr; osRtxMutexOwnerRestore &rArr; osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRestore
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRoot
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[4db]"></a>osRtxThreadDispatch</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadDispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadSetPriority
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[4d7]"></a>osRtxThreadListGet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListGet))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
</UL>

<P><STRONG><a name="[4e7]"></a>osRtxThreadListPut</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadListPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
</UL>

<P><STRONG><a name="[4df]"></a>osRtxThreadListRemove</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[4da]"></a>osRtxThreadListSort</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadListSort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRestore
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadSetPriority
</UL>

<P><STRONG><a name="[4e0]"></a>osRtxThreadReadyPut</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadReadyPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[4e9]"></a>osRtxThreadStartup</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadStartup))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[4ee]"></a>osRtxThreadSwitch</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadSwitch))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[4ea]"></a>osRtxThreadWaitEnter</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadWaitEnter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
</UL>

<P><STRONG><a name="[4d8]"></a>osRtxThreadWaitExit</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadWaitExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadJoinWakeup
</UL>

<P><STRONG><a name="[1e0]"></a>osRtxTick_Handler</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, rtx_system.o(.text.osRtxTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osRtxTick_Handler &rArr; osRtxThreadDelayTick &rArr; osRtxMutexOwnerRestore &rArr; osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_AcknowledgeIRQ
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[324]"></a>osSemaphoreAcquire</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, rtx_semaphore.o(.text.osSemaphoreAcquire))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_async
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_send_async
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recv_async
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_snapshot
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_jpeg_compress
</UL>

<P><STRONG><a name="[326]"></a>osSemaphoreNew</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_semaphore.o(.text.osSemaphoreNew))
<BR><BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_create
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_jpeg_init
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_create
</UL>

<P><STRONG><a name="[21c]"></a>osSemaphoreRelease</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, rtx_semaphore.o(.text.osSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osSemaphoreRelease &rArr; SemaphoreTokenIncrement
</UL>
<BR>[Calls]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenIncrement
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_EncodeCpltCallback
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_DataReadyCallback
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_FrameEventCallback
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxCpltCallback
</UL>

<P><STRONG><a name="[145]"></a>osThreadExit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadExit))
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[2b5]"></a>osThreadGetId</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadGetId))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>

<P><STRONG><a name="[4c8]"></a>osThreadNew</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadNew))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_thread
</UL>

<P><STRONG><a name="[4c9]"></a>osThreadSetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadSetPriority))
<BR><BR>[Calls]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_thread
</UL>

<P><STRONG><a name="[4f9]"></a>ov2640_init</STRONG> (Thumb, 228 bytes, Stack size 0 bytes, ov2640.o(.text.ov2640_init))
<BR><BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_init
</UL>

<P><STRONG><a name="[4fa]"></a>ov7725_init</STRONG> (Thumb, 228 bytes, Stack size 0 bytes, ov7725.o(.text.ov7725_init))
<BR><BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_init
</UL>

<P><STRONG><a name="[4f1]"></a>refresh_disp_image</STRONG> (Thumb, 344 bytes, Stack size 56 bytes, gui_thread.o(.text.refresh_disp_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104 + Unknown Stack Size
<LI>Call Chain = refresh_disp_image &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_get_src
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_yuv_to_rgb
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_thread
</UL>

<P><STRONG><a name="[330]"></a>rte_delay_ms</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rte_adapter_cmsis_rtos2.o(.text.rte_delay_ms))
<BR><BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_set_pixformat
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_set_framesize
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_reset
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_init
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_init
</UL>

<P><STRONG><a name="[36d]"></a>rte_get_general_allocator</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rte_adapter_cmsis_rtos2.o(.text.rte_get_general_allocator))
<BR><BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_create
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_timer_free_cb
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_pop_tail_value
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_destroy
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_create_new
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slice_foreach_value
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slice_destroy
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_push_tail_value
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_pop_head_value
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_create
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_clear
</UL>

<P><STRONG><a name="[51b]"></a>rte_get_main_timergroup</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rte_adapter_cmsis_rtos2.o(.text.rte_get_main_timergroup))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_thread
</UL>

<P><STRONG><a name="[13c]"></a>rte_get_tick</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rte_adapter_cmsis_rtos2.o(.text.rte_get_tick))
<BR><BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_tick_consume
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_snapshot
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_device_write_async
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_init
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_device_write_sync
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_device_read_async
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rte_adapter_cmsis_rtos2.o(.text.rte_init)
</UL>
<P><STRONG><a name="[4f4]"></a>rte_init</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, rte_adapter_cmsis_rtos2.o(.text.rte_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = rte_init &rArr; memory_pool &rArr; block_insert &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_create_group
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_pool
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_thread
</UL>

<P><STRONG><a name="[cb]"></a>rte_mutex_lock</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rte_adapter_cmsis_rtos2.o(.text.rte_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rte_mutex_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Address Reference Count : 3]<UL><LI> rte_adapter_cmsis_rtos2.o(.text.rte_init)
<LI> hal_com_stm32h7.o(.text.com_create)
<LI> hal_spi_stm32h7.o(.text.spi_create)
</UL>
<P><STRONG><a name="[cc]"></a>rte_mutex_trylock</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rte_adapter_cmsis_rtos2.o(.text.rte_mutex_trylock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rte_mutex_trylock
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Address Reference Count : 2]<UL><LI> hal_com_stm32h7.o(.text.com_create)
<LI> hal_spi_stm32h7.o(.text.spi_create)
</UL>
<P><STRONG><a name="[cd]"></a>rte_mutex_unlock</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rte_adapter_cmsis_rtos2.o(.text.rte_mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rte_mutex_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Address Reference Count : 3]<UL><LI> rte_adapter_cmsis_rtos2.o(.text.rte_init)
<LI> hal_com_stm32h7.o(.text.com_create)
<LI> hal_spi_stm32h7.o(.text.spi_create)
</UL>
<P><STRONG><a name="[39b]"></a>rte_tick_consume</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rte_timer.o(.text.rte_tick_consume))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rte_tick_consume
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_get_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_device_write_async
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_device_write_sync
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_device_read_async
</UL>

<P><STRONG><a name="[4f8]"></a>sensor_init</STRONG> (Thumb, 560 bytes, Stack size 32 bytes, bsp_sensor.o(.text.sensor_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = sensor_init &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ov7725_init
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ov2640_init
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_IsDeviceReady
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_low
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_high
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_delay_ms
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_thread
</UL>

<P><STRONG><a name="[4fb]"></a>sensor_reset</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, bsp_sensor.o(.text.sensor_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sensor_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_low
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_high
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_thread
</UL>

<P><STRONG><a name="[4fc]"></a>sensor_set_framesize</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, bsp_sensor.o(.text.sensor_set_framesize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sensor_set_framesize
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_thread
</UL>

<P><STRONG><a name="[4fd]"></a>sensor_set_pixformat</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, bsp_sensor.o(.text.sensor_set_pixformat))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sensor_set_pixformat
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_thread
</UL>

<P><STRONG><a name="[13d]"></a>sensor_snapshot</STRONG> (Thumb, 576 bytes, Stack size 56 bytes, bsp_sensor.o(.text.sensor_snapshot))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = sensor_snapshot &rArr; image_reuse &rArr; memory_free &rArr; block_merge_next &rArr; remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_reuse
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_Stop
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_Start_DMA
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc_align
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_get_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_sensor.o(.text.sensor_init)
</UL>
<P><STRONG><a name="[14d]"></a>sensor_thread</STRONG> (Thumb, 582 bytes, Stack size 72 bytes, sensor_thread.o(.text.sensor_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176 + Unknown Stack Size
<LI>Call Chain = sensor_thread &rArr; refresh_disp_image &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_snapshot
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_set_pixformat
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_set_framesize
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_reset
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_init
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_pop_tail_value
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_destroy
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_count
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_init
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_draw_line
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_draw_circle
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hough_find_lines
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hough_find_circles
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_device_write_async
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edge_simple
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_free
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_jpeg_init
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_jpeg_compress
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_disp_image
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_get_disp_obj
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_thread.o(.text.system_thread)
</UL>
<P><STRONG><a name="[199]"></a>shellBackspace</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, shell.o(.text.shellBackspace))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = shellBackspace &rArr; shellDeleteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellDeleteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[1a1]"></a>shellClear</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, shell.o(.text.shellClear))
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[19e]"></a>shellCmds</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, shell.o(.text.shellCmds))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = shellCmds &rArr; shellListItem
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListItem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[19a]"></a>shellDelete</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, shell.o(.text.shellDelete))
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[504]"></a>shellDeleteByte</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, shell.o(.text.shellDeleteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = shellDeleteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellBackspace
</UL>

<P><STRONG><a name="[195]"></a>shellDown</STRONG> (Thumb, 332 bytes, Stack size 24 bytes, shell.o(.text.shellDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = shellDown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[19b]"></a>shellEnter</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, shell.o(.text.shellEnter))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = shellEnter &rArr; shellExec &rArr; shellRunCommand &rArr; shellExtRun &rArr; shellExtParsePara &rArr; shellSeekCommand &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExec
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWritePrompt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[506]"></a>shellExec</STRONG> (Thumb, 622 bytes, Stack size 24 bytes, shell.o(.text.shellExec))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = shellExec &rArr; shellRunCommand &rArr; shellExtRun &rArr; shellExtParsePara &rArr; shellSeekCommand &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSeekCommand
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellRunCommand
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellEnter
</UL>

<P><STRONG><a name="[50a]"></a>shellExtParsePara</STRONG> (Thumb, 812 bytes, Stack size 16 bytes, shell_ext.o(.text.shellExtParsePara))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = shellExtParsePara &rArr; shellSeekCommand &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSeekCommand
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellGetVarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtRun
</UL>

<P><STRONG><a name="[50c]"></a>shellExtRun</STRONG> (Thumb, 286 bytes, Stack size 72 bytes, shell_ext.o(.text.shellExtRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = shellExtRun &rArr; shellExtParsePara &rArr; shellSeekCommand &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtParsePara
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellRunCommand
</UL>

<P><STRONG><a name="[50b]"></a>shellGetVarValue</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, shell.o(.text.shellGetVarValue))
<BR><BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtParsePara
</UL>

<P><STRONG><a name="[50d]"></a>shellHandler</STRONG> (Thumb, 386 bytes, Stack size 40 bytes, shell.o(.text.shellHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = shellHandler &rArr; shellInsertByte &rArr; shellWritePrompt
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellInsertByte
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellTask
</UL>

<P><STRONG><a name="[19c]"></a>shellHelp</STRONG> (Thumb, 520 bytes, Stack size 24 bytes, shell.o(.text.shellHelp))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = shellHelp &rArr; shellSeekCommand &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSeekCommand
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListItem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[50f]"></a>shellInit</STRONG> (Thumb, 354 bytes, Stack size 8 bytes, shell.o(.text.shellInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = shellInit &rArr; shellSeekCommand &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSeekCommand
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWritePrompt
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_thread
</UL>

<P><STRONG><a name="[50e]"></a>shellInsertByte</STRONG> (Thumb, 504 bytes, Stack size 24 bytes, shell.o(.text.shellInsertByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = shellInsertByte &rArr; shellWritePrompt
</UL>
<BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWritePrompt
</UL>
<BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellHandler
</UL>

<P><STRONG><a name="[1a0]"></a>shellKeys</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, shell.o(.text.shellKeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = shellKeys &rArr; shellListItem
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListItem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[197]"></a>shellLeft</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, shell.o(.text.shellLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = shellLeft
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[505]"></a>shellListItem</STRONG> (Thumb, 724 bytes, Stack size 32 bytes, shell.o(.text.shellListItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = shellListItem
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellVars
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellUsers
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellTab
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellKeys
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellHelp
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellCmds
</UL>

<P><STRONG><a name="[196]"></a>shellRight</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, shell.o(.text.shellRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = shellRight
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[509]"></a>shellRunCommand</STRONG> (Thumb, 396 bytes, Stack size 32 bytes, shell.o(.text.shellRunCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = shellRunCommand &rArr; shellExtRun &rArr; shellExtParsePara &rArr; shellSeekCommand &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtRun
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteReturnValue
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellShowVar
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExec
</UL>

<P><STRONG><a name="[508]"></a>shellSeekCommand</STRONG> (Thumb, 402 bytes, Stack size 40 bytes, shell.o(.text.shellSeekCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = shellSeekCommand &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellInit
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtParsePara
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSetVar
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellHelp
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExec
</UL>

<P><STRONG><a name="[193]"></a>shellSetVar</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, shell.o(.text.shellSetVar))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = shellSetVar &rArr; shellSetVarValue &rArr; shellShowVar
</UL>
<BR>[Calls]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSetVarValue
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSeekCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[513]"></a>shellSetVarValue</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, shell.o(.text.shellSetVarValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = shellSetVarValue &rArr; shellShowVar
</UL>
<BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellShowVar
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSetVar
</UL>

<P><STRONG><a name="[198]"></a>shellTab</STRONG> (Thumb, 1246 bytes, Stack size 56 bytes, shell.o(.text.shellTab))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = shellTab &rArr; shellListItem
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListItem
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWritePrompt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[14b]"></a>shellTask</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, shell.o(.text.shellTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = shellTask &rArr; shellHandler &rArr; shellInsertByte &rArr; shellWritePrompt
</UL>
<BR>[Calls]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_thread.o(.text.system_thread)
</UL>
<P><STRONG><a name="[194]"></a>shellUp</STRONG> (Thumb, 340 bytes, Stack size 24 bytes, shell.o(.text.shellUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = shellUp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[19d]"></a>shellUsers</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, shell.o(.text.shellUsers))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = shellUsers &rArr; shellListItem
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListItem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[19f]"></a>shellVars</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, shell.o(.text.shellVars))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = shellVars &rArr; shellListItem
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListItem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[3b3]"></a>slice_destroy</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, ds_linklist.o(.text.slice_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = slice_destroy &rArr; remove_entry &rArr; pick_entry
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_get_general_allocator
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_destroy
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_clear
</UL>

<P><STRONG><a name="[3b4]"></a>slice_foreach_value</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, ds_linklist.o(.text.slice_foreach_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = slice_foreach_value &rArr; pick_entry
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_get_general_allocator
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_foreach_value
</UL>

<P><STRONG><a name="[32f]"></a>spi_create</STRONG> (Thumb, 404 bytes, Stack size 56 bytes, hal_spi_stm32h7.o(.text.spi_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = spi_create &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_init
</UL>

<P><STRONG><a name="[f8]"></a>system_thread</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, system_thread.o(.text.system_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = system_thread &rArr; com_create &rArr; memory_alloc_align &rArr; block_locate_free &rArr; remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_tick_handle
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_create_new
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellInit
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSetPriority
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_control
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_create
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_init
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_get_main_timergroup
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[4f7]"></a>timer_create_group</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, rte_timer.o(.text.timer_create_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = timer_create_group &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_create
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_init
</UL>

<P><STRONG><a name="[51c]"></a>timer_create_new</STRONG> (Thumb, 284 bytes, Stack size 48 bytes, rte_timer.o(.text.timer_create_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = timer_create_new &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_unlock
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_push
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_lock
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_length
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_get_general_allocator
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_thread
</UL>

<P><STRONG><a name="[523]"></a>timer_group_poll</STRONG> (Thumb, 270 bytes, Stack size 56 bytes, rte_timer.o(.text.timer_group_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = timer_group_poll &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_unlock
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_remove_by_index
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_lock
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_length
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_at
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_tick_handle
</UL>

<P><STRONG><a name="[4f6]"></a>timer_init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rte_timer.o(.text.timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_get_general_allocator
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_init
</UL>

<P><STRONG><a name="[51d]"></a>timer_tick_handle</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, rte_timer.o(.text.timer_tick_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = timer_tick_handle &rArr; timer_group_poll &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_group_poll
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_unlock
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_lock
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_length
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_at
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_thread
</UL>

<P><STRONG><a name="[14a]"></a>userShellRead</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, system_thread.o(.text.userShellRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = userShellRead &rArr; hal_device_read_async &rArr; rte_tick_consume
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_device_read_async
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_thread.o(.text.system_thread)
</UL>
<P><STRONG><a name="[149]"></a>userShellWrite</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, system_thread.o(.text.userShellWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = userShellWrite &rArr; hal_device_write_sync &rArr; rte_tick_consume
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_device_write_sync
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_thread.o(.text.system_thread)
</UL>
<P><STRONG><a name="[20a]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[526]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[525]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[527]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[528]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[20b]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[20c]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[529]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[20e]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[52a]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[3a0]"></a>__hardfp_atan2f</STRONG> (Thumb, 594 bytes, Stack size 32 bytes, atan2f.o(i.__hardfp_atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __hardfp_atan2f &rArr; __set_errno &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hough_find_lines
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hough_find_circles
</UL>

<P><STRONG><a name="[33f]"></a>__hardfp_cbrtf</STRONG> (Thumb, 236 bytes, Stack size 0 bytes, cbrtf.o(i.__hardfp_cbrtf))
<BR><BR>[Calls]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_rgb565_to_l
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_rgb565_to_b
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_rgb565_to_a
</UL>

<P><STRONG><a name="[502]"></a>__hardfp_expf</STRONG> (Thumb, 430 bytes, Stack size 16 bytes, expf.o(i.__hardfp_expf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_expf &rArr; __set_errno &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_auto_whitebal
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_auto_gain
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_auto_gain
</UL>

<P><STRONG><a name="[570]"></a>__mathlib_expf</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, expf.o(i.__hardfp_expf), UNUSED)

<P><STRONG><a name="[382]"></a>__hardfp_log</STRONG> (Thumb, 480 bytes, Stack size 88 bytes, log.o(i.__hardfp_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __hardfp_log &rArr; __set_errno &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rgb_gain_db
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gain_db
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gain_db
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[503]"></a>__hardfp_log2</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, log2.o(i.__hardfp_log2))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __hardfp_log2 &rArr; log &rArr; __hardfp_log &rArr; __set_errno &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_auto_gain
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_auto_gain
</UL>

<P><STRONG><a name="[532]"></a>__kernel_poly</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[531]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[52f]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[530]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log2
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[52d]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cbrtf
</UL>

<P><STRONG><a name="[52c]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[52e]"></a>__mathlib_flt_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[52b]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[1ec]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[533]"></a>frexp</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, frexp.o(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = frexp
</UL>
<BR>[Called By]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log2
</UL>

<P><STRONG><a name="[534]"></a>log</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, log.o(i.log))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = log &rArr; __hardfp_log &rArr; __set_errno &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>
<BR>[Called By]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log2
</UL>

<P><STRONG><a name="[a0]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[1d1]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[1cc]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[571]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[572]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1ae]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[1b2]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[139]"></a>rte_calloc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rte_adapter_cmsis_rtos2.o(.text.rte_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = rte_calloc &rArr; memory_calloc &rArr; memory_alloc &rArr; block_locate_free &rArr; remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_calloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rte_adapter_cmsis_rtos2.o(.text.rte_init)
</UL>
<P><STRONG><a name="[13b]"></a>rte_free</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rte_adapter_cmsis_rtos2.o(.text.rte_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = rte_free &rArr; memory_free &rArr; block_merge_next &rArr; remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rte_adapter_cmsis_rtos2.o(.text.rte_init)
</UL>
<P><STRONG><a name="[138]"></a>rte_malloc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rte_adapter_cmsis_rtos2.o(.text.rte_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = rte_malloc &rArr; memory_alloc &rArr; block_locate_free &rArr; remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rte_adapter_cmsis_rtos2.o(.text.rte_init)
</UL>
<P><STRONG><a name="[13a]"></a>rte_realloc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rte_adapter_cmsis_rtos2.o(.text.rte_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = rte_realloc &rArr; memory_realloc &rArr; memory_free &rArr; block_merge_next &rArr; remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_realloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rte_adapter_cmsis_rtos2.o(.text.rte_init)
</UL>
<P><STRONG><a name="[192]"></a>memory</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, system_thread.o(.text.memory))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = memory &rArr; memory_demon &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_demon
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_thread.o(shellCommand)
</UL>
<P><STRONG><a name="[147]"></a>rte_data_out</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, system_thread.o(.text.rte_data_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rte_data_out &rArr; hal_device_write_sync &rArr; rte_tick_consume
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_device_write_sync
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_thread.o(.text.system_thread)
</UL>
<P><STRONG><a name="[148]"></a>running_timer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system_thread.o(.text.running_timer))
<BR><BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_thread.o(.text.system_thread)
</UL>
<P><STRONG><a name="[d6]"></a>disp_flush</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, gui_thread.o(.text.disp_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = disp_flush &rArr; bsp_lcd_fill_frame &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_flush_ready
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_fill_frame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_thread.o(.text.gui_thread)
</UL>
<P><STRONG><a name="[d5]"></a>lvgl_log_output</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gui_thread.o(.text.lvgl_log_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lvgl_log_output &rArr; log_output
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_output
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_thread.o(.text.gui_thread)
</UL>
<P><STRONG><a name="[328]"></a>bsp_lcd_set_cursor</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, bsp_lcd.o(.text.bsp_lcd_set_cursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bsp_lcd_set_cursor &rArr; hal_device_write_sync &rArr; rte_tick_consume
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_low
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_high
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_device_write_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_fill_color_normal
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_fill_frame
</UL>

<P><STRONG><a name="[11c]"></a>get_exposure_us</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, ov2640.o(.text.get_exposure_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = get_exposure_us &rArr; cambus_readb &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_writeb
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_readb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ov2640.o(.text.ov2640_init)
</UL>
<P><STRONG><a name="[11a]"></a>get_gain_db</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, ov2640.o(.text.get_gain_db))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = get_gain_db &rArr; __hardfp_log &rArr; __set_errno &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_writeb
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_readb
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ov2640.o(.text.ov2640_init)
</UL>
<P><STRONG><a name="[11e]"></a>get_rgb_gain_db</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, ov2640.o(.text.get_rgb_gain_db))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = get_rgb_gain_db &rArr; cambus_readb &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_writeb
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_readb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ov2640.o(.text.ov2640_init)
</UL>
<P><STRONG><a name="[10f]"></a>read_reg</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ov2640.o(.text.read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = read_reg &rArr; cambus_readb &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_readb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ov2640.o(.text.ov2640_init)
</UL>
<P><STRONG><a name="[10e]"></a>reset</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, ov2640.o(.text.reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = reset &rArr; cambus_writeb &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_writeb
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ov2640.o(.text.ov2640_init)
</UL>
<P><STRONG><a name="[11b]"></a>set_auto_exposure</STRONG> (Thumb, 418 bytes, Stack size 40 bytes, ov2640.o(.text.set_auto_exposure))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = set_auto_exposure &rArr; cambus_readb &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_writeb
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_readb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ov2640.o(.text.ov2640_init)
</UL>
<P><STRONG><a name="[119]"></a>set_auto_gain</STRONG> (Thumb, 474 bytes, Stack size 48 bytes, ov2640.o(.text.set_auto_gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = set_auto_gain &rArr; __hardfp_log2 &rArr; log &rArr; __hardfp_log &rArr; __set_errno &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_writeb
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_readb
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log2
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ov2640.o(.text.ov2640_init)
</UL>
<P><STRONG><a name="[11d]"></a>set_auto_whitebal</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ov2640.o(.text.set_auto_whitebal))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = set_auto_whitebal &rArr; cambus_readb &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_writeb
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_readb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ov2640.o(.text.ov2640_init)
</UL>
<P><STRONG><a name="[114]"></a>set_brightness</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, ov2640.o(.text.set_brightness))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = set_brightness &rArr; cambus_writeb &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_writeb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ov2640.o(.text.ov2640_init)
</UL>
<P><STRONG><a name="[118]"></a>set_colorbar</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ov2640.o(.text.set_colorbar))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = set_colorbar &rArr; cambus_readb &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_writeb
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_readb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ov2640.o(.text.ov2640_init)
</UL>
<P><STRONG><a name="[113]"></a>set_contrast</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, ov2640.o(.text.set_contrast))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = set_contrast &rArr; cambus_writeb &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_writeb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ov2640.o(.text.ov2640_init)
</UL>
<P><STRONG><a name="[112]"></a>set_framesize</STRONG> (Thumb, 586 bytes, Stack size 48 bytes, ov2640.o(.text.set_framesize))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = set_framesize &rArr; cambus_writeb &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_writeb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ov2640.o(.text.ov2640_init)
</UL>
<P><STRONG><a name="[116]"></a>set_gainceiling</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ov2640.o(.text.set_gainceiling))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = set_gainceiling &rArr; cambus_writeb &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_writeb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ov2640.o(.text.ov2640_init)
</UL>
<P><STRONG><a name="[11f]"></a>set_hmirror</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ov2640.o(.text.set_hmirror))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = set_hmirror &rArr; cambus_readb &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_writeb
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_readb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ov2640.o(.text.ov2640_init)
</UL>
<P><STRONG><a name="[111]"></a>set_pixformat</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ov2640.o(.text.set_pixformat))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = set_pixformat &rArr; cambus_writeb &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_writeb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ov2640.o(.text.ov2640_init)
</UL>
<P><STRONG><a name="[117]"></a>set_quality</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ov2640.o(.text.set_quality))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = set_quality &rArr; cambus_writeb &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_writeb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ov2640.o(.text.ov2640_init)
</UL>
<P><STRONG><a name="[115]"></a>set_saturation</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, ov2640.o(.text.set_saturation))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = set_saturation &rArr; cambus_writeb &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_writeb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ov2640.o(.text.ov2640_init)
</UL>
<P><STRONG><a name="[121]"></a>set_special_effect</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, ov2640.o(.text.set_special_effect))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = set_special_effect &rArr; cambus_writeb &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_writeb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ov2640.o(.text.ov2640_init)
</UL>
<P><STRONG><a name="[120]"></a>set_vflip</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ov2640.o(.text.set_vflip))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = set_vflip &rArr; cambus_readb &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_writeb
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_readb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ov2640.o(.text.ov2640_init)
</UL>
<P><STRONG><a name="[10d]"></a>sleep</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ov2640.o(.text.sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sleep &rArr; cambus_readb &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_writeb
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_readb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ov2640.o(.text.ov2640_init)
</UL>
<P><STRONG><a name="[110]"></a>write_reg</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ov2640.o(.text.write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = write_reg &rArr; cambus_writeb &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_writeb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ov2640.o(.text.ov2640_init)
</UL>
<P><STRONG><a name="[130]"></a>get_exposure_us</STRONG> (Thumb, 272 bytes, Stack size 56 bytes, ov7725.o(.text.get_exposure_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = get_exposure_us &rArr; cambus_readb &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_readb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ov7725.o(.text.ov7725_init)
</UL>
<P><STRONG><a name="[12e]"></a>get_gain_db</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, ov7725.o(.text.get_gain_db))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = get_gain_db &rArr; __hardfp_log &rArr; __set_errno &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_readb
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ov7725.o(.text.ov7725_init)
</UL>
<P><STRONG><a name="[132]"></a>get_rgb_gain_db</STRONG> (Thumb, 266 bytes, Stack size 56 bytes, ov7725.o(.text.get_rgb_gain_db))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = get_rgb_gain_db &rArr; __hardfp_log &rArr; __set_errno &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_readb
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ov7725.o(.text.ov7725_init)
</UL>
<P><STRONG><a name="[124]"></a>read_reg</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ov7725.o(.text.read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = read_reg &rArr; cambus_readb &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_readb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ov7725.o(.text.ov7725_init)
</UL>
<P><STRONG><a name="[123]"></a>reset</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ov7725.o(.text.reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = reset &rArr; cambus_writeb &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_writeb
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ov7725.o(.text.ov7725_init)
</UL>
<P><STRONG><a name="[12f]"></a>set_auto_exposure</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, ov7725.o(.text.set_auto_exposure))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = set_auto_exposure &rArr; cambus_readb &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_writeb
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_readb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ov7725.o(.text.ov7725_init)
</UL>
<P><STRONG><a name="[12d]"></a>set_auto_gain</STRONG> (Thumb, 450 bytes, Stack size 48 bytes, ov7725.o(.text.set_auto_gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = set_auto_gain &rArr; __hardfp_log2 &rArr; log &rArr; __hardfp_log &rArr; __set_errno &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_writeb
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_readb
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log2
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ov7725.o(.text.ov7725_init)
</UL>
<P><STRONG><a name="[131]"></a>set_auto_whitebal</STRONG> (Thumb, 398 bytes, Stack size 72 bytes, ov7725.o(.text.set_auto_whitebal))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = set_auto_whitebal &rArr; cambus_readb &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_writeb
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_readb
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ov7725.o(.text.ov7725_init)
</UL>
<P><STRONG><a name="[129]"></a>set_brightness</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ov7725.o(.text.set_brightness))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = set_brightness &rArr; cambus_writeb &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_writeb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ov7725.o(.text.ov7725_init)
</UL>
<P><STRONG><a name="[12c]"></a>set_colorbar</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, ov7725.o(.text.set_colorbar))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = set_colorbar &rArr; cambus_readb &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_writeb
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_readb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ov7725.o(.text.ov7725_init)
</UL>
<P><STRONG><a name="[128]"></a>set_contrast</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ov7725.o(.text.set_contrast))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = set_contrast &rArr; cambus_writeb &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_writeb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ov7725.o(.text.ov7725_init)
</UL>
<P><STRONG><a name="[127]"></a>set_framesize</STRONG> (Thumb, 510 bytes, Stack size 40 bytes, ov7725.o(.text.set_framesize))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = set_framesize &rArr; cambus_readb &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_writeb
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_readb
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_vflip
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ov7725.o(.text.ov7725_init)
</UL>
<P><STRONG><a name="[12b]"></a>set_gainceiling</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ov7725.o(.text.set_gainceiling))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = set_gainceiling &rArr; cambus_readb &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_writeb
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_readb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ov7725.o(.text.ov7725_init)
</UL>
<P><STRONG><a name="[133]"></a>set_hmirror</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ov7725.o(.text.set_hmirror))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = set_hmirror &rArr; cambus_readb &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_writeb
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_readb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ov7725.o(.text.ov7725_init)
</UL>
<P><STRONG><a name="[136]"></a>set_lens_correction</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ov7725.o(.text.set_lens_correction))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = set_lens_correction &rArr; cambus_writeb &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_writeb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ov7725.o(.text.ov7725_init)
</UL>
<P><STRONG><a name="[126]"></a>set_pixformat</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, ov7725.o(.text.set_pixformat))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = set_pixformat &rArr; cambus_readb &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_writeb
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_readb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ov7725.o(.text.ov7725_init)
</UL>
<P><STRONG><a name="[12a]"></a>set_saturation</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ov7725.o(.text.set_saturation))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = set_saturation &rArr; cambus_writeb &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_writeb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ov7725.o(.text.ov7725_init)
</UL>
<P><STRONG><a name="[135]"></a>set_special_effect</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ov7725.o(.text.set_special_effect))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = set_special_effect &rArr; cambus_writeb &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_writeb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ov7725.o(.text.ov7725_init)
</UL>
<P><STRONG><a name="[134]"></a>set_vflip</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, ov7725.o(.text.set_vflip))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = set_vflip &rArr; set_framesize &rArr; cambus_readb &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_framesize
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_writeb
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_readb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ov7725.o(.text.ov7725_init)
</UL>
<P><STRONG><a name="[122]"></a>sleep</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ov7725.o(.text.sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sleep &rArr; cambus_readb &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_writeb
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_readb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ov7725.o(.text.ov7725_init)
</UL>
<P><STRONG><a name="[125]"></a>write_reg</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ov7725.o(.text.write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = write_reg &rArr; cambus_writeb &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cambus_writeb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ov7725.o(.text.ov7725_init)
</UL>
<P><STRONG><a name="[24b]"></a>refresh_input_mcu_buffer</STRONG> (Thumb, 2550 bytes, Stack size 88 bytes, bsp_jpege.o(.text.refresh_input_mcu_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = refresh_input_mcu_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_GetDataCallback
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_jpeg_compress
</UL>

<P><STRONG><a name="[3ba]"></a>log_vsnprintf</STRONG> (Thumb, 2876 bytes, Stack size 48 bytes, rte_log.o(.text.log_vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_snprintf
</UL>

<P><STRONG><a name="[31b]"></a>block_insert</STRONG> (Thumb, 282 bytes, Stack size 56 bytes, rte_memory.o(.text.block_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = block_insert &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc_align
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_realloc
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_pool
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_free
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc
</UL>

<P><STRONG><a name="[31c]"></a>block_locate_free</STRONG> (Thumb, 376 bytes, Stack size 48 bytes, rte_memory.o(.text.block_locate_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = block_locate_free &rArr; remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_free_block
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc_align
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc
</UL>

<P><STRONG><a name="[31e]"></a>block_merge_next</STRONG> (Thumb, 502 bytes, Stack size 56 bytes, rte_memory.o(.text.block_merge_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = block_merge_next &rArr; remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_free_block
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_realloc
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_free
</UL>

<P><STRONG><a name="[31f]"></a>block_split</STRONG> (Thumb, 442 bytes, Stack size 56 bytes, rte_memory.o(.text.block_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = block_split &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc_align
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_realloc
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc
</UL>

<P><STRONG><a name="[31d]"></a>remove_free_block</STRONG> (Thumb, 270 bytes, Stack size 56 bytes, rte_memory.o(.text.remove_free_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_locate_free
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_free
</UL>

<P><STRONG><a name="[14e]"></a>single_timer_free_cb</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, rte_timer.o(.text.single_timer_free_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = single_timer_free_cb &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_at
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_get_general_allocator
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rte_timer.o(.text.timer_create_group)
</UL>
<P><STRONG><a name="[ce]"></a>com_recv</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, hal_com_stm32h7.o(.text.com_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = com_recv &rArr; HAL_UARTEx_ReceiveToIdle
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_com_stm32h7.o(.text.com_create)
</UL>
<P><STRONG><a name="[cf]"></a>com_recv_async</STRONG> (Thumb, 338 bytes, Stack size 56 bytes, hal_com_stm32h7.o(.text.com_recv_async))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = com_recv_async &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceive_IT
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle_IT
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle_DMA
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_com_stm32h7.o(.text.com_create)
</UL>
<P><STRONG><a name="[d0]"></a>com_send</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, hal_com_stm32h7.o(.text.com_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = com_send &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_com_stm32h7.o(.text.com_create)
</UL>
<P><STRONG><a name="[d1]"></a>com_send_async</STRONG> (Thumb, 346 bytes, Stack size 48 bytes, hal_com_stm32h7.o(.text.com_send_async))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = com_send_async &rArr; memory_alloc_align &rArr; block_locate_free &rArr; remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_IT
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortTransmit_IT
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc_align
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_free
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_com_stm32h7.o(.text.com_create)
</UL>
<P><STRONG><a name="[13e]"></a>spi_recv</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, hal_spi_stm32h7.o(.text.spi_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = spi_recv &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_spi_stm32h7.o(.text.spi_create)
</UL>
<P><STRONG><a name="[13f]"></a>spi_send</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, hal_spi_stm32h7.o(.text.spi_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = spi_send &rArr; HAL_SPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_spi_stm32h7.o(.text.spi_create)
</UL>
<P><STRONG><a name="[140]"></a>spi_send_async</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, hal_spi_stm32h7.o(.text.spi_send_async))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = spi_send_async &rArr; HAL_SPI_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit_DMA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_spi_stm32h7.o(.text.spi_create)
</UL>
<P><STRONG><a name="[4f3]"></a>pick_entry</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, ds_linklist.o(.text.pick_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pick_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slice_foreach_value
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_entry
</UL>

<P><STRONG><a name="[3b2]"></a>remove_entry</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, ds_linklist.o(.text.remove_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = remove_entry &rArr; pick_entry
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_pop_tail_value
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slice_destroy
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_pop_head_value
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_clear
</UL>

<P><STRONG><a name="[c6]"></a>ll_iterator_handle</STRONG> (Thumb, 634 bytes, Stack size 64 bytes, binary.o(.text.ll_iterator_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ll_iterator_handle &rArr; color_rgb565_to_b
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_rgb565_to_l
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_rgb565_to_b
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_rgb565_to_a
</UL>
<BR>[Address Reference Count : 1]<UL><LI> binary.o(.text.binary_image)
</UL>
<P><STRONG><a name="[378]"></a>event_send_core</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, lv_event.o(.text.event_send_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send_core
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send_core
</UL>

<P><STRONG><a name="[179]"></a>lv_obj_constructor</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, lv_obj.o(.text.lv_obj_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = lv_obj_constructor &rArr; lv_obj_get_scroll_left &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj.o(.rodata.lv_obj_class)
</UL>
<P><STRONG><a name="[17a]"></a>lv_obj_destructor</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144 + Unknown Stack Size
<LI>Call Chain = lv_obj_destructor &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_enable_style_refresh
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_event_mark_deleted
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj.o(.rodata.lv_obj_class)
</UL>
<P><STRONG><a name="[17b]"></a>lv_obj_event</STRONG> (Thumb, 2224 bytes, Stack size 168 bytes, lv_obj.o(.text.lv_obj_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 2152 + Unknown Stack Size
<LI>Call Chain = lv_obj_event &rArr; lv_draw_rect &rArr; lv_draw_img &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_y
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_view_recursive
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_custom
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_dir
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_editable
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_scroll_obj
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_indev
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj.o(.rodata.lv_obj_class)
</UL>
<P><STRONG><a name="[447]"></a>lv_obj_set_state</STRONG> (Thumb, 726 bytes, Stack size 80 bytes, lv_obj.o(.text.lv_obj_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256 + Unknown Stack Size
<LI>Call Chain = lv_obj_set_state &rArr; _lv_obj_style_create_transition &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_style_get_selector_state
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_style_get_selector_part
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_state_compare
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_state
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_state
</UL>

<P><STRONG><a name="[452]"></a>lv_obj_construct</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lv_obj_class.o(.text.lv_obj_construct))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = lv_obj_construct &rArr;  lv_obj_construct (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_construct
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_construct
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
</UL>

<P><STRONG><a name="[3af]"></a>layout_update_core</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.layout_update_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
</UL>

<P><STRONG><a name="[eb]"></a>scroll_anim_ready_cb</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.scroll_anim_ready_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = scroll_anim_ready_cb &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj_scroll.o(.text.lv_obj_scroll_by)
</UL>
<P><STRONG><a name="[470]"></a>scroll_area_into_view</STRONG> (Thumb, 790 bytes, Stack size 64 bytes, lv_obj_scroll.o(.text.scroll_area_into_view))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216 + Unknown Stack Size
<LI>Call Chain = scroll_area_into_view &rArr; lv_obj_scroll_by &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_view_recursive
</UL>

<P><STRONG><a name="[e8]"></a>scroll_x_anim</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lv_obj_scroll.o(.text.scroll_x_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = scroll_x_anim &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Address Reference Count : 4]<UL><LI> lv_obj_scroll.o(.text.lv_obj_get_scroll_end)
<LI> lv_obj_scroll.o(.text.lv_obj_scroll_by)
<LI> lv_obj_scroll.o(.text.lv_obj_scroll_to_x)
<LI> lv_obj_scroll.o(.text.scroll_area_into_view)
</UL>
<P><STRONG><a name="[e9]"></a>scroll_y_anim</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lv_obj_scroll.o(.text.scroll_y_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = scroll_y_anim &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Address Reference Count : 5]<UL><LI> lv_obj_scroll.o(.text.lv_obj_get_scroll_end)
<LI> lv_obj_scroll.o(.text.lv_obj_scroll_by)
<LI> lv_obj_scroll.o(.text.lv_obj_scroll_to)
<LI> lv_obj_scroll.o(.text.lv_obj_scroll_to_y)
<LI> lv_obj_scroll.o(.text.scroll_area_into_view)
</UL>
<P><STRONG><a name="[2fb]"></a>get_trans_style</STRONG> (Thumb, 478 bytes, Stack size 24 bytes, lv_obj_style.o(.text.get_trans_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040 + Unknown Stack Size
<LI>Call Chain = get_trans_style &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_start_cb
</UL>

<P><STRONG><a name="[46a]"></a>refresh_children_style</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lv_obj_style.o(.text.refresh_children_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
</UL>

<P><STRONG><a name="[46f]"></a>report_style_change_core</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, lv_obj_style.o(.text.report_style_change_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = report_style_change_core &rArr;  report_style_change_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_change_core
</UL>
<BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_report_style_change
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_change_core
</UL>

<P><STRONG><a name="[c3]"></a>trans_anim_cb</STRONG> (Thumb, 680 bytes, Stack size 40 bytes, lv_obj_style.o(.text.trans_anim_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136 + Unknown Stack Size
<LI>Call Chain = trans_anim_cb &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_get_prop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj_style.o(.text._lv_obj_style_create_transition)
</UL>
<P><STRONG><a name="[c5]"></a>trans_anim_ready_cb</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, lv_obj_style.o(.text.trans_anim_ready_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160 + Unknown Stack Size
<LI>Call Chain = trans_anim_ready_cb &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_is_empty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj_style.o(.text._lv_obj_style_create_transition)
</UL>
<P><STRONG><a name="[c4]"></a>trans_anim_start_cb</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lv_obj_style.o(.text.trans_anim_start_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112 + Unknown Stack Size
<LI>Call Chain = trans_anim_start_cb &rArr; trans_del &rArr; lv_style_remove_prop &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_trans_style
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj_style.o(.text._lv_obj_style_create_transition)
</UL>
<P><STRONG><a name="[449]"></a>trans_del</STRONG> (Thumb, 314 bytes, Stack size 40 bytes, lv_obj_style.o(.text.trans_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096 + Unknown Stack Size
<LI>Call Chain = trans_del &rArr; lv_style_remove_prop &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_start_cb
</UL>

<P><STRONG><a name="[455]"></a>obj_del_core</STRONG> (Thumb, 808 bytes, Stack size 32 bytes, lv_obj_tree.o(.text.obj_del_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = obj_del_core &rArr;  obj_del_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_destruct
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_reset
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_obj_act
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>

<P><STRONG><a name="[2d0]"></a>draw_buf_flush</STRONG> (Thumb, 2726 bytes, Stack size 128 bytes, lv_refr.o(.text.draw_buf_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176 + Unknown Stack Size
<LI>Call Chain = draw_buf_flush &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_draw_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[2cf]"></a>lv_refr_area_part</STRONG> (Thumb, 414 bytes, Stack size 96 bytes, lv_refr.o(.text.lv_refr_area_part))
<BR><BR>[Stack]<UL><LI>Max Depth = 2080 + Unknown Stack Size
<LI>Call Chain = lv_refr_area_part &rArr; lv_draw_rect &rArr; lv_draw_img &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_draw_buf
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj_and_children
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[484]"></a>lv_refr_get_top_obj</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, lv_refr.o(.text.lv_refr_get_top_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + In Cycle
<LI>Call Chain = lv_refr_get_top_obj &rArr;  lv_refr_get_top_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[486]"></a>lv_refr_obj</STRONG> (Thumb, 302 bytes, Stack size 72 bytes, lv_refr.o(.text.lv_refr_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + In Cycle
<LI>Call Chain = lv_refr_obj &rArr;  lv_refr_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_ext_draw_size
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj_and_children
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
</UL>

<P><STRONG><a name="[485]"></a>lv_refr_obj_and_children</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, lv_refr.o(.text.lv_refr_obj_and_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016 + Unknown Stack Size
<LI>Call Chain = lv_refr_obj_and_children &rArr; lv_disp_get_scr_act &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[30f]"></a>apply_theme</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lv_theme.o(.text.apply_theme))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = apply_theme &rArr;  apply_theme (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_theme
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_theme
</UL>

<P><STRONG><a name="[be]"></a>color_blend_true_color_additive</STRONG> (Thumb, 202 bytes, Stack size 20 bytes, lv_draw_blend.o(.text.color_blend_true_color_additive))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = color_blend_true_color_additive
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_draw_blend.o(.text._lv_blend_map)
<LI> lv_draw_blend.o(.text._lv_blend_fill)
</UL>
<P><STRONG><a name="[bd]"></a>color_blend_true_color_subtractive</STRONG> (Thumb, 194 bytes, Stack size 20 bytes, lv_draw_blend.o(.text.color_blend_true_color_subtractive))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = color_blend_true_color_subtractive
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_draw_blend.o(.text._lv_blend_map)
<LI> lv_draw_blend.o(.text._lv_blend_fill)
</UL>
<P><STRONG><a name="[3f7]"></a>lv_draw_map</STRONG> (Thumb, 2044 bytes, Stack size 232 bytes, lv_draw_img.o(.text.lv_draw_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320 + Unknown Stack Size
<LI>Call Chain = lv_draw_map &rArr; _lv_blend_map &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_is_any
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_init
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_draw_buf
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
</UL>

<P><STRONG><a name="[de]"></a>lv_draw_mask_angle</STRONG> (Thumb, 736 bytes, Stack size 40 bytes, lv_draw_mask.o(.text.lv_draw_mask_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = lv_draw_mask_angle &rArr; lv_draw_mask_line
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_mask.o(.text.lv_draw_mask_angle_init)
</UL>
<P><STRONG><a name="[df]"></a>lv_draw_mask_line</STRONG> (Thumb, 1248 bytes, Stack size 24 bytes, lv_draw_mask.o(.text.lv_draw_mask_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = lv_draw_mask_line
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_angle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_mask.o(.text.lv_draw_mask_line_points_init)
</UL>
<P><STRONG><a name="[e0]"></a>lv_draw_mask_radius</STRONG> (Thumb, 656 bytes, Stack size 40 bytes, lv_draw_mask.o(.text.lv_draw_mask_radius))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = lv_draw_mask_radius
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_mask.o(.text.lv_draw_mask_radius_init)
</UL>
<P><STRONG><a name="[400]"></a>shadow_blur_corner</STRONG> (Thumb, 1734 bytes, Stack size 160 bytes, lv_draw_rect.o(.text.shadow_blur_corner))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208 + Unknown Stack Size
<LI>Call Chain = shadow_blur_corner &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[337]"></a>children_repos</STRONG> (Thumb, 1566 bytes, Stack size 80 bytes, lv_flex.o(.text.children_repos))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128 + Unknown Stack Size
<LI>Call Chain = children_repos &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
</UL>

<P><STRONG><a name="[37b]"></a>find_track_end</STRONG> (Thumb, 774 bytes, Stack size 72 bytes, lv_flex.o(.text.find_track_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120 + Unknown Stack Size
<LI>Call Chain = find_track_end &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
</UL>

<P><STRONG><a name="[e1]"></a>flex_update</STRONG> (Thumb, 1284 bytes, Stack size 128 bytes, lv_flex.o(.text.flex_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408 + Unknown Stack Size
<LI>Call Chain = flex_update &rArr; lv_obj_refr_size &rArr; lv_obj_scroll_to &rArr; lv_obj_scroll_to_x &rArr; lv_obj_scroll_by &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(.text.lv_flex_init)
</UL>
<P><STRONG><a name="[c8]"></a>lv_area_get_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_flex.o(.text.lv_area_get_height))
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(.text.children_repos)
</UL>
<P><STRONG><a name="[c7]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_flex.o(.text.lv_area_get_width))
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(.text.children_repos)
</UL>
<P><STRONG><a name="[38d]"></a>grid_align</STRONG> (Thumb, 748 bytes, Stack size 44 bytes, lv_grid.o(.text.grid_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = grid_align
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[e4]"></a>grid_update</STRONG> (Thumb, 2762 bytes, Stack size 112 bytes, lv_grid.o(.text.grid_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392 + Unknown Stack Size
<LI>Call Chain = grid_update &rArr; lv_obj_refr_size &rArr; lv_obj_scroll_to &rArr; lv_obj_scroll_to_x &rArr; lv_obj_scroll_by &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_align
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set_width
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set_height
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_grid.o(.text.lv_grid_init)
</UL>
<P><STRONG><a name="[141]"></a>dark_color_filter_cb</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_theme_default.o(.text.dark_color_filter_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dark_color_filter_cb &rArr; lv_color_darken
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_darken
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_theme_default.o(.text.style_init)
</UL>
<P><STRONG><a name="[142]"></a>grey_filter_cb</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, lv_theme_default.o(.text.grey_filter_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016 + Unknown Stack Size
<LI>Call Chain = grey_filter_cb &rArr; lv_palette_lighten &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_lighten
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_darken
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_theme_default.o(.text.style_init)
</UL>
<P><STRONG><a name="[4c3]"></a>style_init</STRONG> (Thumb, 10562 bytes, Stack size 40 bytes, lv_theme_default.o(.text.style_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088 + Unknown Stack Size
<LI>Call Chain = style_init &rArr; lv_style_set_transition &rArr; lv_style_set_prop &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transform_width
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transform_height
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_line_space
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_font
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_align
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_width
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_spread
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_ofs_y
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_color
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_width
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_pad
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_opa
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_color
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_max_width
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_max_height
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_height
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_clip_corner
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_post
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_img_src
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_grad_color
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_arc_rounded
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_width
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_row
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_column
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_width
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_color
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_color_filter_opa
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_color_filter_dsc
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_width
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_side
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_color
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_arc_width
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_arc_color
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_anim_time
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_lighten
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_darken
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_main
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_transition_dsc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[f6]"></a>theme_apply</STRONG> (Thumb, 3930 bytes, Stack size 24 bytes, lv_theme_default.o(.text.theme_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152 + Unknown Stack Size
<LI>Call Chain = theme_apply &rArr; lv_obj_add_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_check_type
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_id
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_theme_default.o(.text.lv_theme_default_init)
</UL>
<P><STRONG><a name="[dc]"></a>draw_part_begin_event_cb</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, lv_calendar.o(.text.draw_part_begin_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024 + Unknown Stack Size
<LI>Call Chain = draw_part_begin_event_cb &rArr; lv_theme_get_color_primary &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_color_primary
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_main
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_has_btn_ctrl
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_get_selected_btn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_calendar.o(.text.lv_calendar_constructor)
</UL>
<P><STRONG><a name="[39c]"></a>highlight_update</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, lv_calendar.o(.text.highlight_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144 + Unknown Stack Size
<LI>Call Chain = highlight_update &rArr; lv_btnmatrix_set_btn_ctrl &rArr; invalidate_button_area &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_btn_ctrl
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_clear_btn_ctrl_all
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_constructor
</UL>

<P><STRONG><a name="[158]"></a>lv_calendar_constructor</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, lv_calendar.o(.text.lv_calendar_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216 + Unknown Stack Size
<LI>Call Chain = lv_calendar_constructor &rArr; lv_calendar_set_showed_date &rArr; highlight_update &rArr; lv_btnmatrix_set_btn_ctrl &rArr; invalidate_button_area &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_btn_ctrl_all
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;highlight_update
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_calendar.o(.rodata.lv_calendar_class)
</UL>
<P><STRONG><a name="[f9]"></a>month_event_cb</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, lv_calendar_header_arrow.o(.text.month_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288 + Unknown Stack Size
<LI>Call Chain = month_event_cb &rArr; lv_label_set_text_fmt &rArr; lv_label_refr_text &rArr; lv_label_get_letter_on &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_user_data
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_get_showed_date
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_calendar_header_arrow.o(.text.my_constructor)
</UL>
<P><STRONG><a name="[159]"></a>my_constructor</STRONG> (Thumb, 408 bytes, Stack size 32 bytes, lv_calendar_header_arrow.o(.text.my_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392 + Unknown Stack Size
<LI>Call Chain = my_constructor &rArr; lv_obj_align_to &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_grow
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_align
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_align
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_radius
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_top
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_right
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_left
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_column
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_bottom
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_img_src
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_get_showed_date
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_calendar_header_arrow.o(.rodata.lv_calendar_header_arrow_class)
</UL>
<P><STRONG><a name="[fb]"></a>month_event_cb</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lv_calendar_header_dropdown.o(.text.month_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208 + Unknown Stack Size
<LI>Call Chain = month_event_cb &rArr; lv_calendar_set_showed_date &rArr; highlight_update &rArr; lv_btnmatrix_set_btn_ctrl &rArr; invalidate_button_area &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_user_data
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_get_selected
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_get_showed_date
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_calendar_header_dropdown.o(.text.my_constructor)
</UL>
<P><STRONG><a name="[15a]"></a>my_constructor</STRONG> (Thumb, 346 bytes, Stack size 32 bytes, lv_calendar_header_dropdown.o(.text.my_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392 + Unknown Stack Size
<LI>Call Chain = my_constructor &rArr; lv_obj_align_to &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_grow
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_align
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_radius
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_top
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_right
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_left
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_column
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_bottom
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_set_selected
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_set_options
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_create
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_get_showed_date
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_calendar_header_dropdown.o(.rodata.lv_calendar_header_dropdown_class)
</UL>
<P><STRONG><a name="[fa]"></a>year_event_cb</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lv_calendar_header_dropdown.o(.text.year_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208 + Unknown Stack Size
<LI>Call Chain = year_event_cb &rArr; lv_calendar_set_showed_date &rArr; highlight_update &rArr; lv_btnmatrix_set_btn_ctrl &rArr; invalidate_button_area &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_user_data
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_get_selected
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_get_showed_date
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_calendar_header_dropdown.o(.text.my_constructor)
</UL>
<P><STRONG><a name="[361]"></a>draw_x_ticks</STRONG> (Thumb, 976 bytes, Stack size 224 bytes, lv_chart.o(.text.draw_x_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832 + Unknown Stack Size
<LI>Call Chain = draw_x_ticks &rArr; lv_draw_label &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
</UL>

<P><STRONG><a name="[369]"></a>draw_y_ticks</STRONG> (Thumb, 818 bytes, Stack size 248 bytes, lv_chart.o(.text.draw_y_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 1856 + Unknown Stack Size
<LI>Call Chain = draw_y_ticks &rArr; lv_draw_label &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
</UL>

<P><STRONG><a name="[3ae]"></a>invalidate_point</STRONG> (Thumb, 406 bytes, Stack size 48 bytes, lv_chart.o(.text.invalidate_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096 + Unknown Stack Size
<LI>Call Chain = invalidate_point &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
</UL>

<P><STRONG><a name="[15b]"></a>lv_chart_constructor</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, lv_chart.o(.text.lv_chart_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_chart_constructor
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_chart.o(.rodata.lv_chart_class)
</UL>
<P><STRONG><a name="[15c]"></a>lv_chart_destructor</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lv_chart.o(.text.lv_chart_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = lv_chart_destructor &rArr; _lv_ll_clear &rArr; lv_mem_free &rArr; memory_free &rArr; block_merge_next &rArr; remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_chart.o(.rodata.lv_chart_class)
</UL>
<P><STRONG><a name="[15d]"></a>lv_chart_event</STRONG> (Thumb, 5218 bytes, Stack size 344 bytes, lv_chart.o(.text.lv_chart_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 2328 + Unknown Stack Size
<LI>Call Chain = lv_chart_event &rArr; lv_draw_rect &rArr; lv_draw_img &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_len
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_set_ext_draw_size
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_is_empty
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_point
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_chart.o(.rodata.lv_chart_class)
</UL>
<P><STRONG><a name="[161]"></a>lv_colorwheel_constructor</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, lv_colorwheel.o(.text.lv_colorwheel_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096 + Unknown Stack Size
<LI>Call Chain = lv_colorwheel_constructor &rArr; refr_knob_pos &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_knob_pos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_colorwheel.o(.rodata.lv_colorwheel_class)
</UL>
<P><STRONG><a name="[162]"></a>lv_colorwheel_event</STRONG> (Thumb, 3206 bytes, Stack size 192 bytes, lv_colorwheel.o(.text.lv_colorwheel_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 2176 + Unknown Stack Size
<LI>Call Chain = lv_colorwheel_event &rArr; lv_draw_rect &rArr; lv_draw_img &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_wait_release
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hsv_to_rgb
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_atan2
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_knob_pos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_colorwheel.o(.rodata.lv_colorwheel_class)
</UL>
<P><STRONG><a name="[3e7]"></a>refr_knob_pos</STRONG> (Thumb, 450 bytes, Stack size 40 bytes, lv_colorwheel.o(.text.refr_knob_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088 + Unknown Stack Size
<LI>Call Chain = refr_knob_pos &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_constructor
</UL>

<P><STRONG><a name="[16e]"></a>lv_keyboard_constructor</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lv_keyboard.o(.text.lv_keyboard_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200 + Unknown Stack Size
<LI>Call Chain = lv_keyboard_constructor &rArr; lv_obj_align &rArr; lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_base_dir
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_ctrl_map
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_keyboard.o(.rodata.lv_keyboard_class)
</UL>
<P><STRONG><a name="[172]"></a>lv_led_constructor</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_led.o(.text.lv_led_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016 + Unknown Stack Size
<LI>Call Chain = lv_led_constructor &rArr; lv_theme_get_color_primary &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_color_primary
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_led.o(.rodata.lv_led_class)
</UL>
<P><STRONG><a name="[173]"></a>lv_led_event</STRONG> (Thumb, 1114 bytes, Stack size 184 bytes, lv_led.o(.text.lv_led_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 2168 + Unknown Stack Size
<LI>Call Chain = lv_led_event &rArr; lv_draw_rect &rArr; lv_draw_img &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_led.o(.rodata.lv_led_class)
</UL>
<P><STRONG><a name="[176]"></a>lv_meter_constructor</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_meter.o(.text.lv_meter_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_meter_constructor
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_meter.o(.rodata.lv_meter_class)
</UL>
<P><STRONG><a name="[177]"></a>lv_meter_destructor</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_meter.o(.text.lv_meter_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = lv_meter_destructor &rArr; _lv_ll_clear &rArr; lv_mem_free &rArr; memory_free &rArr; block_merge_next &rArr; remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_meter.o(.rodata.lv_meter_class)
</UL>
<P><STRONG><a name="[178]"></a>lv_meter_event</STRONG> (Thumb, 2362 bytes, Stack size 400 bytes, lv_meter.o(.text.lv_meter_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 2760 + Unknown Stack Size
<LI>Call Chain = lv_meter_event &rArr; lv_draw_arc &rArr; lv_draw_rect &rArr; lv_draw_img &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc_dsc_init
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_meter.o(.rodata.lv_meter_class)
</UL>
<P><STRONG><a name="[181]"></a>lv_spinbox_constructor</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, lv_spinbox.o(.text.lv_spinbox_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728 + Unknown Stack Size
<LI>Call Chain = lv_spinbox_constructor &rArr; lv_spinbox_updatevalue &rArr; lv_textarea_set_text &rArr; lv_textarea_add_char &rArr;  lv_textarea_add_text (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_one_line
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_click_pos
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_updatevalue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_spinbox.o(.rodata.lv_spinbox_class)
</UL>
<P><STRONG><a name="[182]"></a>lv_spinbox_event</STRONG> (Thumb, 810 bytes, Stack size 24 bytes, lv_spinbox.o(.text.lv_spinbox_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1744 + Unknown Stack Size
<LI>Call Chain = lv_spinbox_event &rArr; lv_spinbox_updatevalue &rArr; lv_textarea_set_text &rArr; lv_textarea_add_char &rArr;  lv_textarea_add_text (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_updatevalue
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_get_text
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_left
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_spinbox.o(.rodata.lv_spinbox_class)
</UL>
<P><STRONG><a name="[490]"></a>lv_spinbox_updatevalue</STRONG> (Thumb, 630 bytes, Stack size 80 bytes, lv_spinbox.o(.text.lv_spinbox_updatevalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720 + Unknown Stack Size
<LI>Call Chain = lv_spinbox_updatevalue &rArr; lv_textarea_set_text &rArr; lv_textarea_add_char &rArr;  lv_textarea_add_text (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_constructor
</UL>

<P><STRONG><a name="[ed]"></a>arc_anim_end_angle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_spinner.o(.text.arc_anim_end_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152 + Unknown Stack Size
<LI>Call Chain = arc_anim_end_angle &rArr; lv_arc_set_end_angle &rArr; inv_arc_area &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_end_angle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_spinner.o(.text.lv_spinner_constructor)
</UL>
<P><STRONG><a name="[ef]"></a>arc_anim_start_angle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_spinner.o(.text.arc_anim_start_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152 + Unknown Stack Size
<LI>Call Chain = arc_anim_start_angle &rArr; lv_arc_set_start_angle &rArr; inv_arc_area &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_start_angle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_spinner.o(.text.lv_spinner_constructor)
</UL>
<P><STRONG><a name="[183]"></a>lv_spinner_constructor</STRONG> (Thumb, 136 bytes, Stack size 88 bytes, lv_spinner.o(.text.lv_spinner_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296 + Unknown Stack Size
<LI>Call Chain = lv_spinner_constructor &rArr; lv_arc_set_bg_angles &rArr; value_update &rArr; lv_arc_set_start_angle &rArr; inv_arc_area &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_rotation
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_bg_angles
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_spinner.o(.rodata.lv_spinner_class)
</UL>
<P><STRONG><a name="[f0]"></a>btns_value_changed_event_cb</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lv_tabview.o(.text.btns_value_changed_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360 + Unknown Stack Size
<LI>Call Chain = btns_value_changed_event_cb &rArr; lv_tabview_set_act &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_get_selected_btn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_tabview.o(.text.lv_tabview_constructor)
</UL>
<P><STRONG><a name="[f1]"></a>cont_scroll_end_event_cb</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, lv_tabview.o(.text.cont_scroll_end_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368 + Unknown Stack Size
<LI>Call Chain = cont_scroll_end_event_cb &rArr; lv_tabview_set_act &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_end
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_tabview.o(.text.lv_tabview_constructor)
</UL>
<P><STRONG><a name="[189]"></a>lv_tabview_constructor</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, lv_tabview.o(.text.lv_tabview_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192 + Unknown Stack Size
<LI>Call Chain = lv_tabview_constructor &rArr; lv_obj_set_width &rArr; lv_obj_set_style_width &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_default
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_grow
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scrollbar_mode
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scroll_snap_x
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_one_checked
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_create
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_tabview.o(.rodata.lv_tabview_class)
</UL>
<P><STRONG><a name="[18a]"></a>lv_tabview_destructor</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lv_tabview.o(.text.lv_tabview_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = lv_tabview_destructor &rArr; lv_mem_free &rArr; memory_free &rArr; block_merge_next &rArr; remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_tabview.o(.rodata.lv_tabview_class)
</UL>
<P><STRONG><a name="[18b]"></a>lv_tabview_event</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lv_tabview.o(.text.lv_tabview_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360 + Unknown Stack Size
<LI>Call Chain = lv_tabview_event &rArr; lv_tabview_set_act &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_tabview.o(.rodata.lv_tabview_class)
</UL>
<P><STRONG><a name="[18f]"></a>lv_tileview_constructor</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lv_tileview.o(.text.lv_tileview_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176 + Unknown Stack Size
<LI>Call Chain = lv_tileview_constructor &rArr; lv_obj_set_size &rArr; lv_obj_set_style_width &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scroll_snap_y
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scroll_snap_x
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_tileview.o(.rodata.lv_tileview_class)
</UL>
<P><STRONG><a name="[190]"></a>lv_tileview_tile_constructor</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lv_tileview.o(.text.lv_tileview_tile_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336 + Unknown Stack Size
<LI>Call Chain = lv_tileview_tile_constructor &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scroll_dir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_tileview.o(.rodata.lv_tileview_tile_class)
</UL>
<P><STRONG><a name="[f7]"></a>tileview_event_cb</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, lv_tileview.o(.text.tileview_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088 + Unknown Stack Size
<LI>Call Chain = tileview_event_cb &rArr; lv_obj_set_scroll_dir &rArr; lv_obj_allocate_spec_attr &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scroll_dir
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_end
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_tileview.o(.text.lv_tileview_constructor)
</UL>
<P><STRONG><a name="[191]"></a>lv_win_constructor</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, lv_win.o(.text.lv_win_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184 + Unknown Stack Size
<LI>Call Chain = lv_win_constructor &rArr; lv_obj_set_width &rArr; lv_obj_set_style_width &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_grow
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_align
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_win.o(.rodata.lv_win_class)
</UL>
<P><STRONG><a name="[383]"></a>get_glyph_dsc_id</STRONG> (Thumb, 356 bytes, Stack size 32 bytes, lv_font_fmt_txt.o(.text.get_glyph_dsc_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = get_glyph_dsc_id &rArr; _lv_utils_bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_utils_bsearch
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc_fmt_txt
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_bitmap_fmt_txt
</UL>

<P><STRONG><a name="[e3]"></a>kern_pair_16_compare</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_font_fmt_txt.o(.text.kern_pair_16_compare))
<BR>[Address Reference Count : 1]<UL><LI> lv_font_fmt_txt.o(.text.lv_font_get_glyph_dsc_fmt_txt)
</UL>
<P><STRONG><a name="[e2]"></a>kern_pair_8_compare</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_font_fmt_txt.o(.text.kern_pair_8_compare))
<BR>[Address Reference Count : 1]<UL><LI> lv_font_fmt_txt.o(.text.lv_font_get_glyph_dsc_fmt_txt)
</UL>
<P><STRONG><a name="[d4]"></a>unicode_list_compare</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_font_fmt_txt.o(.text.unicode_list_compare))
<BR>[Address Reference Count : 1]<UL><LI> lv_font_fmt_txt.o(.text.get_glyph_dsc_id)
</UL>
<P><STRONG><a name="[bc]"></a>anim_timer</STRONG> (Thumb, 436 bytes, Stack size 104 bytes, lv_anim.o(.text.anim_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = anim_timer &rArr; lv_mem_free &rArr; memory_free &rArr; block_merge_next &rArr; remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_resume
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_pause
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_refr_now
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_anim.o(.text._lv_anim_core_init)
</UL>
<P><STRONG><a name="[6]"></a>lv_txt_unicode_to_utf8</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, lv_txt.o(.text.lv_txt_unicode_to_utf8))
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data._lv_txt_unicode_to_encoded)
</UL>
<P><STRONG><a name="[2]"></a>lv_txt_utf8_get_byte_id</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lv_txt.o(.text.lv_txt_utf8_get_byte_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_txt_utf8_get_byte_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data._lv_txt_encoded_get_byte_id)
</UL>
<P><STRONG><a name="[3]"></a>lv_txt_utf8_get_char_id</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, lv_txt.o(.text.lv_txt_utf8_get_char_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_txt_utf8_get_char_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data._lv_txt_encoded_get_char_id)
</UL>
<P><STRONG><a name="[5]"></a>lv_txt_utf8_get_length</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lv_txt.o(.text.lv_txt_utf8_get_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_txt_utf8_get_length
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data._lv_txt_get_encoded_length)
</UL>
<P><STRONG><a name="[1]"></a>lv_txt_utf8_next</STRONG> (Thumb, 238 bytes, Stack size 12 bytes, lv_txt.o(.text.lv_txt_utf8_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lv_txt_utf8_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[4]"></a>lv_txt_utf8_prev</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, lv_txt.o(.text.lv_txt_utf8_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_txt_utf8_prev
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data._lv_txt_encoded_prev)
</UL>
<P><STRONG><a name="[0]"></a>lv_txt_utf8_size</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lv_txt.o(.text.lv_txt_utf8_size))
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[381]"></a>get_center</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, lv_arc.o(.text.get_center))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = get_center &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[3a8]"></a>inv_arc_area</STRONG> (Thumb, 1398 bytes, Stack size 88 bytes, lv_arc.o(.text.inv_arc_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136 + Unknown Stack Size
<LI>Call Chain = inv_arc_area &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_visible
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_start_angle
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_end_angle
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_bg_angles
</UL>

<P><STRONG><a name="[14f]"></a>lv_arc_constructor</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, lv_arc.o(.text.lv_arc_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = lv_arc_constructor &rArr; lv_obj_clear_flag &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_ext_click_area
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_arc.o(.rodata.lv_arc_class)
</UL>
<P><STRONG><a name="[150]"></a>lv_arc_event</STRONG> (Thumb, 1736 bytes, Stack size 200 bytes, lv_arc.o(.text.lv_arc_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 2560 + Unknown Stack Size
<LI>Call Chain = lv_arc_event &rArr; lv_draw_arc &rArr; lv_draw_rect &rArr; lv_draw_img &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_arc_dsc
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc_dsc_init
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_atan2
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_update
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_center
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_arc.o(.rodata.lv_arc_class)
</UL>
<P><STRONG><a name="[3cd]"></a>value_update</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, lv_arc.o(.text.value_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184 + Unknown Stack Size
<LI>Call Chain = value_update &rArr; lv_arc_set_start_angle &rArr; inv_arc_area &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_start_angle
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_end_angle
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_bg_angles
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[d8]"></a>lv_area_get_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_bar.o(.text.lv_area_get_height))
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(.text.lv_bar_event)
</UL>
<P><STRONG><a name="[d9]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_bar.o(.text.lv_area_get_width))
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(.text.lv_bar_event)
</UL>
<P><STRONG><a name="[da]"></a>lv_bar_anim</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_bar.o(.text.lv_bar_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_bar_anim &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_bar.o(.text.lv_bar_set_value)
<LI> lv_bar.o(.text.lv_bar_set_start_value)
</UL>
<P><STRONG><a name="[db]"></a>lv_bar_anim_ready</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, lv_bar.o(.text.lv_bar_anim_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_bar_anim_ready &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_bar.o(.text.lv_bar_set_value)
<LI> lv_bar.o(.text.lv_bar_set_start_value)
</UL>
<P><STRONG><a name="[151]"></a>lv_bar_constructor</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, lv_bar.o(.text.lv_bar_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = lv_bar_constructor &rArr; lv_obj_clear_flag &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(.rodata.lv_bar_class)
</UL>
<P><STRONG><a name="[152]"></a>lv_bar_destructor</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_bar.o(.text.lv_bar_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = lv_bar_destructor &rArr; lv_anim_del &rArr; lv_mem_free &rArr; memory_free &rArr; block_merge_next &rArr; remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(.rodata.lv_bar_class)
</UL>
<P><STRONG><a name="[153]"></a>lv_bar_event</STRONG> (Thumb, 1654 bytes, Stack size 288 bytes, lv_bar.o(.text.lv_bar_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 2272 + Unknown Stack Size
<LI>Call Chain = lv_bar_event &rArr; lv_draw_rect &rArr; lv_draw_img &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(.rodata.lv_bar_class)
</UL>
<P><STRONG><a name="[154]"></a>lv_btn_constructor</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_btn.o(.text.lv_btn_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = lv_btn_constructor &rArr; lv_obj_clear_flag &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_btn.o(.rodata.lv_btn_class)
</UL>
<P><STRONG><a name="[37f]"></a>get_button_from_point</STRONG> (Thumb, 446 bytes, Stack size 88 bytes, lv_btnmatrix.o(.text.get_button_from_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = get_button_from_point &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
</UL>

<P><STRONG><a name="[3ab]"></a>invalidate_button_area</STRONG> (Thumb, 200 bytes, Stack size 56 bytes, lv_btnmatrix.o(.text.invalidate_button_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104 + Unknown Stack Size
<LI>Call Chain = invalidate_button_area &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_btn_ctrl_all
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_btn_ctrl
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_clear_btn_ctrl_all
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_one_button_checked
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
</UL>

<P><STRONG><a name="[155]"></a>lv_btnmatrix_constructor</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160 + Unknown Stack Size
<LI>Call Chain = lv_btnmatrix_constructor &rArr; lv_btnmatrix_set_map &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_btnmatrix.o(.rodata.lv_btnmatrix_class)
</UL>
<P><STRONG><a name="[156]"></a>lv_btnmatrix_destructor</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = lv_btnmatrix_destructor &rArr; lv_mem_free &rArr; memory_free &rArr; block_merge_next &rArr; remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_btnmatrix.o(.rodata.lv_btnmatrix_class)
</UL>
<P><STRONG><a name="[157]"></a>lv_btnmatrix_event</STRONG> (Thumb, 2734 bytes, Stack size 336 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 2320 + Unknown Stack Size
<LI>Call Chain = lv_btnmatrix_event &rArr; lv_draw_rect &rArr; lv_draw_img &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_reset_long_press
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_one_button_checked
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_button_from_point
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_btnmatrix.o(.rodata.lv_btnmatrix_class)
</UL>
<P><STRONG><a name="[3d9]"></a>make_one_button_checked</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, lv_btnmatrix.o(.text.make_one_button_checked))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136 + Unknown Stack Size
<LI>Call Chain = make_one_button_checked &rArr; lv_btnmatrix_clear_btn_ctrl_all &rArr; invalidate_button_area &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_clear_btn_ctrl_all
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_one_checked
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
</UL>

<P><STRONG><a name="[15e]"></a>lv_checkbox_constructor</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lv_checkbox.o(.text.lv_checkbox_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = lv_checkbox_constructor &rArr; lv_obj_add_flag &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_checkbox.o(.rodata.lv_checkbox_class)
</UL>
<P><STRONG><a name="[15f]"></a>lv_checkbox_destructor</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_checkbox.o(.text.lv_checkbox_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = lv_checkbox_destructor &rArr; lv_mem_free &rArr; memory_free &rArr; block_merge_next &rArr; remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_checkbox.o(.rodata.lv_checkbox_class)
</UL>
<P><STRONG><a name="[160]"></a>lv_checkbox_event</STRONG> (Thumb, 940 bytes, Stack size 248 bytes, lv_checkbox.o(.text.lv_checkbox_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 2232 + Unknown Stack Size
<LI>Call Chain = lv_checkbox_event &rArr; lv_draw_rect &rArr; lv_draw_img &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_checkbox.o(.rodata.lv_checkbox_class)
</UL>
<P><STRONG><a name="[354]"></a>draw_box</STRONG> (Thumb, 194 bytes, Stack size 96 bytes, lv_dropdown.o(.text.draw_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 2080 + Unknown Stack Size
<LI>Call Chain = draw_box &rArr; lv_draw_rect &rArr; lv_draw_img &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
</UL>

<P><STRONG><a name="[358]"></a>draw_box_label</STRONG> (Thumb, 200 bytes, Stack size 80 bytes, lv_dropdown.o(.text.draw_box_label))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688 + Unknown Stack Size
<LI>Call Chain = draw_box_label &rArr; lv_draw_label &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
</UL>

<P><STRONG><a name="[163]"></a>lv_dropdown_constructor</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, lv_dropdown.o(.text.lv_dropdown_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080 + Unknown Stack Size
<LI>Call Chain = lv_dropdown_constructor &rArr; lv_obj_add_flag &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_dropdown.o(.rodata.lv_dropdown_class)
</UL>
<P><STRONG><a name="[164]"></a>lv_dropdown_destructor</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lv_dropdown.o(.text.lv_dropdown_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224 + Unknown Stack Size
<LI>Call Chain = lv_dropdown_destructor &rArr; lv_obj_del &rArr; lv_obj_readjust_scroll &rArr; lv_obj_scroll_by &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_dropdown.o(.rodata.lv_dropdown_class)
</UL>
<P><STRONG><a name="[165]"></a>lv_dropdown_event</STRONG> (Thumb, 1612 bytes, Stack size 144 bytes, lv_dropdown.o(.text.lv_dropdown_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912 + Unknown Stack Size
<LI>Call Chain = lv_dropdown_event &rArr; lv_draw_img &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_state
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_scroll_obj
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_to_selected
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_dropdown.o(.rodata.lv_dropdown_class)
</UL>
<P><STRONG><a name="[168]"></a>lv_dropdown_list_event</STRONG> (Thumb, 644 bytes, Stack size 32 bytes, lv_dropdown.o(.text.lv_dropdown_list_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 2112 + Unknown Stack Size
<LI>Call Chain = lv_dropdown_list_event &rArr; draw_box &rArr; lv_draw_rect &rArr; lv_draw_img &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_state
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_scroll_obj
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box_label
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_dropdown.o(.rodata.lv_dropdownlist_class)
</UL>
<P><STRONG><a name="[166]"></a>lv_dropdownlist_constructor</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_dropdown.o(.text.lv_dropdownlist_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176 + Unknown Stack Size
<LI>Call Chain = lv_dropdownlist_constructor &rArr; lv_label_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_dropdown.o(.rodata.lv_dropdownlist_class)
</UL>
<P><STRONG><a name="[167]"></a>lv_dropdownlist_destructor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_dropdown.o(.text.lv_dropdownlist_destructor))
<BR>[Address Reference Count : 1]<UL><LI> lv_dropdown.o(.rodata.lv_dropdownlist_class)
</UL>
<P><STRONG><a name="[408]"></a>position_to_selected</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lv_dropdown.o(.text.position_to_selected))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192 + Unknown Stack Size
<LI>Call Chain = position_to_selected &rArr; lv_obj_scroll_to_y &rArr; lv_obj_scroll_by &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_y
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
</UL>

<P><STRONG><a name="[16b]"></a>lv_img_constructor</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lv_img.o(.text.lv_img_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080 + Unknown Stack Size
<LI>Call Chain = lv_img_constructor &rArr; lv_obj_clear_flag &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img.o(.rodata.lv_img_class)
</UL>
<P><STRONG><a name="[16c]"></a>lv_img_destructor</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lv_img.o(.text.lv_img_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = lv_img_destructor &rArr; lv_mem_free &rArr; memory_free &rArr; block_merge_next &rArr; remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img.o(.rodata.lv_img_class)
</UL>
<P><STRONG><a name="[16d]"></a>lv_img_event</STRONG> (Thumb, 2142 bytes, Stack size 152 bytes, lv_img.o(.text.lv_img_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920 + Unknown Stack Size
<LI>Call Chain = lv_img_event &rArr; lv_draw_img &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_click_area
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_get_transformed_area
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img.o(.rodata.lv_img_class)
</UL>
<P><STRONG><a name="[16f]"></a>lv_label_constructor</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, lv_label.o(.text.lv_label_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264 + Unknown Stack Size
<LI>Call Chain = lv_label_constructor &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_label_get_letter_on &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_label.o(.rodata.lv_label_class)
</UL>
<P><STRONG><a name="[170]"></a>lv_label_destructor</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_label.o(.text.lv_label_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = lv_label_destructor &rArr; lv_mem_free &rArr; memory_free &rArr; block_merge_next &rArr; remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_label.o(.rodata.lv_label_class)
</UL>
<P><STRONG><a name="[171]"></a>lv_label_event</STRONG> (Thumb, 1272 bytes, Stack size 96 bytes, lv_label.o(.text.lv_label_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704 + Unknown Stack Size
<LI>Call Chain = lv_label_event &rArr; lv_draw_label &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_move
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_label.o(.rodata.lv_label_class)
</UL>
<P><STRONG><a name="[43a]"></a>lv_label_refr_text</STRONG> (Thumb, 1414 bytes, Stack size 136 bytes, lv_label.o(.text.lv_label_refr_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224 + Unknown Stack Size
<LI>Call Chain = lv_label_refr_text &rArr; lv_label_get_letter_on &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_speed_to_time
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_get
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_static
</UL>

<P><STRONG><a name="[e6]"></a>set_ofs_x_anim</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_label.o(.text.set_ofs_x_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = set_ofs_x_anim &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_label.o(.text.lv_label_refr_text)
<LI> lv_label.o(.text.lv_label_set_long_mode)
</UL>
<P><STRONG><a name="[e7]"></a>set_ofs_y_anim</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_label.o(.text.set_ofs_y_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = set_ofs_y_anim &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_label.o(.text.lv_label_refr_text)
<LI> lv_label.o(.text.lv_label_set_long_mode)
</UL>
<P><STRONG><a name="[174]"></a>lv_line_constructor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_line.o(.text.lv_line_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = lv_line_constructor &rArr; lv_obj_clear_flag &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_line.o(.rodata.lv_line_class)
</UL>
<P><STRONG><a name="[175]"></a>lv_line_event</STRONG> (Thumb, 594 bytes, Stack size 64 bytes, lv_line.o(.text.lv_line_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440 + Unknown Stack Size
<LI>Call Chain = lv_line_event &rArr; lv_draw_line &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_line.o(.rodata.lv_line_class)
</UL>
<P><STRONG><a name="[3a6]"></a>inf_normalize</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, lv_roller.o(.text.inf_normalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192 + Unknown Stack Size
<LI>Call Chain = inf_normalize &rArr; lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_anim_ready_cb
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
</UL>

<P><STRONG><a name="[17c]"></a>lv_roller_constructor</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, lv_roller.o(.text.lv_roller_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272 + Unknown Stack Size
<LI>Call Chain = lv_roller_constructor &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_label_get_letter_on &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_roller.o(.rodata.lv_roller_class)
</UL>
<P><STRONG><a name="[17d]"></a>lv_roller_event</STRONG> (Thumb, 1788 bytes, Stack size 128 bytes, lv_roller.o(.text.lv_roller_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 2112 + Unknown Stack Size
<LI>Call Chain = lv_roller_event &rArr; lv_draw_rect &rArr; lv_draw_img &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_scroll_throw_predict
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_vect
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_roller.o(.rodata.lv_roller_class)
</UL>
<P><STRONG><a name="[17e]"></a>lv_roller_label_event</STRONG> (Thumb, 462 bytes, Stack size 88 bytes, lv_roller.o(.text.lv_roller_label_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696 + Unknown Stack Size
<LI>Call Chain = lv_roller_label_event &rArr; lv_draw_label &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_roller.o(.rodata.lv_roller_label_class)
</UL>
<P><STRONG><a name="[487]"></a>refr_position</STRONG> (Thumb, 312 bytes, Stack size 104 bytes, lv_roller.o(.text.refr_position))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296 + Unknown Stack Size
<LI>Call Chain = refr_position &rArr; inf_normalize &rArr; lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_style_text_align
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inf_normalize
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[137]"></a>scroll_anim_ready_cb</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_roller.o(.text.scroll_anim_ready_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200 + Unknown Stack Size
<LI>Call Chain = scroll_anim_ready_cb &rArr; inf_normalize &rArr; lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inf_normalize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_roller.o(.text.refr_position)
</UL>
<P><STRONG><a name="[ec]"></a>set_y_anim</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_roller.o(.text.set_y_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168 + Unknown Stack Size
<LI>Call Chain = set_y_anim &rArr; lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_roller.o(.text.refr_position)
<LI> lv_roller.o(.text.lv_roller_event)
</UL>
<P><STRONG><a name="[17f]"></a>lv_slider_constructor</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, lv_slider.o(.text.lv_slider_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = lv_slider_constructor &rArr; lv_obj_clear_flag &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_ext_click_area
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_slider.o(.rodata.lv_slider_class)
</UL>
<P><STRONG><a name="[180]"></a>lv_slider_event</STRONG> (Thumb, 2060 bytes, Stack size 224 bytes, lv_slider.o(.text.lv_slider_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 2208 + Unknown Stack Size
<LI>Call Chain = lv_slider_event &rArr; lv_draw_rect &rArr; lv_draw_img &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_start_value
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_get_value
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_get_start_value
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_get_mode
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_knob
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_slider.o(.rodata.lv_slider_class)
</UL>
<P><STRONG><a name="[48d]"></a>position_knob</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, lv_slider.o(.text.position_knob))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = position_knob &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[184]"></a>lv_switch_constructor</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_switch.o(.text.lv_switch_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = lv_switch_constructor &rArr; lv_obj_clear_flag &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_switch.o(.rodata.lv_switch_class)
</UL>
<P><STRONG><a name="[185]"></a>lv_switch_event</STRONG> (Thumb, 610 bytes, Stack size 104 bytes, lv_switch.o(.text.lv_switch_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 2088 + Unknown Stack Size
<LI>Call Chain = lv_switch_event &rArr; lv_draw_rect &rArr; lv_draw_img &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_state
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_switch.o(.rodata.lv_switch_class)
</UL>
<P><STRONG><a name="[385]"></a>get_row_height</STRONG> (Thumb, 276 bytes, Stack size 80 bytes, lv_table.o(.text.get_row_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104 + Unknown Stack Size
<LI>Call Chain = get_row_height &rArr; lv_txt_get_size &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_size
</UL>

<P><STRONG><a name="[186]"></a>lv_table_constructor</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lv_table.o(.text.lv_table_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024 + Unknown Stack Size
<LI>Call Chain = lv_table_constructor &rArr; lv_mem_alloc &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_table.o(.rodata.lv_table_class)
</UL>
<P><STRONG><a name="[187]"></a>lv_table_destructor</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lv_table.o(.text.lv_table_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = lv_table_destructor &rArr; lv_mem_free &rArr; memory_free &rArr; block_merge_next &rArr; remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_table.o(.rodata.lv_table_class)
</UL>
<P><STRONG><a name="[188]"></a>lv_table_event</STRONG> (Thumb, 2570 bytes, Stack size 400 bytes, lv_table.o(.text.lv_table_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 2384 + Unknown Stack Size
<LI>Call Chain = lv_table_event &rArr; lv_draw_rect &rArr; lv_draw_img &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_scroll_obj
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_table.o(.rodata.lv_table_class)
</UL>
<P><STRONG><a name="[4bd]"></a>refr_size</STRONG> (Thumb, 268 bytes, Stack size 80 bytes, lv_table.o(.text.refr_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184 + Unknown Stack Size
<LI>Call Chain = refr_size &rArr; get_row_height &rArr; lv_txt_get_size &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_row_height
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
</UL>

<P><STRONG><a name="[f5]"></a>cursor_blink_anim_cb</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lv_textarea.o(.text.cursor_blink_anim_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = cursor_blink_anim_cb &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
</UL>
<BR>[Address Reference Count : 3]<UL><LI> lv_textarea.o(.text.lv_textarea_set_cursor_pos)
<LI> lv_textarea.o(.text.lv_textarea_constructor)
<LI> lv_textarea.o(.text.lv_textarea_event)
</UL>
<P><STRONG><a name="[18c]"></a>lv_textarea_constructor</STRONG> (Thumb, 216 bytes, Stack size 96 bytes, lv_textarea.o(.text.lv_textarea_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520 + Unknown Stack Size
<LI>Call Chain = lv_textarea_constructor &rArr; lv_textarea_set_cursor_pos &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_textarea.o(.rodata.lv_textarea_class)
</UL>
<P><STRONG><a name="[18d]"></a>lv_textarea_destructor</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_textarea.o(.text.lv_textarea_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = lv_textarea_destructor &rArr; lv_mem_free &rArr; memory_free &rArr; block_merge_next &rArr; remove_free_block &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_textarea.o(.rodata.lv_textarea_class)
</UL>
<P><STRONG><a name="[18e]"></a>lv_textarea_event</STRONG> (Thumb, 1612 bytes, Stack size 152 bytes, lv_textarea.o(.text.lv_textarea_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 2136 + Unknown Stack Size
<LI>Call Chain = lv_textarea_event &rArr; lv_draw_rect &rArr; lv_draw_img &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_vect
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_move
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_down
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_textarea.o(.rodata.lv_textarea_class)
</UL>
<P><STRONG><a name="[4be]"></a>pwd_char_hider</STRONG> (Thumb, 350 bytes, Stack size 64 bytes, lv_textarea.o(.text.pwd_char_hider))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320 + Unknown Stack Size
<LI>Call Chain = pwd_char_hider &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_label_get_letter_on &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider_anim_ready
</UL>

<P><STRONG><a name="[f2]"></a>pwd_char_hider_anim</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_textarea.o(.text.pwd_char_hider_anim))
<BR>[Address Reference Count : 3]<UL><LI> lv_textarea.o(.text.lv_textarea_add_text)
<LI> lv_textarea.o(.text.lv_textarea_set_text)
<LI> lv_textarea.o(.text.lv_textarea_add_char)
</UL>
<P><STRONG><a name="[f4]"></a>pwd_char_hider_anim_ready</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_textarea.o(.text.pwd_char_hider_anim_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320 + Unknown Stack Size
<LI>Call Chain = pwd_char_hider_anim_ready &rArr; pwd_char_hider &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_label_get_letter_on &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
</UL>
<BR>[Address Reference Count : 3]<UL><LI> lv_textarea.o(.text.lv_textarea_add_text)
<LI> lv_textarea.o(.text.lv_textarea_set_text)
<LI> lv_textarea.o(.text.lv_textarea_add_char)
</UL>
<P><STRONG><a name="[4c2]"></a>refr_cursor_area</STRONG> (Thumb, 508 bytes, Stack size 64 bytes, lv_textarea.o(.text.refr_cursor_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136 + Unknown Stack Size
<LI>Call Chain = refr_cursor_area &rArr; lv_label_get_letter_pos &rArr; _lv_log_add &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_style_text_align
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[511]"></a>shellShowVar</STRONG> (Thumb, 1052 bytes, Stack size 48 bytes, shell.o(.text.shellShowVar))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = shellShowVar
</UL>
<BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSetVarValue
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellRunCommand
</UL>

<P><STRONG><a name="[507]"></a>shellWritePrompt</STRONG> (Thumb, 268 bytes, Stack size 8 bytes, shell.o(.text.shellWritePrompt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = shellWritePrompt
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellInit
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellTab
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellInsertByte
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellEnter
</UL>

<P><STRONG><a name="[510]"></a>shellWriteReturnValue</STRONG> (Thumb, 674 bytes, Stack size 48 bytes, shell.o(.text.shellWriteReturnValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = shellWriteReturnValue
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellRunCommand
</UL>

<P><STRONG><a name="[a1]"></a>DCMI_DMAError</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32h7xx_hal_dcmi.o(.text.DCMI_DMAError))
<BR><BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_ErrorCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32h7xx_hal_dcmi.o(.text.HAL_DCMI_IRQHandler)
<LI> stm32h7xx_hal_dcmi.o(.text.HAL_DCMI_Start_DMA)
</UL>
<P><STRONG><a name="[a2]"></a>DCMI_DMAXferCplt</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, stm32h7xx_hal_dcmi.o(.text.DCMI_DMAXferCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DCMI_DMAXferCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMAEx_ChangeMemory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_dcmi.o(.text.HAL_DCMI_Start_DMA)
</UL>
<P><STRONG><a name="[22e]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 294 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(.text.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[22f]"></a>DMA_SetConfig</STRONG> (Thumb, 786 bytes, Stack size 16 bytes, stm32h7xx_hal_dma.o(.text.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[22c]"></a>DMA_MultiBufferSetConfig</STRONG> (Thumb, 292 bytes, Stack size 8 bytes, stm32h7xx_hal_dma_ex.o(.text.DMA_MultiBufferSetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_MultiBufferSetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMAEx_MultiBufferStart_IT
</UL>

<P><STRONG><a name="[236]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, stm32h7xx_hal_i2c.o(.text.I2C_IsAcknowledgeFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
</UL>

<P><STRONG><a name="[235]"></a>I2C_WaitOnRXNEFlagUntilTimeout</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, stm32h7xx_hal_i2c.o(.text.I2C_WaitOnRXNEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
</UL>

<P><STRONG><a name="[238]"></a>I2C_WaitOnTXISFlagUntilTimeout</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, stm32h7xx_hal_i2c.o(.text.I2C_WaitOnTXISFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>

<P><STRONG><a name="[292]"></a>JPEG_Bits_To_SizeCodes</STRONG> (Thumb, 554 bytes, Stack size 48 bytes, stm32h7xx_hal_jpeg.o(.text.JPEG_Bits_To_SizeCodes))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = JPEG_Bits_To_SizeCodes &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Set_HuffDC_Mem
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Set_HuffAC_Mem
</UL>

<P><STRONG><a name="[253]"></a>JPEG_DMA_EndProcess</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, stm32h7xx_hal_jpeg.o(.text.JPEG_DMA_EndProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = JPEG_DMA_EndProcess &rArr; JPEG_DMA_PollResidualData &rArr; HAL_JPEG_DataReadyCallback &rArr; osSemaphoreRelease &rArr; SemaphoreTokenIncrement
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_EncodeCpltCallback
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_DataReadyCallback
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_DecodeCpltCallback
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_PollResidualData
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_IRQHandler
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_MDMAOutAbortCallback
</UL>

<P><STRONG><a name="[294]"></a>JPEG_DMA_PollResidualData</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, stm32h7xx_hal_jpeg.o(.text.JPEG_DMA_PollResidualData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = JPEG_DMA_PollResidualData &rArr; HAL_JPEG_DataReadyCallback &rArr; osSemaphoreRelease &rArr; SemaphoreTokenIncrement
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_EncodeCpltCallback
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_DataReadyCallback
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_DecodeCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_EndProcess
</UL>

<P><STRONG><a name="[249]"></a>JPEG_DMA_StartProcess</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, stm32h7xx_hal_jpeg.o(.text.JPEG_DMA_StartProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = JPEG_DMA_StartProcess &rArr; HAL_MDMA_Start_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MDMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_Encode_DMA
</UL>

<P><STRONG><a name="[b3]"></a>JPEG_MDMAErrorCallback</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32h7xx_hal_jpeg.o(.text.JPEG_MDMAErrorCallback))
<BR><BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_jpeg.o(.text.JPEG_DMA_StartProcess)
</UL>
<P><STRONG><a name="[b2]"></a>JPEG_MDMAInCpltCallback</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, stm32h7xx_hal_jpeg.o(.text.JPEG_MDMAInCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = JPEG_MDMAInCpltCallback &rArr; HAL_JPEG_GetDataCallback &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_GetDataCallback
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MDMA_Start_IT
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_jpeg.o(.text.JPEG_DMA_StartProcess)
</UL>
<P><STRONG><a name="[b5]"></a>JPEG_MDMAOutAbortCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal_jpeg.o(.text.JPEG_MDMAOutAbortCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = JPEG_MDMAOutAbortCallback &rArr; JPEG_DMA_EndProcess &rArr; JPEG_DMA_PollResidualData &rArr; HAL_JPEG_DataReadyCallback &rArr; osSemaphoreRelease &rArr; SemaphoreTokenIncrement
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_EndProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_jpeg.o(.text.JPEG_DMA_StartProcess)
</UL>
<P><STRONG><a name="[b4]"></a>JPEG_MDMAOutCpltCallback</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, stm32h7xx_hal_jpeg.o(.text.JPEG_MDMAOutCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = JPEG_MDMAOutCpltCallback &rArr; HAL_JPEG_DataReadyCallback &rArr; osSemaphoreRelease &rArr; SemaphoreTokenIncrement
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_DataReadyCallback
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MDMA_Start_IT
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_jpeg.o(.text.JPEG_DMA_StartProcess)
</UL>
<P><STRONG><a name="[24f]"></a>JPEG_Process</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, stm32h7xx_hal_jpeg.o(.text.JPEG_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = JPEG_Process &rArr; JPEG_ReadInputData &rArr; HAL_JPEG_GetDataCallback &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_EncodeCpltCallback
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_DataReadyCallback
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_InfoReadyCallback
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_GetInfo
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_DecodeCpltCallback
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_StoreOutputData
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_ReadInputData
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_IRQHandler
</UL>

<P><STRONG><a name="[297]"></a>JPEG_ReadInputData</STRONG> (Thumb, 678 bytes, Stack size 24 bytes, stm32h7xx_hal_jpeg.o(.text.JPEG_ReadInputData))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = JPEG_ReadInputData &rArr; HAL_JPEG_GetDataCallback &rArr; log_out &rArr; log_snprintf &rArr; log_vsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_GetDataCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Process
</UL>

<P><STRONG><a name="[256]"></a>JPEG_Set_HuffAC_Mem</STRONG> (Thumb, 420 bytes, Stack size 2128 bytes, stm32h7xx_hal_jpeg.o(.text.JPEG_Set_HuffAC_Mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 2180<LI>Call Chain = JPEG_Set_HuffAC_Mem &rArr; JPEG_Bits_To_SizeCodes &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Bits_To_SizeCodes
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_Init
</UL>

<P><STRONG><a name="[257]"></a>JPEG_Set_HuffDC_Mem</STRONG> (Thumb, 436 bytes, Stack size 1376 bytes, stm32h7xx_hal_jpeg.o(.text.JPEG_Set_HuffDC_Mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 1428<LI>Call Chain = JPEG_Set_HuffDC_Mem &rArr; JPEG_Bits_To_SizeCodes &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Bits_To_SizeCodes
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_Init
</UL>

<P><STRONG><a name="[244]"></a>JPEG_Set_Quantization_Mem</STRONG> (Thumb, 446 bytes, Stack size 36 bytes, stm32h7xx_hal_jpeg.o(.text.JPEG_Set_Quantization_Mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = JPEG_Set_Quantization_Mem
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_ConfigEncoding
</UL>

<P><STRONG><a name="[298]"></a>JPEG_StoreOutputData</STRONG> (Thumb, 1332 bytes, Stack size 32 bytes, stm32h7xx_hal_jpeg.o(.text.JPEG_StoreOutputData))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = JPEG_StoreOutputData &rArr; HAL_JPEG_DataReadyCallback &rArr; osSemaphoreRelease &rArr; SemaphoreTokenIncrement
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_DataReadyCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Process
</UL>

<P><STRONG><a name="[a3]"></a>QSPI_DMAAbortCplt</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32h7xx_hal_qspi.o(.text.QSPI_DMAAbortCplt))
<BR><BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_qspi.o(.text.HAL_QSPI_IRQHandler)
</UL>
<P><STRONG><a name="[267]"></a>RCCEx_PLL2_Config</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, stm32h7xx_hal_rcc_ex.o(.text.RCCEx_PLL2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLL2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[268]"></a>RCCEx_PLL3_Config</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, stm32h7xx_hal_rcc_ex.o(.text.RCCEx_PLL3_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[26f]"></a>SPI_CloseTransfer</STRONG> (Thumb, 202 bytes, Stack size 0 bytes, stm32h7xx_hal_spi.o(.text.SPI_CloseTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAError
</UL>

<P><STRONG><a name="[a4]"></a>SPI_DMAAbortOnError</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32h7xx_hal_spi.o(.text.SPI_DMAAbortOnError))
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_spi.o(.text.HAL_SPI_IRQHandler)
</UL>
<P><STRONG><a name="[a7]"></a>SPI_DMAError</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32h7xx_hal_spi.o(.text.SPI_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_GetError
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTransfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_spi.o(.text.HAL_SPI_Transmit_DMA)
</UL>
<P><STRONG><a name="[a6]"></a>SPI_DMAHalfTransmitCplt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_spi.o(.text.SPI_DMAHalfTransmitCplt))
<BR><BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_spi.o(.text.HAL_SPI_Transmit_DMA)
</UL>
<P><STRONG><a name="[a5]"></a>SPI_DMATransmitCplt</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32h7xx_hal_spi.o(.text.SPI_DMATransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_DMATransmitCplt &rArr; HAL_SPI_TxCpltCallback &rArr; osSemaphoreRelease &rArr; SemaphoreTokenIncrement
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_spi.o(.text.HAL_SPI_Transmit_DMA)
</UL>
<P><STRONG><a name="[aa]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.UART_DMAAbortOnError))
<BR><BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[ad]"></a>UART_DMAError</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.UART_DMAError))
<BR><BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
<LI> stm32h7xx_hal_uart.o(.text.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[b8]"></a>UART_DMAReceiveCplt</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.UART_DMAReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_DMAReceiveCplt &rArr; HAL_UARTEx_RxEventCallback &rArr; osSemaphoreRelease &rArr; SemaphoreTokenIncrement
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[b9]"></a>UART_DMARxHalfCplt</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.UART_DMARxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_DMARxHalfCplt &rArr; HAL_UARTEx_RxEventCallback &rArr; osSemaphoreRelease &rArr; SemaphoreTokenIncrement
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[a8]"></a>UART_DMARxOnlyAbortCallback</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.UART_DMARxOnlyAbortCallback))
<BR><BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceiveCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text.HAL_UART_AbortReceive_IT)
</UL>
<P><STRONG><a name="[ab]"></a>UART_DMATransmitCplt</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.UART_DMATransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_DMATransmitCplt &rArr; HAL_UART_TxCpltCallback &rArr; osSemaphoreRelease &rArr; SemaphoreTokenIncrement
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[ac]"></a>UART_DMATxHalfCplt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.UART_DMATxHalfCplt))
<BR><BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[a9]"></a>UART_DMATxOnlyAbortCallback</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.UART_DMATxOnlyAbortCallback))
<BR><BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortTransmitCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text.HAL_UART_AbortTransmit_IT)
</UL>
<P><STRONG><a name="[b6]"></a>UART_RxISR_16BIT</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(.text.UART_RxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_RxISR_16BIT &rArr; HAL_UARTEx_RxEventCallback &rArr; osSemaphoreRelease &rArr; SemaphoreTokenIncrement
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32h7xx_hal_uart.o(.text.UART_Start_Receive_IT)
<LI> stm32h7xx_hal_uart.o(.text.UART_RxISR_16BIT_FIFOEN)
</UL>
<P><STRONG><a name="[bb]"></a>UART_RxISR_16BIT_FIFOEN</STRONG> (Thumb, 568 bytes, Stack size 40 bytes, stm32h7xx_hal_uart.o(.text.UART_RxISR_16BIT_FIFOEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_RxISR_16BIT_FIFOEN &rArr; HAL_UARTEx_RxEventCallback &rArr; osSemaphoreRelease &rArr; SemaphoreTokenIncrement
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[b7]"></a>UART_RxISR_8BIT</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(.text.UART_RxISR_8BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_RxISR_8BIT &rArr; HAL_UARTEx_RxEventCallback &rArr; osSemaphoreRelease &rArr; SemaphoreTokenIncrement
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32h7xx_hal_uart.o(.text.UART_Start_Receive_IT)
<LI> stm32h7xx_hal_uart.o(.text.UART_RxISR_8BIT_FIFOEN)
</UL>
<P><STRONG><a name="[ba]"></a>UART_RxISR_8BIT_FIFOEN</STRONG> (Thumb, 576 bytes, Stack size 40 bytes, stm32h7xx_hal_uart.o(.text.UART_RxISR_8BIT_FIFOEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_RxISR_8BIT_FIFOEN &rArr; HAL_UARTEx_RxEventCallback &rArr; osSemaphoreRelease &rArr; SemaphoreTokenIncrement
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[b1]"></a>UART_TxISR_16BIT</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.UART_TxISR_16BIT))
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit_IT)
</UL>
<P><STRONG><a name="[b0]"></a>UART_TxISR_16BIT_FIFOEN</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.UART_TxISR_16BIT_FIFOEN))
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit_IT)
</UL>
<P><STRONG><a name="[af]"></a>UART_TxISR_8BIT</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.UART_TxISR_8BIT))
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit_IT)
</UL>
<P><STRONG><a name="[ae]"></a>UART_TxISR_8BIT_FIFOEN</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.UART_TxISR_8BIT_FIFOEN))
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit_IT)
</UL>
<P><STRONG><a name="[2a9]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_kernel.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; osRtxMemoryPoolInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[4d4]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_kernel.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[fd]"></a>svcRtxKernelGetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_kernel.o(.text.svcRtxKernelGetState))
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetState)
</UL>
<P><STRONG><a name="[fe]"></a>svcRtxKernelGetTickCount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_kernel.o(.text.svcRtxKernelGetTickCount))
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetTickCount)
</UL>
<P><STRONG><a name="[ff]"></a>svcRtxKernelInitialize</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, rtx_kernel.o(.text.svcRtxKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcRtxKernelInitialize &rArr; OUTLINED_FUNCTION_0 &rArr; osRtxMemoryPoolInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelInitialize)
</UL>
<P><STRONG><a name="[100]"></a>svcRtxKernelStart</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, rtx_kernel.o(.text.svcRtxKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = svcRtxKernelStart &rArr; osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Setup
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetIRQn
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelStart)
</UL>
<P><STRONG><a name="[4f0]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_thread.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSetPriority
</UL>

<P><STRONG><a name="[4e8]"></a>ThreadFlagsCheck</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rtx_thread.o(.text.ThreadFlagsCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ThreadFlagsCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[4e3]"></a>osRtxThreadBlock</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>

<P><STRONG><a name="[4eb]"></a>osRtxThreadDelayInsert</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadDelayInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadDelayInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[4ec]"></a>osRtxThreadDelayRemove</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadDelayRemove))
<BR><BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>

<P><STRONG><a name="[4e1]"></a>osRtxThreadDestroy</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadDestroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadDestroy &rArr; osRtxThreadFree &rArr; osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[4e2]"></a>osRtxThreadFree</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadFree &rArr; osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDestroy
</UL>

<P><STRONG><a name="[4e6]"></a>osRtxThreadJoinWakeup</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadJoinWakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osRtxThreadJoinWakeup &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[4de]"></a>osRtxThreadListRoot</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListRoot))
<BR><BR>[Calls]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRoot
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRoot
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[146]"></a>osRtxThreadPostProcess</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osRtxThreadPostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[109]"></a>svcRtxThreadExit</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, rtx_thread.o(.text.svcRtxThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = svcRtxThreadExit &rArr; osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadJoinWakeup
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDestroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadExit)
</UL>
<P><STRONG><a name="[10a]"></a>svcRtxThreadGetId</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_thread.o(.text.svcRtxThreadGetId))
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadGetId)
</UL>
<P><STRONG><a name="[10b]"></a>svcRtxThreadNew</STRONG> (Thumb, 472 bytes, Stack size 48 bytes, rtx_thread.o(.text.svcRtxThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = svcRtxThreadNew &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadNew)
</UL>
<P><STRONG><a name="[10c]"></a>svcRtxThreadSetPriority</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, rtx_thread.o(.text.svcRtxThreadSetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcRtxThreadSetPriority &rArr; osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadSetPriority)
</UL>
<P><STRONG><a name="[fc]"></a>svcRtxDelay</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtx_delay.o(.text.svcRtxDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcRtxDelay &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_delay.o(.text.osDelay)
</UL>
<P><STRONG><a name="[101]"></a>svcRtxMutexAcquire</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = svcRtxMutexAcquire &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexAcquire)
</UL>
<P><STRONG><a name="[102]"></a>svcRtxMutexDelete</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcRtxMutexDelete &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexDelete)
</UL>
<P><STRONG><a name="[103]"></a>svcRtxMutexNew</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = svcRtxMutexNew &rArr; osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexNew)
</UL>
<P><STRONG><a name="[104]"></a>svcRtxMutexRelease</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcRtxMutexRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexRelease)
</UL>
<P><STRONG><a name="[4ef]"></a>SemaphoreTokenIncrement</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rtx_semaphore.o(.text.SemaphoreTokenIncrement))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SemaphoreTokenIncrement
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
</UL>

<P><STRONG><a name="[144]"></a>osRtxSemaphorePostProcess</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, rtx_semaphore.o(.text.osRtxSemaphorePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osRtxSemaphorePostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.svcRtxSemaphoreNew)
</UL>
<P><STRONG><a name="[106]"></a>svcRtxSemaphoreAcquire</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, rtx_semaphore.o(.text.svcRtxSemaphoreAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = svcRtxSemaphoreAcquire &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.osSemaphoreAcquire)
</UL>
<P><STRONG><a name="[107]"></a>svcRtxSemaphoreNew</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, rtx_semaphore.o(.text.svcRtxSemaphoreNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = svcRtxSemaphoreNew &rArr; osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.osSemaphoreNew)
</UL>
<P><STRONG><a name="[108]"></a>svcRtxSemaphoreRelease</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rtx_semaphore.o(.text.svcRtxSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcRtxSemaphoreRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenIncrement
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.osSemaphoreRelease)
</UL>
<P><STRONG><a name="[9f]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[208]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
