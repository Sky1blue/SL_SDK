<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\cam_h7.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\cam_h7.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Sat Aug  7 12:04:18 2021
<BR><P>
<H3>Maximum Stack Usage =        504 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
rte_realloc &rArr; memory_free &rArr; block_merge_next &rArr; block_absorb &rArr; block_link_next &rArr; block_next &rArr; OUTLINED_FUNCTION_0 &rArr; log_out &rArr; log_snprintf &rArr; strncpy
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[d2]">__user_initial_stackheap</a>
 <LI><a href="#[6]">SVC_Handler</a>
 <LI><a href="#[8]">PendSV_Handler</a>
 <LI><a href="#[9]">SysTick_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[81]">ADC3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[81]">ADC3_IRQHandler</a><BR>
 <LI><a href="#[126]">osRtxThreadListRoot</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[126]">osRtxThreadListRoot</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[a2]">osRtxIdleThread</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a2]">osRtxIdleThread</a><BR>
 <LI><a href="#[11e]">osRtxErrorNotify</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11e]">osRtxErrorNotify</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[81]">ADC3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[83]">BDMA_Channel0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[84]">BDMA_Channel1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[85]">BDMA_Channel2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[86]">BDMA_Channel3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[87]">BDMA_Channel4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[88]">BDMA_Channel5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[89]">BDMA_Channel6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8a]">BDMA_Channel7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from lto-llvm-c3ea24.o(.text.BusFault_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[62]">CEC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8b]">COMP1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[91]">CRS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[53]">DCMI_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[72]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[73]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[74]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[75]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[38]">DMA1_Stream7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5e]">DMA2D_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[41]">DMA2_Stream0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[49]">DMA2_Stream5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4a]">DMA2_Stream6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4b]">DMA2_Stream7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6a]">DMAMUX1_OVR_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[82]">DMAMUX2_OVR_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from lto-llvm-c3ea24.o(.text.DebugMon_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[92]">ECC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[46]">ETH_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[47]">ETH_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1d]">FDCAN1_IT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1f]">FDCAN1_IT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1e]">FDCAN2_IT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[20]">FDCAN2_IT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[48]">FDCAN_CAL_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[39]">FMC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[55]">FPU_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[71]">HRTIM1_FLT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6b]">HRTIM1_Master_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6c]">HRTIM1_TIMA_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6d]">HRTIM1_TIMB_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6e]">HRTIM1_TIMC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6f]">HRTIM1_TIMD_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[70]">HRTIM1_TIME_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[80]">HSEM1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from lto-llvm-c3ea24.o(.text.HardFault_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4e]">I2C3_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4d]">I2C3_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[64]">I2C4_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[63]">I2C4_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7d]">JPEG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[61]">LPTIM1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8c]">LPTIM2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8d]">LPTIM3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8e]">LPTIM4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8f]">LPTIM5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[90]">LPUART1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5d]">LTDC_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5c]">LTDC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7c]">MDIOS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7b]">MDIOS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7e]">MDMA_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from lto-llvm-c3ea24.o(.text.MemManage_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from lto-llvm-c3ea24.o(.text.NMI_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[67]">OTG_FS_EP1_IN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[66]">OTG_FS_EP1_OUT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[69]">OTG_FS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[68]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[50]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4f]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[52]">OTG_HS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[51]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[b]">PVD_AVD_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from irq_armv7m.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[60]">QUADSPI_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[54]">RNG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5b]">SAI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5f]">SAI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[76]">SAI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[93]">SAI4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3a]">SDMMC1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7f]">SDMMC2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[65]">SPDIF_RX_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3c]">SPI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[58]">SPI4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[59]">SPI5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5a]">SPI6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from irq_armv7m.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[77]">SWPMI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from irq_armv7m.o(.text) referenced from rtx_kernel.o(.text.svcRtxKernelStart)
 <LI><a href="#[9]">SysTick_Handler</a> from irq_armv7m.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[95]">SystemInit</a> from lto-llvm-c3ea24.o(.text.SystemInit) referenced from startup_stm32h743xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[78]">TIM15_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[79]">TIM16_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7a]">TIM17_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3b]">TIM5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3f]">TIM6_DAC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[40]">TIM7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[34]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[37]">TIM8_CC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[36]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[35]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3d]">UART4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3e]">UART5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[56]">UART7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[57]">UART8_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[97]">UART_DMAAbortOnError</a> from lto-llvm-c3ea24.o(.text.UART_DMAAbortOnError) referenced from lto-llvm-c3ea24.o(.text.HAL_UART_IRQHandler)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from lto-llvm-c3ea24.o(.text.USART1_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4c]">USART6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from lto-llvm-c3ea24.o(.text.UsageFault_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[94]">WAKEUP_PIN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[96]">__main</a> from __main.o(!!!main) referenced from startup_stm32h743xx.o(.text)
 <LI><a href="#[a9]">osMutexNew</a> from rtx_mutex.o(.text.osMutexNew) referenced from lto-llvm-c3ea24.o(.text.system_thread)
 <LI><a href="#[a2]">osRtxIdleThread</a> from lto-llvm-c3ea24.o(.text.osRtxIdleThread) referenced from rtx_thread.o(.text.osRtxThreadStartup)
 <LI><a href="#[a6]">osRtxMemoryInit</a> from rtx_memory.o(.text.osRtxMemoryInit) referenced from rtx_kernel.o(.text.svcRtxKernelInitialize)
 <LI><a href="#[a8]">osRtxThreadPostProcess</a> from rtx_thread.o(.text.osRtxThreadPostProcess) referenced from rtx_thread.o(.text.svcRtxThreadNew)
 <LI><a href="#[a7]">osThreadExit</a> from rtx_thread.o(.text.osThreadExit) referenced from rtx_thread.o(.text.svcRtxThreadNew)
 <LI><a href="#[ae]">rte_calloc</a> from lto-llvm-c3ea24.o(.text.rte_calloc) referenced from lto-llvm-c3ea24.o(.text.system_thread)
 <LI><a href="#[b1]">rte_data_out</a> from lto-llvm-c3ea24.o(.text.rte_data_out) referenced from lto-llvm-c3ea24.o(.text.system_thread)
 <LI><a href="#[ac]">rte_free</a> from lto-llvm-c3ea24.o(.text.rte_free) referenced from lto-llvm-c3ea24.o(.text.system_thread)
 <LI><a href="#[b0]">rte_get_tick</a> from lto-llvm-c3ea24.o(.text.rte_get_tick) referenced from lto-llvm-c3ea24.o(.text.system_thread)
 <LI><a href="#[af]">rte_malloc</a> from lto-llvm-c3ea24.o(.text.rte_malloc) referenced from lto-llvm-c3ea24.o(.text.system_thread)
 <LI><a href="#[ab]">rte_mutex_lock</a> from lto-llvm-c3ea24.o(.text.rte_mutex_lock) referenced from lto-llvm-c3ea24.o(.text.system_thread)
 <LI><a href="#[aa]">rte_mutex_unlock</a> from lto-llvm-c3ea24.o(.text.rte_mutex_unlock) referenced from lto-llvm-c3ea24.o(.text.system_thread)
 <LI><a href="#[ad]">rte_realloc</a> from lto-llvm-c3ea24.o(.text.rte_realloc) referenced from lto-llvm-c3ea24.o(.text.system_thread)
 <LI><a href="#[99]">svcRtxDelay</a> from rtx_delay.o(.text.svcRtxDelay) referenced from rtx_delay.o(.text.osDelay)
 <LI><a href="#[9a]">svcRtxKernelGetState</a> from rtx_kernel.o(.text.svcRtxKernelGetState) referenced from rtx_kernel.o(.text.osKernelGetState)
 <LI><a href="#[9b]">svcRtxKernelGetTickCount</a> from rtx_kernel.o(.text.svcRtxKernelGetTickCount) referenced from rtx_kernel.o(.text.osKernelGetTickCount)
 <LI><a href="#[9c]">svcRtxKernelInitialize</a> from rtx_kernel.o(.text.svcRtxKernelInitialize) referenced from rtx_kernel.o(.text.osKernelInitialize)
 <LI><a href="#[9d]">svcRtxKernelStart</a> from rtx_kernel.o(.text.svcRtxKernelStart) referenced from rtx_kernel.o(.text.osKernelStart)
 <LI><a href="#[9e]">svcRtxMutexAcquire</a> from rtx_mutex.o(.text.svcRtxMutexAcquire) referenced from rtx_mutex.o(.text.osMutexAcquire)
 <LI><a href="#[9f]">svcRtxMutexDelete</a> from rtx_mutex.o(.text.svcRtxMutexDelete) referenced from rtx_mutex.o(.text.osMutexDelete)
 <LI><a href="#[a0]">svcRtxMutexNew</a> from rtx_mutex.o(.text.svcRtxMutexNew) referenced from rtx_mutex.o(.text.osMutexNew)
 <LI><a href="#[a1]">svcRtxMutexRelease</a> from rtx_mutex.o(.text.svcRtxMutexRelease) referenced from rtx_mutex.o(.text.osMutexRelease)
 <LI><a href="#[a3]">svcRtxThreadExit</a> from rtx_thread.o(.text.svcRtxThreadExit) referenced from rtx_thread.o(.text.osThreadExit)
 <LI><a href="#[a4]">svcRtxThreadNew</a> from rtx_thread.o(.text.svcRtxThreadNew) referenced from rtx_thread.o(.text.osThreadNew)
 <LI><a href="#[a5]">svcRtxThreadSetPriority</a> from rtx_thread.o(.text.svcRtxThreadSetPriority) referenced from rtx_thread.o(.text.osThreadSetPriority)
 <LI><a href="#[98]">system_thread</a> from lto-llvm-c3ea24.o(.text.system_thread) referenced from lto-llvm-c3ea24.o(.text.main)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[96]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(.text)
</UL>
<P><STRONG><a name="[b6]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[b8]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[143]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[144]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[145]"></a>__decompress</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[146]"></a>__decompress0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[b9]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[147]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[c1]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[ba]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[148]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[149]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[14a]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[14b]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[14c]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[14d]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[14e]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[14f]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[150]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[151]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[152]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[153]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[154]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[155]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[156]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[157]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[158]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[159]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[15a]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[15b]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[c6]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[15c]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[15d]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[15e]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[15f]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[160]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[161]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[162]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[b7]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[163]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[bc]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[be]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_postsh_1 &rArr; _platform_post_stackheap_init &rArr; osKernelInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[c0]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[c2]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[164]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[d3]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[c5]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[165]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[c7]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>BDMA_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>BDMA_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>BDMA_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>BDMA_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>BDMA_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>BDMA_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>BDMA_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>BDMA_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>COMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>DMAMUX2_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>ECC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>FDCAN2_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>FDCAN2_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>FDCAN_CAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>HRTIM1_FLT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>HRTIM1_Master_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>HRTIM1_TIMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>HRTIM1_TIMB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>HRTIM1_TIMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>HRTIM1_TIMD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>HRTIM1_TIME_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>HSEM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>JPEG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>LPTIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>LPTIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>LPTIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>MDIOS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>MDIOS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>MDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>OTG_FS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>OTG_FS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_AVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>SAI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>SAI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>SDMMC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>WAKEUP_PIN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[d2]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32h743xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 154 bytes, Stack size unknown bytes, irq_armv7m.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, irq_armv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = PendSV_Handler &rArr; osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, irq_armv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; osRtxTick_Handler &rArr; osRtxThreadDelayTick &rArr; osRtxMutexOwnerRestore &rArr; osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rtx_kernel.o(.text.svcRtxKernelStart)
<LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[10e]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>

<P><STRONG><a name="[d5]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_thread
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_realloc
</UL>

<P><STRONG><a name="[cb]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[166]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_calloc
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[167]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>_memset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[10d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>

<P><STRONG><a name="[168]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[cf]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_snprintf
</UL>

<P><STRONG><a name="[10b]"></a>strcmp</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, strcmpv7m_pel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_control
</UL>

<P><STRONG><a name="[16a]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[16d]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[16f]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[bd]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[c4]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[170]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[c8]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[171]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[172]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[173]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[174]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_thread
</UL>

<P><STRONG><a name="[d4]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[175]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_thread
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_control
</UL>

<P><STRONG><a name="[176]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[d6]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[177]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-c3ea24.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-c3ea24.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-c3ea24.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-c3ea24.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-c3ea24.o(.text.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[135]"></a>OS_Tick_AcknowledgeIRQ</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_AcknowledgeIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[13b]"></a>OS_Tick_Enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[13a]"></a>OS_Tick_GetIRQn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_GetIRQn))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[139]"></a>OS_Tick_Setup</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_Setup))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[95]"></a>SystemInit</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, lto-llvm-c3ea24.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(.text)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lto-llvm-c3ea24.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-c3ea24.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>_mutex_acquire</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lto-llvm-c3ea24.o(.text._mutex_acquire), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _mutex_acquire &rArr; os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>

<P><STRONG><a name="[b3]"></a>_mutex_free</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lto-llvm-c3ea24.o(.text._mutex_free), UNUSED, KEPT)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[b4]"></a>_mutex_initialize</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lto-llvm-c3ea24.o(.text._mutex_initialize), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _mutex_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>

<P><STRONG><a name="[b5]"></a>_mutex_release</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lto-llvm-c3ea24.o(.text._mutex_release), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _mutex_release &rArr; os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>

<P><STRONG><a name="[bf]"></a>_platform_post_stackheap_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-c3ea24.o(.text._platform_post_stackheap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _platform_post_stackheap_init &rArr; osKernelInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_postsh_1
</UL>

<P><STRONG><a name="[c3]"></a>main</STRONG> (Thumb, 4196 bytes, Stack size 208 bytes, lto-llvm-c3ea24.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = main &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSetPriority
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_18
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[142]"></a>osDelay</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_delay.o(.text.osDelay))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_thread
</UL>

<P><STRONG><a name="[138]"></a>osKernelGetState</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osKernelGetState), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>

<P><STRONG><a name="[ec]"></a>osKernelGetTickCount</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osKernelGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_get_tick
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_data_out
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
</UL>

<P><STRONG><a name="[fd]"></a>osKernelInitialize</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rtx_kernel.o(.text.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelPreInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[117]"></a>osKernelStart</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osKernelStart))
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f9]"></a>osMutexAcquire</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osMutexAcquire))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_mutex_lock
</UL>

<P><STRONG><a name="[fa]"></a>osMutexDelete</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osMutexDelete), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
</UL>

<P><STRONG><a name="[a9]"></a>osMutexNew</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osMutexNew))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-c3ea24.o(.text.system_thread)
</UL>
<P><STRONG><a name="[fc]"></a>osMutexRelease</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osMutexRelease))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_mutex_unlock
</UL>

<P><STRONG><a name="[11e]"></a>osRtxErrorNotify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-c3ea24.o(.text.osRtxErrorNotify), UNUSED, KEPT)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>

<P><STRONG><a name="[a2]"></a>osRtxIdleThread</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-c3ea24.o(.text.osRtxIdleThread))
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxIdleThread
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxIdleThread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osRtxThreadStartup)
</UL>
<P><STRONG><a name="[fb]"></a>osRtxKernelErrorNotify</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osRtxKernelErrorNotify), UNUSED, KEPT)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>

<P><STRONG><a name="[11c]"></a>osRtxKernelPreInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osRtxKernelPreInit))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[13d]"></a>osRtxMemoryAlloc</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, rtx_memory.o(.text.osRtxMemoryAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = osRtxMemoryAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[12c]"></a>osRtxMemoryFree</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rtx_memory.o(.text.osRtxMemoryFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
</UL>

<P><STRONG><a name="[a6]"></a>osRtxMemoryInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, rtx_memory.o(.text.osRtxMemoryInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxMemoryInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.svcRtxKernelInitialize)
</UL>
<P><STRONG><a name="[13c]"></a>osRtxMemoryPoolAlloc</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, rtx_mempool.o(.text.osRtxMemoryPoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxMemoryPoolAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[12d]"></a>osRtxMemoryPoolFree</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, rtx_mempool.o(.text.osRtxMemoryPoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryPoolFree
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
</UL>

<P><STRONG><a name="[e8]"></a>osRtxMemoryPoolInit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rtx_mempool.o(.text.osRtxMemoryPoolInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryPoolInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[11f]"></a>osRtxMutexOwnerRelease</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, rtx_mutex.o(.text.osRtxMutexOwnerRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[122]"></a>osRtxMutexOwnerRestore</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rtx_mutex.o(.text.osRtxMutexOwnerRestore))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxMutexOwnerRestore &rArr; osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[c9]"></a>osRtxPendSV_Handler</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, rtx_system.o(.text.osRtxPendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[125]"></a>osRtxThreadDelayTick</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadDelayTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osRtxThreadDelayTick &rArr; osRtxMutexOwnerRestore &rArr; osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRestore
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRoot
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[124]"></a>osRtxThreadDispatch</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadDispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadSetPriority
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[120]"></a>osRtxThreadListGet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListGet))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[12f]"></a>osRtxThreadListPut</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadListPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
</UL>

<P><STRONG><a name="[127]"></a>osRtxThreadListRemove</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[123]"></a>osRtxThreadListSort</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadListSort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRestore
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadSetPriority
</UL>

<P><STRONG><a name="[128]"></a>osRtxThreadReadyPut</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadReadyPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[131]"></a>osRtxThreadStartup</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadStartup))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[136]"></a>osRtxThreadSwitch</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadSwitch))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[132]"></a>osRtxThreadWaitEnter</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadWaitEnter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
</UL>

<P><STRONG><a name="[121]"></a>osRtxThreadWaitExit</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadWaitExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadJoinWakeup
</UL>

<P><STRONG><a name="[ca]"></a>osRtxTick_Handler</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, rtx_system.o(.text.osRtxTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osRtxTick_Handler &rArr; osRtxThreadDelayTick &rArr; osRtxMutexOwnerRestore &rArr; osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_AcknowledgeIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[a7]"></a>osThreadExit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadExit))
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[115]"></a>osThreadNew</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadNew))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[116]"></a>osThreadSetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadSetPriority))
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bb]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[178]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[179]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[e7]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_kernel.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; osRtxMemoryPoolInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[11d]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_kernel.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[9a]"></a>svcRtxKernelGetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_kernel.o(.text.svcRtxKernelGetState))
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetState)
</UL>
<P><STRONG><a name="[9b]"></a>svcRtxKernelGetTickCount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_kernel.o(.text.svcRtxKernelGetTickCount))
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetTickCount)
</UL>
<P><STRONG><a name="[9c]"></a>svcRtxKernelInitialize</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, rtx_kernel.o(.text.svcRtxKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcRtxKernelInitialize &rArr; OUTLINED_FUNCTION_0 &rArr; osRtxMemoryPoolInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelInitialize)
</UL>
<P><STRONG><a name="[9d]"></a>svcRtxKernelStart</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, rtx_kernel.o(.text.svcRtxKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = svcRtxKernelStart &rArr; osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Setup
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetIRQn
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelStart)
</UL>
<P><STRONG><a name="[137]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_thread.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSetPriority
</UL>

<P><STRONG><a name="[130]"></a>ThreadFlagsCheck</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rtx_thread.o(.text.ThreadFlagsCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ThreadFlagsCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[12b]"></a>osRtxThreadBlock</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>

<P><STRONG><a name="[133]"></a>osRtxThreadDelayInsert</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadDelayInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadDelayInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[134]"></a>osRtxThreadDelayRemove</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadDelayRemove))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>

<P><STRONG><a name="[129]"></a>osRtxThreadDestroy</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadDestroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadDestroy &rArr; osRtxThreadFree &rArr; osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[12a]"></a>osRtxThreadFree</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadFree &rArr; osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDestroy
</UL>

<P><STRONG><a name="[12e]"></a>osRtxThreadJoinWakeup</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadJoinWakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osRtxThreadJoinWakeup &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[126]"></a>osRtxThreadListRoot</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListRoot))
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRoot
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRoot
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[a8]"></a>osRtxThreadPostProcess</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osRtxThreadPostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[a3]"></a>svcRtxThreadExit</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, rtx_thread.o(.text.svcRtxThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = svcRtxThreadExit &rArr; osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadJoinWakeup
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDestroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadExit)
</UL>
<P><STRONG><a name="[a4]"></a>svcRtxThreadNew</STRONG> (Thumb, 472 bytes, Stack size 48 bytes, rtx_thread.o(.text.svcRtxThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = svcRtxThreadNew &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadNew)
</UL>
<P><STRONG><a name="[a5]"></a>svcRtxThreadSetPriority</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, rtx_thread.o(.text.svcRtxThreadSetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcRtxThreadSetPriority &rArr; osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadSetPriority)
</UL>
<P><STRONG><a name="[99]"></a>svcRtxDelay</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtx_delay.o(.text.svcRtxDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcRtxDelay &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_delay.o(.text.osDelay)
</UL>
<P><STRONG><a name="[9e]"></a>svcRtxMutexAcquire</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = svcRtxMutexAcquire &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexAcquire)
</UL>
<P><STRONG><a name="[9f]"></a>svcRtxMutexDelete</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcRtxMutexDelete &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexDelete)
</UL>
<P><STRONG><a name="[a0]"></a>svcRtxMutexNew</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = svcRtxMutexNew &rArr; osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexNew)
</UL>
<P><STRONG><a name="[a1]"></a>svcRtxMutexRelease</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcRtxMutexRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexRelease)
</UL>
<P><STRONG><a name="[d8]"></a>HAL_InitTick</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, lto-llvm-c3ea24.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d9]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lto-llvm-c3ea24.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[da]"></a>HAL_RCCEx_GetPLL2ClockFreq</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, lto-llvm-c3ea24.o(.text.HAL_RCCEx_GetPLL2ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCCEx_GetPLL2ClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e0]"></a>HAL_RCCEx_GetPLL3ClockFreq</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, lto-llvm-c3ea24.o(.text.HAL_RCCEx_GetPLL3ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCCEx_GetPLL3ClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e1]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lto-llvm-c3ea24.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[e3]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lto-llvm-c3ea24.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_16
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e5]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lto-llvm-c3ea24.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_16
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 244 bytes, Stack size 8 bytes, lto-llvm-c3ea24.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>

<P><STRONG><a name="[e6]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 740 bytes, Stack size 16 bytes, lto-llvm-c3ea24.o(.text.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UART_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[e9]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lto-llvm-c3ea24.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; log_out &rArr; log_snprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_realloc
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_free_block
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_free
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_split
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_locate_free
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_absorb
</UL>

<P><STRONG><a name="[f6]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, lto-llvm-c3ea24.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
</UL>

<P><STRONG><a name="[eb]"></a>OUTLINED_FUNCTION_10</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lto-llvm-c3ea24.o(.text.OUTLINED_FUNCTION_10))
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
</UL>

<P><STRONG><a name="[110]"></a>OUTLINED_FUNCTION_11</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lto-llvm-c3ea24.o(.text.OUTLINED_FUNCTION_11))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ed]"></a>OUTLINED_FUNCTION_12</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lto-llvm-c3ea24.o(.text.OUTLINED_FUNCTION_12))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_12 &rArr; RCCEx_PLL2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[112]"></a>OUTLINED_FUNCTION_13</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lto-llvm-c3ea24.o(.text.OUTLINED_FUNCTION_13))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[114]"></a>OUTLINED_FUNCTION_14</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-c3ea24.o(.text.OUTLINED_FUNCTION_14))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f7]"></a>OUTLINED_FUNCTION_15</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-c3ea24.o(.text.OUTLINED_FUNCTION_15))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[e4]"></a>OUTLINED_FUNCTION_16</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lto-llvm-c3ea24.o(.text.OUTLINED_FUNCTION_16))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[ef]"></a>OUTLINED_FUNCTION_17</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lto-llvm-c3ea24.o(.text.OUTLINED_FUNCTION_17))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_17 &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_data_out
</UL>

<P><STRONG><a name="[f1]"></a>OUTLINED_FUNCTION_18</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lto-llvm-c3ea24.o(.text.OUTLINED_FUNCTION_18))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_18 &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dd]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lto-llvm-c3ea24.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
</UL>

<P><STRONG><a name="[f2]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lto-llvm-c3ea24.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f4]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lto-llvm-c3ea24.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_4 &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[df]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lto-llvm-c3ea24.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
</UL>

<P><STRONG><a name="[de]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lto-llvm-c3ea24.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
</UL>

<P><STRONG><a name="[dc]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lto-llvm-c3ea24.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
</UL>

<P><STRONG><a name="[db]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lto-llvm-c3ea24.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
</UL>

<P><STRONG><a name="[f5]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lto-llvm-c3ea24.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_9 &rArr; RCCEx_PLL2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ee]"></a>RCCEx_PLL2_Config</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, lto-llvm-c3ea24.o(.text.RCCEx_PLL2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLL2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
</UL>

<P><STRONG><a name="[f3]"></a>RCCEx_PLL3_Config</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, lto-llvm-c3ea24.o(.text.RCCEx_PLL3_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>

<P><STRONG><a name="[113]"></a>UARTEx_SetNbDataToProcess</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lto-llvm-c3ea24.o(.text.UARTEx_SetNbDataToProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[97]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lto-llvm-c3ea24.o(.text.UART_DMAAbortOnError))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-c3ea24.o(.text.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[f0]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, lto-llvm-c3ea24.o(.text.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_18
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_17
</UL>

<P><STRONG><a name="[119]"></a>adjust_request_size</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lto-llvm-c3ea24.o(.text.adjust_request_size))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_realloc
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc
</UL>

<P><STRONG><a name="[fe]"></a>block_absorb</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, lto-llvm-c3ea24.o(.text.block_absorb))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = block_absorb &rArr; block_link_next &rArr; block_next &rArr; OUTLINED_FUNCTION_0 &rArr; log_out &rArr; log_snprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_link_next
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_free
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
</UL>

<P><STRONG><a name="[100]"></a>block_insert</STRONG> (Thumb, 192 bytes, Stack size 56 bytes, lto-llvm-c3ea24.o(.text.block_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = block_insert &rArr; OUTLINED_FUNCTION_0 &rArr; log_out &rArr; log_snprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_realloc
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_pool
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_free
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
</UL>

<P><STRONG><a name="[ff]"></a>block_link_next</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lto-llvm-c3ea24.o(.text.block_link_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = block_link_next &rArr; block_next &rArr; OUTLINED_FUNCTION_0 &rArr; log_out &rArr; log_snprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_pool
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_free
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_absorb
</UL>

<P><STRONG><a name="[102]"></a>block_locate_free</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, lto-llvm-c3ea24.o(.text.block_locate_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = block_locate_free &rArr; remove_free_block &rArr; OUTLINED_FUNCTION_0 &rArr; log_out &rArr; log_snprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_free_block
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_realloc
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc
</UL>

<P><STRONG><a name="[104]"></a>block_mark_as_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lto-llvm-c3ea24.o(.text.block_mark_as_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = block_mark_as_free &rArr; block_link_next &rArr; block_next &rArr; OUTLINED_FUNCTION_0 &rArr; log_out &rArr; log_snprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_link_next
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_free
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_split
</UL>

<P><STRONG><a name="[105]"></a>block_mark_as_used</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lto-llvm-c3ea24.o(.text.block_mark_as_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = block_mark_as_used &rArr; block_next &rArr; OUTLINED_FUNCTION_0 &rArr; log_out &rArr; log_snprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_realloc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
</UL>

<P><STRONG><a name="[106]"></a>block_merge_next</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, lto-llvm-c3ea24.o(.text.block_merge_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = block_merge_next &rArr; block_absorb &rArr; block_link_next &rArr; block_next &rArr; OUTLINED_FUNCTION_0 &rArr; log_out &rArr; log_snprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_remove
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_absorb
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_realloc
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_free
</UL>

<P><STRONG><a name="[101]"></a>block_next</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, lto-llvm-c3ea24.o(.text.block_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = block_next &rArr; OUTLINED_FUNCTION_0 &rArr; log_out &rArr; log_snprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_realloc
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_used
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_link_next
</UL>

<P><STRONG><a name="[108]"></a>block_prepare_used</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, lto-llvm-c3ea24.o(.text.block_prepare_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next &rArr; block_next &rArr; OUTLINED_FUNCTION_0 &rArr; log_out &rArr; log_snprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_split
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_used
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_link_next
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_realloc
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc
</UL>

<P><STRONG><a name="[107]"></a>block_remove</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lto-llvm-c3ea24.o(.text.block_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = block_remove &rArr; remove_free_block &rArr; OUTLINED_FUNCTION_0 &rArr; log_out &rArr; log_snprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_free_block
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_free
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
</UL>

<P><STRONG><a name="[109]"></a>block_split</STRONG> (Thumb, 216 bytes, Stack size 56 bytes, lto-llvm-c3ea24.o(.text.block_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = block_split &rArr; block_mark_as_free &rArr; block_link_next &rArr; block_next &rArr; OUTLINED_FUNCTION_0 &rArr; log_out &rArr; log_snprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_free
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_realloc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
</UL>

<P><STRONG><a name="[13f]"></a>ds_vector_at</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lto-llvm-c3ea24.o(.text.ds_vector_at))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_thread
</UL>

<P><STRONG><a name="[13e]"></a>ds_vector_lock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-c3ea24.o(.text.ds_vector_lock))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_thread
</UL>

<P><STRONG><a name="[140]"></a>ds_vector_unlock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-c3ea24.o(.text.ds_vector_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_thread
</UL>

<P><STRONG><a name="[10a]"></a>log_control</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, lto-llvm-c3ea24.o(.text.log_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = log_control &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_thread
</UL>

<P><STRONG><a name="[ea]"></a>log_out</STRONG> (Thumb, 852 bytes, Stack size 208 bytes, lto-llvm-c3ea24.o(.text.log_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = log_out &rArr; log_snprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_snprintf
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_thread
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_pool
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_split
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[10f]"></a>log_snprintf</STRONG> (Thumb, 704 bytes, Stack size 48 bytes, lto-llvm-c3ea24.o(.text.log_snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = log_snprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
</UL>

<P><STRONG><a name="[118]"></a>memory_alloc</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lto-llvm-c3ea24.o(.text.memory_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = memory_alloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next &rArr; block_next &rArr; OUTLINED_FUNCTION_0 &rArr; log_out &rArr; log_snprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_locate_free
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_request_size
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_malloc
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_calloc
</UL>

<P><STRONG><a name="[11a]"></a>memory_free</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, lto-llvm-c3ea24.o(.text.memory_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = memory_free &rArr; block_merge_next &rArr; block_absorb &rArr; block_link_next &rArr; block_next &rArr; OUTLINED_FUNCTION_0 &rArr; log_out &rArr; log_snprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_remove
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_free
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_absorb
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_realloc
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rte_free
</UL>

<P><STRONG><a name="[11b]"></a>memory_pool</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, lto-llvm-c3ea24.o(.text.memory_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = memory_pool &rArr; block_insert &rArr; OUTLINED_FUNCTION_0 &rArr; log_out &rArr; log_snprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_link_next
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_thread
</UL>

<P><STRONG><a name="[f8]"></a>os_kernel_is_active</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lto-llvm-c3ea24.o(.text.os_kernel_is_active), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>

<P><STRONG><a name="[103]"></a>remove_free_block</STRONG> (Thumb, 164 bytes, Stack size 56 bytes, lto-llvm-c3ea24.o(.text.remove_free_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = remove_free_block &rArr; OUTLINED_FUNCTION_0 &rArr; log_out &rArr; log_snprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_remove
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_locate_free
</UL>

<P><STRONG><a name="[ae]"></a>rte_calloc</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lto-llvm-c3ea24.o(.text.rte_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = rte_calloc &rArr; memory_alloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next &rArr; block_next &rArr; OUTLINED_FUNCTION_0 &rArr; log_out &rArr; log_snprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-c3ea24.o(.text.system_thread)
</UL>
<P><STRONG><a name="[b1]"></a>rte_data_out</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, lto-llvm-c3ea24.o(.text.rte_data_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rte_data_out &rArr; OUTLINED_FUNCTION_17 &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_17
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-c3ea24.o(.text.system_thread)
</UL>
<P><STRONG><a name="[ac]"></a>rte_free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-c3ea24.o(.text.rte_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = rte_free &rArr; memory_free &rArr; block_merge_next &rArr; block_absorb &rArr; block_link_next &rArr; block_next &rArr; OUTLINED_FUNCTION_0 &rArr; log_out &rArr; log_snprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-c3ea24.o(.text.system_thread)
</UL>
<P><STRONG><a name="[b0]"></a>rte_get_tick</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-c3ea24.o(.text.rte_get_tick))
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-c3ea24.o(.text.system_thread)
</UL>
<P><STRONG><a name="[af]"></a>rte_malloc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-c3ea24.o(.text.rte_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = rte_malloc &rArr; memory_alloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next &rArr; block_next &rArr; OUTLINED_FUNCTION_0 &rArr; log_out &rArr; log_snprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-c3ea24.o(.text.system_thread)
</UL>
<P><STRONG><a name="[ab]"></a>rte_mutex_lock</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lto-llvm-c3ea24.o(.text.rte_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rte_mutex_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-c3ea24.o(.text.system_thread)
</UL>
<P><STRONG><a name="[aa]"></a>rte_mutex_unlock</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lto-llvm-c3ea24.o(.text.rte_mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rte_mutex_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-c3ea24.o(.text.system_thread)
</UL>
<P><STRONG><a name="[ad]"></a>rte_realloc</STRONG> (Thumb, 384 bytes, Stack size 64 bytes, lto-llvm-c3ea24.o(.text.rte_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = rte_realloc &rArr; memory_free &rArr; block_merge_next &rArr; block_absorb &rArr; block_link_next &rArr; block_next &rArr; OUTLINED_FUNCTION_0 &rArr; log_out &rArr; log_snprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_free
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_split
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_used
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_locate_free
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_request_size
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-c3ea24.o(.text.system_thread)
</UL>
<P><STRONG><a name="[98]"></a>system_thread</STRONG> (Thumb, 824 bytes, Stack size 24 bytes, lto-llvm-c3ea24.o(.text.system_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = system_thread &rArr; memory_pool &rArr; block_insert &rArr; OUTLINED_FUNCTION_0 &rArr; log_out &rArr; log_snprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_pool
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_out
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_control
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_unlock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_lock
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_vector_at
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-c3ea24.o(.text.main)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
